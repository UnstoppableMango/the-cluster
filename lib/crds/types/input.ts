// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import {ObjectMeta} from "../meta/v1";

export namespace acme {
    export namespace v1 {
        export interface ChallengeSpecArgs {
            /**
             * The URL to the ACME Authorization resource that this challenge is a part of.
             */
            authorizationURL: pulumi.Input<string>;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: pulumi.Input<string>;
            /**
             * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
             */
            issuerRef: pulumi.Input<inputs.acme.v1.ChallengeSpecIssuerRefArgs>;
            /**
             * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
             */
            key: pulumi.Input<string>;
            /**
             * Contains the domain solving configuration that should be used to solve this challenge resource.
             */
            solver: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverArgs>;
            /**
             * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
             */
            token: pulumi.Input<string>;
            /**
             * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
             */
            type: pulumi.Input<string>;
            /**
             * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
             */
            url: pulumi.Input<string>;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
             */
            wildcard?: pulumi.Input<boolean>;
        }

        /**
         * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Contains the domain solving configuration that should be used to solve this challenge resource.
         */
        export interface ChallengeSpecSolverArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzureDNSArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudDNSArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzureDNSArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudDNSArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) 
             *  Support: Implementation-specific (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01IngressArgs {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ChallengeStatusArgs {
            /**
             * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
             */
            presented?: pulumi.Input<boolean>;
            /**
             * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
             */
            processing?: pulumi.Input<boolean>;
            /**
             * Contains human readable information on why the Challenge is in the current state.
             */
            reason?: pulumi.Input<string>;
            /**
             * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
             */
            state?: pulumi.Input<string>;
        }

        export interface OrderSpecArgs {
            /**
             * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
             */
            commonName?: pulumi.Input<string>;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
             */
            duration?: pulumi.Input<string>;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
             */
            issuerRef: pulumi.Input<inputs.acme.v1.OrderSpecIssuerRefArgs>;
            /**
             * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
             */
            request: pulumi.Input<string>;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
         */
        export interface OrderSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        export interface OrderStatusArgs {
            /**
             * Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
             */
            authorizations?: pulumi.Input<pulumi.Input<inputs.acme.v1.OrderStatusAuthorizationsArgs>[]>;
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
             */
            certificate?: pulumi.Input<string>;
            /**
             * FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: pulumi.Input<string>;
            /**
             * FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL?: pulumi.Input<string>;
            /**
             * Reason optionally provides more information about a why the order is in the current state.
             */
            reason?: pulumi.Input<string>;
            /**
             * State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
             */
            state?: pulumi.Input<string>;
            /**
             * URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
         */
        export interface OrderStatusAuthorizationsArgs {
            /**
             * Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
             */
            challenges?: pulumi.Input<pulumi.Input<inputs.acme.v1.OrderStatusAuthorizationsChallengesArgs>[]>;
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier?: pulumi.Input<string>;
            /**
             * InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
             */
            initialState?: pulumi.Input<string>;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: pulumi.Input<string>;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard?: pulumi.Input<boolean>;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
         */
        export interface OrderStatusAuthorizationsChallengesArgs {
            /**
             * Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
             */
            token: pulumi.Input<string>;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
             */
            type: pulumi.Input<string>;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
             */
            url: pulumi.Input<string>;
        }
    }
}

export namespace actions {
    export namespace v1alpha1 {
        /**
         * HorizontalRunnerAutoscalerSpec defines the desired state of HorizontalRunnerAutoscaler
         */
        export interface HorizontalRunnerAutoscalerSpecArgs {
            capacityReservations?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecCapacityReservationsArgs>[]>;
            /**
             * MaxReplicas is the maximum number of replicas the deployment is allowed to scale
             */
            maxReplicas?: pulumi.Input<number>;
            /**
             * Metrics is the collection of various metric targets to calculate desired number of runners
             */
            metrics?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecMetricsArgs>[]>;
            /**
             * MinReplicas is the minimum number of replicas the deployment is allowed to scale
             */
            minReplicas?: pulumi.Input<number>;
            /**
             * ScaleDownDelaySecondsAfterScaleUp is the approximate delay for a scale down followed by a scale up Used to prevent flapping (down->up->down->... loop)
             */
            scaleDownDelaySecondsAfterScaleOut?: pulumi.Input<number>;
            /**
             * ScaleTargetRef sis the reference to scaled resource like RunnerDeployment
             */
            scaleTargetRef?: pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecScaleTargetRefArgs>;
            /**
             * ScaleUpTriggers is an experimental feature to increase the desired replicas by 1 on each webhook requested received by the webhookBasedAutoscaler. 
             *  This feature requires you to also enable and deploy the webhookBasedAutoscaler onto your cluster. 
             *  Note that the added runners remain until the next sync period at least, and they may or may not be used by GitHub Actions depending on the timing. They are intended to be used to gain "resource slack" immediately after you receive a webhook from GitHub, so that you can loosely expect MinReplicas runners to be always available.
             */
            scaleUpTriggers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecScaleUpTriggersArgs>[]>;
            /**
             * ScheduledOverrides is the list of ScheduledOverride. It can be used to override a few fields of HorizontalRunnerAutoscalerSpec on schedule. The earlier a scheduled override is, the higher it is prioritized.
             */
            scheduledOverrides?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecScheduledOverridesArgs>[]>;
        }

        /**
         * CapacityReservation specifies the number of replicas temporarily added to the scale target until ExpirationTime.
         */
        export interface HorizontalRunnerAutoscalerSpecCapacityReservationsArgs {
            expirationTime?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            replicas?: pulumi.Input<number>;
        }

        export interface HorizontalRunnerAutoscalerSpecMetricsArgs {
            /**
             * RepositoryNames is the list of repository names to be used for calculating the metric. For example, a repository name is the REPO part of `github.com/USER/REPO`.
             */
            repositoryNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ScaleDownAdjustment is the number of runners removed on scale-down. You can only specify either ScaleDownFactor or ScaleDownAdjustment.
             */
            scaleDownAdjustment?: pulumi.Input<number>;
            /**
             * ScaleDownFactor is the multiplicative factor applied to the current number of runners used to determine how many pods should be removed.
             */
            scaleDownFactor?: pulumi.Input<string>;
            /**
             * ScaleDownThreshold is the percentage of busy runners less than which will trigger the hpa to scale the runners down.
             */
            scaleDownThreshold?: pulumi.Input<string>;
            /**
             * ScaleUpAdjustment is the number of runners added on scale-up. You can only specify either ScaleUpFactor or ScaleUpAdjustment.
             */
            scaleUpAdjustment?: pulumi.Input<number>;
            /**
             * ScaleUpFactor is the multiplicative factor applied to the current number of runners used to determine how many pods should be added.
             */
            scaleUpFactor?: pulumi.Input<string>;
            /**
             * ScaleUpThreshold is the percentage of busy runners greater than which will trigger the hpa to scale runners up.
             */
            scaleUpThreshold?: pulumi.Input<string>;
            /**
             * Type is the type of metric to be used for autoscaling. The only supported Type is TotalNumberOfQueuedAndInProgressWorkflowRuns
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ScaleTargetRef sis the reference to scaled resource like RunnerDeployment
         */
        export interface HorizontalRunnerAutoscalerSpecScaleTargetRefArgs {
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        export interface HorizontalRunnerAutoscalerSpecScaleUpTriggersArgs {
            amount?: pulumi.Input<number>;
            duration?: pulumi.Input<string>;
            githubEvent?: pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecScaleUpTriggersGithubEventArgs>;
        }

        export interface HorizontalRunnerAutoscalerSpecScaleUpTriggersGithubEventArgs {
            /**
             * https://docs.github.com/en/actions/reference/events-that-trigger-workflows#check_run
             */
            checkRun?: pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecScaleUpTriggersGithubEventCheckRunArgs>;
            /**
             * https://docs.github.com/en/actions/reference/events-that-trigger-workflows#pull_request
             */
            pullRequest?: pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecScaleUpTriggersGithubEventPullRequestArgs>;
            /**
             * PushSpec is the condition for triggering scale-up on push event Also see https://docs.github.com/en/actions/reference/events-that-trigger-workflows#push
             */
            push?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * https://docs.github.com/en/actions/reference/events-that-trigger-workflows#check_run
         */
        export interface HorizontalRunnerAutoscalerSpecScaleUpTriggersGithubEventCheckRunArgs {
            /**
             * Names is a list of GitHub Actions glob patterns. Any check_run event whose name matches one of patterns in the list can trigger autoscaling. Note that check_run name seem to equal to the job name you've defined in your actions workflow yaml file. So it is very likely that you can utilize this to trigger depending on the job.
             */
            names?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Repositories is a list of GitHub repositories. Any check_run event whose repository matches one of repositories in the list can trigger autoscaling.
             */
            repositories?: pulumi.Input<pulumi.Input<string>[]>;
            status?: pulumi.Input<string>;
            types?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * https://docs.github.com/en/actions/reference/events-that-trigger-workflows#pull_request
         */
        export interface HorizontalRunnerAutoscalerSpecScaleUpTriggersGithubEventPullRequestArgs {
            branches?: pulumi.Input<pulumi.Input<string>[]>;
            types?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ScheduledOverride can be used to override a few fields of HorizontalRunnerAutoscalerSpec on schedule. A schedule can optionally be recurring, so that the correspoding override happens every day, week, month, or year.
         */
        export interface HorizontalRunnerAutoscalerSpecScheduledOverridesArgs {
            /**
             * EndTime is the time at which the first override ends.
             */
            endTime: pulumi.Input<string>;
            /**
             * MinReplicas is the number of runners while overriding. If omitted, it doesn't override minReplicas.
             */
            minReplicas?: pulumi.Input<number>;
            recurrenceRule?: pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerSpecScheduledOverridesRecurrenceRuleArgs>;
            /**
             * StartTime is the time at which the first override starts.
             */
            startTime: pulumi.Input<string>;
        }

        export interface HorizontalRunnerAutoscalerSpecScheduledOverridesRecurrenceRuleArgs {
            /**
             * Frequency is the name of a predefined interval of each recurrence. The valid values are "Daily", "Weekly", "Monthly", and "Yearly". If empty, the corresponding override happens only once.
             */
            frequency?: pulumi.Input<string>;
            /**
             * UntilTime is the time of the final recurrence. If empty, the schedule recurs forever.
             */
            untilTime?: pulumi.Input<string>;
        }

        export interface HorizontalRunnerAutoscalerStatusArgs {
            cacheEntries?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.HorizontalRunnerAutoscalerStatusCacheEntriesArgs>[]>;
            /**
             * DesiredReplicas is the total number of desired, non-terminated and latest pods to be set for the primary RunnerSet This doesn't include outdated pods while upgrading the deployment and replacing the runnerset.
             */
            desiredReplicas?: pulumi.Input<number>;
            lastSuccessfulScaleOutTime?: pulumi.Input<string>;
            /**
             * ObservedGeneration is the most recent generation observed for the target. It corresponds to e.g. RunnerDeployment's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * ScheduledOverridesSummary is the summary of active and upcoming scheduled overrides to be shown in e.g. a column of a `kubectl get hra` output for observability.
             */
            scheduledOverridesSummary?: pulumi.Input<string>;
        }

        export interface HorizontalRunnerAutoscalerStatusCacheEntriesArgs {
            expirationTime?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            value?: pulumi.Input<number>;
        }

        /**
         * RunnerDeploymentSpec defines the desired state of RunnerDeployment
         */
        export interface RunnerDeploymentSpecArgs {
            replicas?: pulumi.Input<number>;
            /**
             * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecSelectorArgs>;
            template: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateArgs>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface RunnerDeploymentSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RunnerDeploymentSpecTemplateArgs {
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateMetadataArgs>;
            /**
             * RunnerSpec defines the desired state of Runner
             */
            spec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecArgs>;
        }

        export interface RunnerDeploymentSpecTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * RunnerSpec defines the desired state of Runner
         */
        export interface RunnerDeploymentSpecTemplateSpecArgs {
            /**
             * Affinity is a group of affinity scheduling rules.
             */
            affinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityArgs>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            containers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersArgs>[]>;
            dnsConfig?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDnsConfigArgs>[]>;
            dockerEnabled?: pulumi.Input<boolean>;
            dockerEnv?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerEnvArgs>[]>;
            dockerMTU?: pulumi.Input<number>;
            dockerRegistryMirror?: pulumi.Input<string>;
            dockerVolumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerVolumeMountsArgs>[]>;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            dockerdContainerResources?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerdContainerResourcesArgs>;
            dockerdWithinRunnerContainer?: pulumi.Input<boolean>;
            enableServiceLinks?: pulumi.Input<boolean>;
            enterprise?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvArgs>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvFromArgs>[]>;
            ephemeral?: pulumi.Input<boolean>;
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersArgs>[]>;
            group?: pulumi.Input<string>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecHostAliasesArgs>[]>;
            image?: pulumi.Input<string>;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecImagePullSecretsArgs>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersArgs>[]>;
            labels?: pulumi.Input<pulumi.Input<string>[]>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            organization?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecResourcesArgs>;
            /**
             * RuntimeClassName is the container runtime configuration that containers should run under. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSecurityContextArgs>;
            serviceAccountName?: pulumi.Input<string>;
            sidecarContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersArgs>[]>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecTolerationsArgs>[]>;
            topologySpreadConstraint?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecTopologySpreadConstraintArgs>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumeMountsArgs>[]>;
            volumeSizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumeSizeLimitArgs>;
            volumeStorageMedium?: pulumi.Input<string>;
            volumes?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesArgs>[]>;
            workDir?: pulumi.Input<string>;
        }

        /**
         * Affinity is a group of affinity scheduling rules.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersResourcesLimitsArgs {
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
         */
        export interface RunnerDeploymentSpecTemplateSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerEnvValueFromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecDockerEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface RunnerDeploymentSpecTemplateSpecDockerdContainerResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerdContainerResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecDockerdContainerResourcesRequestsArgs>}>;
        }

        export interface RunnerDeploymentSpecTemplateSpecDockerdContainerResourcesLimitsArgs {
        }

        export interface RunnerDeploymentSpecTemplateSpecDockerdContainerResourcesRequestsArgs {
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerDeploymentSpecTemplateSpecEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted. 
         *  This is a beta feature available on clusters that haven't disabled the EphemeralContainers feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersResourcesArgs>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersResourcesLimitsArgs {
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersResourcesRequestsArgs {
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface RunnerDeploymentSpecTemplateSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface RunnerDeploymentSpecTemplateSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersResourcesLimitsArgs {
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface RunnerDeploymentSpecTemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerDeploymentSpecTemplateSpecResourcesLimitsArgs {
        }

        export interface RunnerDeploymentSpecTemplateSpecResourcesRequestsArgs {
        }

        /**
         * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
         */
        export interface RunnerDeploymentSpecTemplateSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface RunnerDeploymentSpecTemplateSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerDeploymentSpecTemplateSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersResourcesLimitsArgs {
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecSidecarContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface RunnerDeploymentSpecTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface RunnerDeploymentSpecTemplateSpecTopologySpreadConstraintArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface RunnerDeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecVolumeSizeLimitArgs {
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesArgs {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesAzureDiskArgs>;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesAzureFileArgs>;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesCephfsArgs>;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesCinderArgs>;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesConfigMapArgs>;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesCsiArgs>;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIArgs>;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEmptyDirArgs>;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralArgs>;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesFcArgs>;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesFlexVolumeArgs>;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesFlockerArgs>;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesGcePersistentDiskArgs>;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesGitRepoArgs>;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesGlusterfsArgs>;
            /**
             * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesHostPathArgs>;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesIscsiArgs>;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesNfsArgs>;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesPortworxVolumeArgs>;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedArgs>;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesQuobyteArgs>;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesRbdArgs>;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesScaleIOArgs>;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesSecretArgs>;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesStorageosArgs>;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesAzureDiskArgs {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesAzureFileArgs {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * Share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesCephfsArgs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesCephfsSecretRefArgs>;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesCinderArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesCinderSecretRefArgs>;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesConfigMapArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesCsiArgs {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEmptyDirArgs {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEmptyDirSizeLimitArgs>;
        }

        export interface RunnerDeploymentSpecTemplateSpecVolumesEmptyDirSizeLimitArgs {
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs {
        }

        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs {
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesFcArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesFlexVolumeArgs {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesFlockerArgs {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesGcePersistentDiskArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesGitRepoArgs {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * Repository URL
             */
            repository: pulumi.Input<string>;
            /**
             * Commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesGlusterfsArgs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesHostPathArgs {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesIscsiArgs {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesIscsiSecretRefArgs>;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesNfsArgs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaimArgs {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesPhotonPersistentDiskArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesPortworxVolumeArgs {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedArgs {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * information about the secret data to project
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesQuobyteArgs {
            /**
             * Group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesRbdArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesRbdSecretRefArgs>;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesScaleIOArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesScaleIOSecretRefArgs>;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesSecretArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesSecretItemsArgs>[]>;
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesStorageosArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerDeploymentSpecTemplateSpecVolumesStorageosSecretRefArgs>;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface RunnerDeploymentSpecTemplateSpecVolumesVsphereVolumeArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        export interface RunnerDeploymentStatusArgs {
            /**
             * AvailableReplicas is the total number of available runners which have been successfully registered to GitHub and still running. This corresponds to the sum of status.availableReplicas of all the runner replica sets.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * DesiredReplicas is the total number of desired, non-terminated and latest pods to be set for the primary RunnerSet This doesn't include outdated pods while upgrading the deployment and replacing the runnerset.
             */
            desiredReplicas?: pulumi.Input<number>;
            /**
             * ReadyReplicas is the total number of available runners which have been successfully registered to GitHub and still running. This corresponds to the sum of status.readyReplicas of all the runner replica sets.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the total number of replicas
             */
            replicas?: pulumi.Input<number>;
            /**
             * ReadyReplicas is the total number of available runners which have been successfully registered to GitHub and still running. This corresponds to status.replicas of the runner replica set that has the desired template hash.
             */
            updatedReplicas?: pulumi.Input<number>;
        }

        /**
         * RunnerReplicaSetSpec defines the desired state of RunnerReplicaSet
         */
        export interface RunnerReplicaSetSpecArgs {
            replicas?: pulumi.Input<number>;
            /**
             * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecSelectorArgs>;
            template: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateArgs>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface RunnerReplicaSetSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RunnerReplicaSetSpecTemplateArgs {
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateMetadataArgs>;
            /**
             * RunnerSpec defines the desired state of Runner
             */
            spec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * RunnerSpec defines the desired state of Runner
         */
        export interface RunnerReplicaSetSpecTemplateSpecArgs {
            /**
             * Affinity is a group of affinity scheduling rules.
             */
            affinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityArgs>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            containers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersArgs>[]>;
            dnsConfig?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDnsConfigArgs>[]>;
            dockerEnabled?: pulumi.Input<boolean>;
            dockerEnv?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerEnvArgs>[]>;
            dockerMTU?: pulumi.Input<number>;
            dockerRegistryMirror?: pulumi.Input<string>;
            dockerVolumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerVolumeMountsArgs>[]>;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            dockerdContainerResources?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerdContainerResourcesArgs>;
            dockerdWithinRunnerContainer?: pulumi.Input<boolean>;
            enableServiceLinks?: pulumi.Input<boolean>;
            enterprise?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvArgs>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvFromArgs>[]>;
            ephemeral?: pulumi.Input<boolean>;
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersArgs>[]>;
            group?: pulumi.Input<string>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecHostAliasesArgs>[]>;
            image?: pulumi.Input<string>;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecImagePullSecretsArgs>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersArgs>[]>;
            labels?: pulumi.Input<pulumi.Input<string>[]>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            organization?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecResourcesArgs>;
            /**
             * RuntimeClassName is the container runtime configuration that containers should run under. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSecurityContextArgs>;
            serviceAccountName?: pulumi.Input<string>;
            sidecarContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersArgs>[]>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecTolerationsArgs>[]>;
            topologySpreadConstraint?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecTopologySpreadConstraintArgs>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumeMountsArgs>[]>;
            volumeSizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumeSizeLimitArgs>;
            volumeStorageMedium?: pulumi.Input<string>;
            volumes?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesArgs>[]>;
            workDir?: pulumi.Input<string>;
        }

        /**
         * Affinity is a group of affinity scheduling rules.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersResourcesLimitsArgs {
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface RunnerReplicaSetSpecTemplateSpecDockerdContainerResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerdContainerResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecDockerdContainerResourcesRequestsArgs>}>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecDockerdContainerResourcesLimitsArgs {
        }

        export interface RunnerReplicaSetSpecTemplateSpecDockerdContainerResourcesRequestsArgs {
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerReplicaSetSpecTemplateSpecEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted. 
         *  This is a beta feature available on clusters that haven't disabled the EphemeralContainers feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersResourcesArgs>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersResourcesLimitsArgs {
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersResourcesRequestsArgs {
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface RunnerReplicaSetSpecTemplateSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface RunnerReplicaSetSpecTemplateSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersResourcesLimitsArgs {
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface RunnerReplicaSetSpecTemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecResourcesLimitsArgs {
        }

        export interface RunnerReplicaSetSpecTemplateSpecResourcesRequestsArgs {
        }

        /**
         * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface RunnerReplicaSetSpecTemplateSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersResourcesLimitsArgs {
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecSidecarContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface RunnerReplicaSetSpecTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface RunnerReplicaSetSpecTemplateSpecTopologySpreadConstraintArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface RunnerReplicaSetSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecVolumeSizeLimitArgs {
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesArgs {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesAzureDiskArgs>;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesAzureFileArgs>;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesCephfsArgs>;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesCinderArgs>;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesConfigMapArgs>;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesCsiArgs>;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIArgs>;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEmptyDirArgs>;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralArgs>;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesFcArgs>;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesFlexVolumeArgs>;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesFlockerArgs>;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesGcePersistentDiskArgs>;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesGitRepoArgs>;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesGlusterfsArgs>;
            /**
             * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesHostPathArgs>;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesIscsiArgs>;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesNfsArgs>;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesPortworxVolumeArgs>;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedArgs>;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesQuobyteArgs>;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesRbdArgs>;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesScaleIOArgs>;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesSecretArgs>;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesStorageosArgs>;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesAzureDiskArgs {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesAzureFileArgs {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * Share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesCephfsArgs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesCephfsSecretRefArgs>;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesCinderArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesCinderSecretRefArgs>;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesConfigMapArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesCsiArgs {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEmptyDirArgs {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEmptyDirSizeLimitArgs>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecVolumesEmptyDirSizeLimitArgs {
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs {
        }

        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs {
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesFcArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesFlexVolumeArgs {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesFlockerArgs {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesGcePersistentDiskArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesGitRepoArgs {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * Repository URL
             */
            repository: pulumi.Input<string>;
            /**
             * Commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesGlusterfsArgs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesHostPathArgs {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesIscsiArgs {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesIscsiSecretRefArgs>;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesNfsArgs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesPersistentVolumeClaimArgs {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesPhotonPersistentDiskArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesPortworxVolumeArgs {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedArgs {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * information about the secret data to project
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesQuobyteArgs {
            /**
             * Group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesRbdArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesRbdSecretRefArgs>;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesScaleIOArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesScaleIOSecretRefArgs>;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesSecretArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesSecretItemsArgs>[]>;
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesStorageosArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerReplicaSetSpecTemplateSpecVolumesStorageosSecretRefArgs>;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface RunnerReplicaSetSpecTemplateSpecVolumesVsphereVolumeArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        export interface RunnerReplicaSetStatusArgs {
            /**
             * AvailableReplicas is the number of runners that are created and Runnning. This is currently same as ReadyReplicas but perserved for future use.
             */
            availableReplicas: pulumi.Input<number>;
            /**
             * ReadyReplicas is the number of runners that are created and Runnning.
             */
            readyReplicas: pulumi.Input<number>;
            /**
             * Replicas is the number of runners that are created and still being managed by this runner replica set.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * RunnerSetSpec defines the desired state of RunnerSet
         */
        export interface RunnerSetSpecArgs {
            dockerEnabled?: pulumi.Input<boolean>;
            dockerMTU?: pulumi.Input<number>;
            dockerRegistryMirror?: pulumi.Input<string>;
            dockerdWithinRunnerContainer?: pulumi.Input<boolean>;
            enterprise?: pulumi.Input<string>;
            ephemeral?: pulumi.Input<boolean>;
            group?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            labels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.
             */
            minReadySeconds?: pulumi.Input<number>;
            organization?: pulumi.Input<string>;
            /**
             * persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.  +optional
             */
            persistentVolumeClaimRetentionPolicy?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecPersistentVolumeClaimRetentionPolicyArgs>;
            /**
             * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
             */
            podManagementPolicy?: pulumi.Input<string>;
            /**
             * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1. TODO: Consider a rename of this field.
             */
            replicas?: pulumi.Input<number>;
            repository?: pulumi.Input<string>;
            /**
             * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecSelectorArgs>;
            /**
             * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
             */
            serviceName: pulumi.Input<string>;
            /**
             * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
             */
            template: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateArgs>;
            /**
             * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
             */
            updateStrategy?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecUpdateStrategyArgs>;
            /**
             * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. TODO: Define the behavior if a claim already exists with the same name.
             */
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesArgs>[]>;
            volumeSizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeSizeLimitArgs>;
            volumeStorageMedium?: pulumi.Input<string>;
            workDir?: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.  +optional
         */
        export interface RunnerSetSpecPersistentVolumeClaimRetentionPolicyArgs {
            /**
             * WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.
             */
            whenDeleted?: pulumi.Input<string>;
            /**
             * WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
             */
            whenScaled?: pulumi.Input<string>;
        }

        /**
         * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface RunnerSetSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
         */
        export interface RunnerSetSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface RunnerSetSpecTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface RunnerSetSpecTemplateSpecArgs {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityArgs>;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken?: pulumi.Input<boolean>;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersArgs>[]>;
            /**
             * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
             */
            dnsConfig?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecDnsConfigArgs>;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks?: pulumi.Input<boolean>;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
             */
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersArgs>[]>;
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecHostAliasesArgs>[]>;
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC?: pulumi.Input<boolean>;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID?: pulumi.Input<boolean>;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecImagePullSecretsArgs>[]>;
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersArgs>[]>;
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
             *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
             *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is an alpha field and requires the IdentifyPodOS feature
             */
            os?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecOsArgs>;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.
             */
            overhead?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecOverheadArgs>}>;
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
             */
            preemptionPolicy?: pulumi.Input<string>;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority?: pulumi.Input<number>;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecReadinessGatesArgs>[]>;
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecSecurityContextArgs>;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN?: pulumi.Input<boolean>;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace?: pulumi.Input<boolean>;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecTolerationsArgs>[]>;
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecTopologySpreadConstraintsArgs>[]>;
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface RunnerSetSpecTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerSetSpecTemplateSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSetSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerSetSpecTemplateSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerSetSpecTemplateSpecContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerSetSpecTemplateSpecContainersResourcesLimitsArgs {
        }

        export interface RunnerSetSpecTemplateSpecContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerSetSpecTemplateSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSetSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSetSpecTemplateSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerSetSpecTemplateSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSetSpecTemplateSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        export interface RunnerSetSpecTemplateSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface RunnerSetSpecTemplateSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted. 
         *  This is a beta feature available on clusters that haven't disabled the EphemeralContainers feature gate.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersResourcesArgs>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersResourcesLimitsArgs {
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersResourcesRequestsArgs {
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSetSpecTemplateSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface RunnerSetSpecTemplateSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface RunnerSetSpecTemplateSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerSetSpecTemplateSpecInitContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersResourcesLimitsArgs {
        }

        export interface RunnerSetSpecTemplateSpecInitContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerSetSpecTemplateSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSetSpecTemplateSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is an alpha field and requires the IdentifyPodOS feature
         */
        export interface RunnerSetSpecTemplateSpecOsArgs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecOverheadArgs {
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface RunnerSetSpecTemplateSpecReadinessGatesArgs {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: pulumi.Input<string>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface RunnerSetSpecTemplateSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSetSpecTemplateSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface RunnerSetSpecTemplateSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSetSpecTemplateSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface RunnerSetSpecTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface RunnerSetSpecTemplateSpecTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface RunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface RunnerSetSpecTemplateSpecVolumesArgs {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesAzureDiskArgs>;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesAzureFileArgs>;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesCephfsArgs>;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesCinderArgs>;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesConfigMapArgs>;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesCsiArgs>;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesDownwardAPIArgs>;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEmptyDirArgs>;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralArgs>;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesFcArgs>;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesFlexVolumeArgs>;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesFlockerArgs>;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesGcePersistentDiskArgs>;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesGitRepoArgs>;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesGlusterfsArgs>;
            /**
             * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesHostPathArgs>;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesIscsiArgs>;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesNfsArgs>;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesPortworxVolumeArgs>;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedArgs>;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesQuobyteArgs>;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesRbdArgs>;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesScaleIOArgs>;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesSecretArgs>;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesStorageosArgs>;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface RunnerSetSpecTemplateSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface RunnerSetSpecTemplateSpecVolumesAzureDiskArgs {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface RunnerSetSpecTemplateSpecVolumesAzureFileArgs {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * Share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface RunnerSetSpecTemplateSpecVolumesCephfsArgs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesCephfsSecretRefArgs>;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface RunnerSetSpecTemplateSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface RunnerSetSpecTemplateSpecVolumesCinderArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesCinderSecretRefArgs>;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface RunnerSetSpecTemplateSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface RunnerSetSpecTemplateSpecVolumesConfigMapArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSetSpecTemplateSpecVolumesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface RunnerSetSpecTemplateSpecVolumesCsiArgs {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface RunnerSetSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface RunnerSetSpecTemplateSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface RunnerSetSpecTemplateSpecVolumesEmptyDirArgs {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEmptyDirSizeLimitArgs>;
        }

        export interface RunnerSetSpecTemplateSpecVolumesEmptyDirSizeLimitArgs {
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs {
        }

        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs {
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface RunnerSetSpecTemplateSpecVolumesFcArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface RunnerSetSpecTemplateSpecVolumesFlexVolumeArgs {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface RunnerSetSpecTemplateSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface RunnerSetSpecTemplateSpecVolumesFlockerArgs {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface RunnerSetSpecTemplateSpecVolumesGcePersistentDiskArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface RunnerSetSpecTemplateSpecVolumesGitRepoArgs {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * Repository URL
             */
            repository: pulumi.Input<string>;
            /**
             * Commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface RunnerSetSpecTemplateSpecVolumesGlusterfsArgs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface RunnerSetSpecTemplateSpecVolumesHostPathArgs {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface RunnerSetSpecTemplateSpecVolumesIscsiArgs {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesIscsiSecretRefArgs>;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface RunnerSetSpecTemplateSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface RunnerSetSpecTemplateSpecVolumesNfsArgs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface RunnerSetSpecTemplateSpecVolumesPersistentVolumeClaimArgs {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface RunnerSetSpecTemplateSpecVolumesPhotonPersistentDiskArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface RunnerSetSpecTemplateSpecVolumesPortworxVolumeArgs {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedArgs {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * information about the secret data to project
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface RunnerSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface RunnerSetSpecTemplateSpecVolumesQuobyteArgs {
            /**
             * Group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface RunnerSetSpecTemplateSpecVolumesRbdArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesRbdSecretRefArgs>;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface RunnerSetSpecTemplateSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerSetSpecTemplateSpecVolumesScaleIOArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesScaleIOSecretRefArgs>;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface RunnerSetSpecTemplateSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface RunnerSetSpecTemplateSpecVolumesSecretArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesSecretItemsArgs>[]>;
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSetSpecTemplateSpecVolumesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerSetSpecTemplateSpecVolumesStorageosArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecTemplateSpecVolumesStorageosSecretRefArgs>;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface RunnerSetSpecTemplateSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface RunnerSetSpecTemplateSpecVolumesVsphereVolumeArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
         */
        export interface RunnerSetSpecUpdateStrategyArgs {
            /**
             * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
             */
            rollingUpdate?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecUpdateStrategyRollingUpdateArgs>;
            /**
             * Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
         */
        export interface RunnerSetSpecUpdateStrategyRollingUpdateArgs {
            /**
             * Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
             */
            partition?: pulumi.Input<number>;
        }

        /**
         * PersistentVolumeClaim is a user's request for and claim to a persistent volume
         */
        export interface RunnerSetSpecVolumeClaimTemplatesArgs {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesMetadataArgs>;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecArgs>;
            /**
             * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesStatusArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface RunnerSetSpecVolumeClaimTemplatesMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface RunnerSetSpecVolumeClaimTemplatesSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecDataSourceArgs>;
            /**
             * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecDataSourceRefArgs>;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface RunnerSetSpecVolumeClaimTemplatesSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface RunnerSetSpecVolumeClaimTemplatesSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface RunnerSetSpecVolumeClaimTemplatesSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerSetSpecVolumeClaimTemplatesSpecResourcesLimitsArgs {
        }

        export interface RunnerSetSpecVolumeClaimTemplatesSpecResourcesRequestsArgs {
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface RunnerSetSpecVolumeClaimTemplatesSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface RunnerSetSpecVolumeClaimTemplatesStatusArgs {
            /**
             * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesStatusAllocatedResourcesArgs>}>;
            /**
             * Represents the actual resources of the underlying volume.
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesStatusCapacityArgs>}>;
            /**
             * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSetSpecVolumeClaimTemplatesStatusConditionsArgs>[]>;
            /**
             * Phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: pulumi.Input<string>;
            /**
             * ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: pulumi.Input<string>;
        }

        export interface RunnerSetSpecVolumeClaimTemplatesStatusAllocatedResourcesArgs {
        }

        export interface RunnerSetSpecVolumeClaimTemplatesStatusCapacityArgs {
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface RunnerSetSpecVolumeClaimTemplatesStatusConditionsArgs {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: pulumi.Input<string>;
        }

        export interface RunnerSetSpecVolumeSizeLimitArgs {
        }

        export interface RunnerSetStatusArgs {
            /**
             * AvailableReplicas is the total number of available runners which have been successfully registered to GitHub and still running. This corresponds to the sum of status.availableReplicas of all the runner replica sets.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * DesiredReplicas is the total number of desired, non-terminated and latest pods to be set for the primary RunnerSet This doesn't include outdated pods while upgrading the deployment and replacing the runnerset.
             */
            desiredReplicas?: pulumi.Input<number>;
            /**
             * ReadyReplicas is the total number of available runners which have been successfully registered to GitHub and still running. This corresponds to the sum of status.readyReplicas of all the runner replica sets.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the total number of replicas
             */
            replicas?: pulumi.Input<number>;
            /**
             * ReadyReplicas is the total number of available runners which have been successfully registered to GitHub and still running. This corresponds to status.replicas of the runner replica set that has the desired template hash.
             */
            updatedReplicas?: pulumi.Input<number>;
        }

        /**
         * RunnerSpec defines the desired state of Runner
         */
        export interface RunnerSpecArgs {
            /**
             * Affinity is a group of affinity scheduling rules.
             */
            affinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityArgs>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            containers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersArgs>[]>;
            dnsConfig?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDnsConfigArgs>[]>;
            dockerEnabled?: pulumi.Input<boolean>;
            dockerEnv?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerEnvArgs>[]>;
            dockerMTU?: pulumi.Input<number>;
            dockerRegistryMirror?: pulumi.Input<string>;
            dockerVolumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerVolumeMountsArgs>[]>;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            dockerdContainerResources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerdContainerResourcesArgs>;
            dockerdWithinRunnerContainer?: pulumi.Input<boolean>;
            enableServiceLinks?: pulumi.Input<boolean>;
            enterprise?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvArgs>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvFromArgs>[]>;
            ephemeral?: pulumi.Input<boolean>;
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersArgs>[]>;
            group?: pulumi.Input<string>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecHostAliasesArgs>[]>;
            image?: pulumi.Input<string>;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecImagePullSecretsArgs>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersArgs>[]>;
            labels?: pulumi.Input<pulumi.Input<string>[]>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            organization?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecResourcesArgs>;
            /**
             * RuntimeClassName is the container runtime configuration that containers should run under. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSecurityContextArgs>;
            serviceAccountName?: pulumi.Input<string>;
            sidecarContainers?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersArgs>[]>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecTolerationsArgs>[]>;
            topologySpreadConstraint?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecTopologySpreadConstraintArgs>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumeMountsArgs>[]>;
            volumeSizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumeSizeLimitArgs>;
            volumeStorageMedium?: pulumi.Input<string>;
            volumes?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesArgs>[]>;
            workDir?: pulumi.Input<string>;
        }

        /**
         * Affinity is a group of affinity scheduling rules.
         */
        export interface RunnerSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface RunnerSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RunnerSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerSpecContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerSpecContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerSpecContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerSpecContainersResourcesLimitsArgs {
        }

        export interface RunnerSpecContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
         */
        export interface RunnerSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface RunnerSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSpecDockerEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerEnvValueFromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSpecDockerEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSpecDockerEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSpecDockerEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSpecDockerEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecDockerEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSpecDockerEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSpecDockerVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface RunnerSpecDockerdContainerResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerdContainerResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecDockerdContainerResourcesRequestsArgs>}>;
        }

        export interface RunnerSpecDockerdContainerResourcesLimitsArgs {
        }

        export interface RunnerSpecDockerdContainerResourcesRequestsArgs {
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSpecEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSpecEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSpecEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSpecEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSpecEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSpecEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSpecEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSpecEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSpecEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted. 
         *  This is a beta feature available on clusters that haven't disabled the EphemeralContainers feature gate.
         */
        export interface RunnerSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersResourcesArgs>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecEphemeralContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface RunnerSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecEphemeralContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecEphemeralContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecEphemeralContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecEphemeralContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface RunnerSpecEphemeralContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerSpecEphemeralContainersResourcesLimitsArgs {
        }

        export interface RunnerSpecEphemeralContainersResourcesRequestsArgs {
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface RunnerSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface RunnerSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecEphemeralContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecEphemeralContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecEphemeralContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface RunnerSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface RunnerSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecInitContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecInitContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerSpecInitContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecInitContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerSpecInitContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecInitContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecInitContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecInitContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecInitContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerSpecInitContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerSpecInitContainersResourcesLimitsArgs {
        }

        export interface RunnerSpecInitContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecInitContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecInitContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecInitContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface RunnerSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerSpecResourcesLimitsArgs {
        }

        export interface RunnerSpecResourcesRequestsArgs {
        }

        /**
         * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
         */
        export interface RunnerSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface RunnerSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RunnerSpecSidecarContainersArgs {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvFromArgs>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RunnerSpecSidecarContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RunnerSpecSidecarContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RunnerSpecSidecarContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface RunnerSpecSidecarContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RunnerSpecSidecarContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RunnerSpecSidecarContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RunnerSpecSidecarContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RunnerSpecSidecarContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersEnvValueFromResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecSidecarContainersEnvValueFromResourceFieldRefDivisorArgs {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RunnerSpecSidecarContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RunnerSpecSidecarContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecSidecarContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecSidecarContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecSidecarContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePostStartHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecSidecarContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecSidecarContainersLifecyclePostStartHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecSidecarContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePostStartTcpSocketPortArgs>;
        }

        export interface RunnerSpecSidecarContainersLifecyclePostStartTcpSocketPortArgs {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RunnerSpecSidecarContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecSidecarContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecSidecarContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePreStopHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecSidecarContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecSidecarContainersLifecyclePreStopHttpGetPortArgs {
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface RunnerSpecSidecarContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLifecyclePreStopTcpSocketPortArgs>;
        }

        export interface RunnerSpecSidecarContainersLifecyclePreStopTcpSocketPortArgs {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecSidecarContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecSidecarContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecSidecarContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecSidecarContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecSidecarContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecSidecarContainersLivenessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecSidecarContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersLivenessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecSidecarContainersLivenessProbeTcpSocketPortArgs {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RunnerSpecSidecarContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecSidecarContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecSidecarContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecSidecarContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecSidecarContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecSidecarContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecSidecarContainersReadinessProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecSidecarContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersReadinessProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecSidecarContainersReadinessProbeTcpSocketPortArgs {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RunnerSpecSidecarContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersResourcesRequestsArgs>}>;
        }

        export interface RunnerSpecSidecarContainersResourcesLimitsArgs {
        }

        export interface RunnerSpecSidecarContainersResourcesRequestsArgs {
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RunnerSpecSidecarContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecSidecarContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecSidecarContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface RunnerSpecSidecarContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface RunnerSpecSidecarContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RunnerSpecSidecarContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface RunnerSpecSidecarContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface RunnerSpecSidecarContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RunnerSpecSidecarContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeHttpGetPortArgs>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RunnerSpecSidecarContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface RunnerSpecSidecarContainersStartupProbeHttpGetPortArgs {
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface RunnerSpecSidecarContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecSidecarContainersStartupProbeTcpSocketPortArgs>;
        }

        export interface RunnerSpecSidecarContainersStartupProbeTcpSocketPortArgs {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RunnerSpecSidecarContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSpecSidecarContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface RunnerSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface RunnerSpecTopologySpreadConstraintArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecTopologySpreadConstraintLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface RunnerSpecTopologySpreadConstraintLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecTopologySpreadConstraintLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecTopologySpreadConstraintLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RunnerSpecVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        export interface RunnerSpecVolumeSizeLimitArgs {
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface RunnerSpecVolumesArgs {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesAzureDiskArgs>;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesAzureFileArgs>;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesCephfsArgs>;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesCinderArgs>;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesConfigMapArgs>;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesCsiArgs>;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesDownwardAPIArgs>;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEmptyDirArgs>;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralArgs>;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesFcArgs>;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesFlexVolumeArgs>;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesFlockerArgs>;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesGcePersistentDiskArgs>;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesGitRepoArgs>;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesGlusterfsArgs>;
            /**
             * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesHostPathArgs>;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesIscsiArgs>;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesNfsArgs>;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesPortworxVolumeArgs>;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedArgs>;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesQuobyteArgs>;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesRbdArgs>;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesScaleIOArgs>;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesSecretArgs>;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesStorageosArgs>;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface RunnerSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface RunnerSpecVolumesAzureDiskArgs {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface RunnerSpecVolumesAzureFileArgs {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * Share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface RunnerSpecVolumesCephfsArgs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesCephfsSecretRefArgs>;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface RunnerSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface RunnerSpecVolumesCinderArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesCinderSecretRefArgs>;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface RunnerSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface RunnerSpecVolumesConfigMapArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSpecVolumesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface RunnerSpecVolumesCsiArgs {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface RunnerSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface RunnerSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecVolumesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface RunnerSpecVolumesEmptyDirArgs {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEmptyDirSizeLimitArgs>;
        }

        export interface RunnerSpecVolumesEmptyDirSizeLimitArgs {
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface RunnerSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs>}>;
        }

        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimitsArgs {
        }

        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequestsArgs {
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RunnerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface RunnerSpecVolumesFcArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface RunnerSpecVolumesFlexVolumeArgs {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface RunnerSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface RunnerSpecVolumesFlockerArgs {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface RunnerSpecVolumesGcePersistentDiskArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface RunnerSpecVolumesGitRepoArgs {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * Repository URL
             */
            repository: pulumi.Input<string>;
            /**
             * Commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface RunnerSpecVolumesGlusterfsArgs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface RunnerSpecVolumesHostPathArgs {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface RunnerSpecVolumesIscsiArgs {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesIscsiSecretRefArgs>;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface RunnerSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface RunnerSpecVolumesNfsArgs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface RunnerSpecVolumesPersistentVolumeClaimArgs {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface RunnerSpecVolumesPhotonPersistentDiskArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface RunnerSpecVolumesPortworxVolumeArgs {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface RunnerSpecVolumesProjectedArgs {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface RunnerSpecVolumesProjectedSourcesArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface RunnerSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface RunnerSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface RunnerSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface RunnerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface RunnerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface RunnerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs {
        }

        /**
         * information about the secret data to project
         */
        export interface RunnerSpecVolumesProjectedSourcesSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface RunnerSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface RunnerSpecVolumesQuobyteArgs {
            /**
             * Group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface RunnerSpecVolumesRbdArgs {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesRbdSecretRefArgs>;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface RunnerSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerSpecVolumesScaleIOArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesScaleIOSecretRefArgs>;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface RunnerSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface RunnerSpecVolumesSecretArgs {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesSecretItemsArgs>[]>;
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface RunnerSpecVolumesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface RunnerSpecVolumesStorageosArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.actions.v1alpha1.RunnerSpecVolumesStorageosSecretRefArgs>;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface RunnerSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface RunnerSpecVolumesVsphereVolumeArgs {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * RunnerStatus defines the observed state of Runner
         */
        export interface RunnerStatusArgs {
            lastRegistrationCheckTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            phase?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            /**
             * RunnerStatusRegistration contains runner registration status
             */
            registration?: pulumi.Input<inputs.actions.v1alpha1.RunnerStatusRegistrationArgs>;
        }

        /**
         * RunnerStatusRegistration contains runner registration status
         */
        export interface RunnerStatusRegistrationArgs {
            enterprise?: pulumi.Input<string>;
            expiresAt: pulumi.Input<string>;
            labels?: pulumi.Input<pulumi.Input<string>[]>;
            organization?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            token: pulumi.Input<string>;
        }
    }
}

export namespace certmanager {
    export namespace v1 {
        /**
         * Desired state of the CertificateRequest resource.
         */
        export interface CertificateRequestSpecArgs {
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
             */
            duration?: pulumi.Input<string>;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            extra?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            groups?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            /**
             * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
             */
            issuerRef: pulumi.Input<inputs.certmanager.v1.CertificateRequestSpecIssuerRefArgs>;
            /**
             * The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
             */
            request: pulumi.Input<string>;
            /**
             * UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            uid?: pulumi.Input<string>;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            username?: pulumi.Input<string>;
        }

        /**
         * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
         */
        export interface CertificateRequestSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the CertificateRequest. This is set and managed automatically.
         */
        export interface CertificateRequestStatusArgs {
            /**
             * The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
             */
            ca?: pulumi.Input<string>;
            /**
             * The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
             */
            certificate?: pulumi.Input<string>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateRequestStatusConditionsArgs>[]>;
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: pulumi.Input<string>;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the Certificate resource.
         */
        export interface CertificateSpecArgs {
            /**
             * AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option on both the controller and webhook components.
             */
            additionalOutputFormats?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateSpecAdditionalOutputFormatsArgs>[]>;
            /**
             * CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
             */
            commonName?: pulumi.Input<string>;
            /**
             * DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            duration?: pulumi.Input<string>;
            /**
             * EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
             */
            encodeUsagesInRequest?: pulumi.Input<boolean>;
            /**
             * IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            /**
             * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
             */
            issuerRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecIssuerRefArgs>;
            /**
             * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
             */
            keystores?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresArgs>;
            /**
             * LiteralSubject is an LDAP formatted string that represents the [X.509 Subject field](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6). Use this *instead* of the Subject field if you need to ensure the correct ordering of the RDN sequence, such as when issuing certs for LDAP authentication. See https://github.com/cert-manager/cert-manager/issues/3203, https://github.com/cert-manager/cert-manager/issues/4424. This field is alpha level and is only supported by cert-manager installations where LiteralCertificateSubject feature gate is enabled on both cert-manager controller and webhook.
             */
            literalSubject?: pulumi.Input<string>;
            /**
             * Options to control private keys used for the Certificate.
             */
            privateKey?: pulumi.Input<inputs.certmanager.v1.CertificateSpecPrivateKeyArgs>;
            /**
             * How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            renewBefore?: pulumi.Input<string>;
            /**
             * revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
             */
            secretName: pulumi.Input<string>;
            /**
             * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
             */
            secretTemplate?: pulumi.Input<inputs.certmanager.v1.CertificateSpecSecretTemplateArgs>;
            /**
             * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
             */
            subject?: pulumi.Input<inputs.certmanager.v1.CertificateSpecSubjectArgs>;
            /**
             * URIs is a list of URI subjectAltNames to be set on the Certificate.
             */
            uris?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormatsArgs {
            /**
             * Type is the name of the format type that should be written to the Certificate's target Secret.
             */
            type: pulumi.Input<string>;
        }

        /**
         * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
         */
        export interface CertificateSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresArgs {
            /**
             * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
             */
            jks?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresJksArgs>;
            /**
             * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
             */
            pkcs12?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresPkcs12Args>;
        }

        /**
         * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJksArgs {
            /**
             * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: pulumi.Input<boolean>;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
             */
            passwordSecretRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresJksPasswordSecretRefArgs>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12Args {
            /**
             * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: pulumi.Input<boolean>;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
             */
            passwordSecretRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRefArgs>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Options to control private keys used for the Certificate.
         */
        export interface CertificateSpecPrivateKeyArgs {
            /**
             * Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: pulumi.Input<string>;
            /**
             * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
             */
            encoding?: pulumi.Input<string>;
            /**
             * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
             */
            rotationPolicy?: pulumi.Input<string>;
            /**
             * Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
             */
            size?: pulumi.Input<number>;
        }

        /**
         * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplateArgs {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
         */
        export interface CertificateSpecSubjectArgs {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Cities to be used on the Certificate.
             */
            localities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: pulumi.Input<string>;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status of the Certificate. This is set and managed automatically.
         */
        export interface CertificateStatusArgs {
            /**
             * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateStatusConditionsArgs>[]>;
            /**
             * The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: pulumi.Input<number>;
            /**
             * LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
             */
            lastFailureTime?: pulumi.Input<string>;
            /**
             * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
             */
            nextPrivateKeySecretName?: pulumi.Input<string>;
            /**
             * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
             */
            notAfter?: pulumi.Input<string>;
            /**
             * The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
             */
            notBefore?: pulumi.Input<string>;
            /**
             * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: pulumi.Input<string>;
            /**
             * The current 'revision' of the certificate as issued. 
             *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
             *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
             *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
             */
            revision?: pulumi.Input<number>;
        }

        /**
         * CertificateCondition contains condition information for an Certificate.
         */
        export interface CertificateStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpecArgs {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeArgs>;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecCaArgs>;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecSelfSignedArgs>;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultArgs>;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiArgs>;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcmeArgs {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: pulumi.Input<boolean>;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: pulumi.Input<string>;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: pulumi.Input<boolean>;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBindingArgs>;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: pulumi.Input<string>;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmePrivateKeySecretRefArgs>;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: pulumi.Input<string>;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: pulumi.Input<boolean>;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversArgs>[]>;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingArgs {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: pulumi.Input<string>;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: pulumi.Input<string>;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs>;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivateKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolversArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) 
             *  Support: Implementation-specific (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressArgs {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCaArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfSignedArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface ClusterIssuerSpecVaultArgs {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthArgs>;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultCaBundleSecretRefArgs>;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: pulumi.Input<string>;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: pulumi.Input<string>;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthArgs {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRoleArgs>;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesArgs>;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthTokenSecretRefArgs>;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleArgs {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: pulumi.Input<string>;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: pulumi.Input<string>;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs>;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesArgs {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: pulumi.Input<string>;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: pulumi.Input<string>;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs>;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface ClusterIssuerSpecVaultCaBundleSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafiArgs {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiCloudArgs>;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiTppArgs>;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: pulumi.Input<string>;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloudArgs {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs>;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: pulumi.Input<string>;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTppArgs {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiTppCredentialsRefArgs>;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: pulumi.Input<string>;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsRefArgs {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatusArgs {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerStatusAcmeArgs>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerStatusConditionsArgs>[]>;
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface ClusterIssuerStatusAcmeArgs {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: pulumi.Input<string>;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpecArgs {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeArgs>;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: pulumi.Input<inputs.certmanager.v1.IssuerSpecCaArgs>;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: pulumi.Input<inputs.certmanager.v1.IssuerSpecSelfSignedArgs>;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultArgs>;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiArgs>;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcmeArgs {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: pulumi.Input<boolean>;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: pulumi.Input<string>;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: pulumi.Input<boolean>;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeExternalAccountBindingArgs>;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: pulumi.Input<string>;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmePrivateKeySecretRefArgs>;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: pulumi.Input<string>;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: pulumi.Input<boolean>;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversArgs>[]>;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalAccountBindingArgs {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: pulumi.Input<string>;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: pulumi.Input<string>;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs>;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivateKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolversArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNSArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNSArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) 
             *  Support: Implementation-specific (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressArgs {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCaArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfSignedArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface IssuerSpecVaultArgs {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthArgs>;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultCaBundleSecretRefArgs>;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: pulumi.Input<string>;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: pulumi.Input<string>;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuthArgs {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthAppRoleArgs>;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthKubernetesArgs>;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthTokenSecretRefArgs>;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthAppRoleArgs {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: pulumi.Input<string>;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: pulumi.Input<string>;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthAppRoleSecretRefArgs>;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthAppRoleSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetesArgs {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: pulumi.Input<string>;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: pulumi.Input<string>;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthKubernetesSecretRefArgs>;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface IssuerSpecVaultCaBundleSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafiArgs {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiCloudArgs>;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiTppArgs>;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: pulumi.Input<string>;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloudArgs {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiCloudApiTokenSecretRefArgs>;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: pulumi.Input<string>;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTppArgs {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiTppCredentialsRefArgs>;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: pulumi.Input<string>;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface IssuerSpecVenafiTppCredentialsRefArgs {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatusArgs {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.IssuerStatusAcmeArgs>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerStatusConditionsArgs>[]>;
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface IssuerStatusAcmeArgs {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: pulumi.Input<string>;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace metallb {
    export namespace v1alpha1 {
        /**
         * AddressPoolSpec defines the desired state of AddressPool.
         */
        export interface AddressPoolSpecArgs {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: pulumi.Input<boolean>;
            /**
             * When an IP is allocated from this pool, how should it be translated into BGP announcements?
             */
            bgpAdvertisements?: pulumi.Input<pulumi.Input<inputs.metallb.v1alpha1.AddressPoolSpecBgpAdvertisementsArgs>[]>;
            /**
             * Protocol can be used to select how the announcement is done.
             */
            protocol: pulumi.Input<string>;
        }

        export interface AddressPoolSpecBgpAdvertisementsArgs {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.
             */
            aggregationLength?: pulumi.Input<number>;
            /**
             * Optional, defaults to 128 (i.e. no aggregation) if not specified.
             */
            aggregationLengthV6?: pulumi.Input<number>;
            /**
             * BGP communities
             */
            communities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: pulumi.Input<number>;
        }

    }

    export namespace v1beta1 {
        /**
         * AddressPoolSpec defines the desired state of AddressPool.
         */
        export interface AddressPoolSpecArgs {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: pulumi.Input<boolean>;
            /**
             * Drives how an IP allocated from this pool should translated into BGP announcements.
             */
            bgpAdvertisements?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.AddressPoolSpecBgpAdvertisementsArgs>[]>;
            /**
             * Protocol can be used to select how the announcement is done.
             */
            protocol: pulumi.Input<string>;
        }

        export interface AddressPoolSpecBgpAdvertisementsArgs {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.
             */
            aggregationLength?: pulumi.Input<number>;
            /**
             * Optional, defaults to 128 (i.e. no aggregation) if not specified.
             */
            aggregationLengthV6?: pulumi.Input<number>;
            /**
             * BGP communities to be associated with the given advertisement.
             */
            communities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: pulumi.Input<number>;
        }

        /**
         * BFDProfileSpec defines the desired state of BFDProfile.
         */
        export interface BFDProfileSpecArgs {
            /**
             * Configures the detection multiplier to determine packet loss. The remote transmission interval will be multiplied by this value to determine the connection loss detection timer.
             */
            detectMultiplier?: pulumi.Input<number>;
            /**
             * Configures the minimal echo receive transmission interval that this system is capable of handling in milliseconds. Defaults to 50ms
             */
            echoInterval?: pulumi.Input<number>;
            /**
             * Enables or disables the echo transmission mode. This mode is disabled by default, and not supported on multi hops setups.
             */
            echoMode?: pulumi.Input<boolean>;
            /**
             * For multi hop sessions only: configure the minimum expected TTL for an incoming BFD control packet.
             */
            minimumTtl?: pulumi.Input<number>;
            /**
             * Mark session as passive: a passive session will not attempt to start the connection and will wait for control packets from peer before it begins replying.
             */
            passiveMode?: pulumi.Input<boolean>;
            /**
             * The minimum interval that this system is capable of receiving control packets in milliseconds. Defaults to 300ms.
             */
            receiveInterval?: pulumi.Input<number>;
            /**
             * The minimum transmission interval (less jitter) that this system wants to use to send BFD control packets in milliseconds. Defaults to 300ms
             */
            transmitInterval?: pulumi.Input<number>;
        }

        /**
         * BGPAdvertisementSpec defines the desired state of BGPAdvertisement.
         */
        export interface BGPAdvertisementSpecArgs {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix. Defaults to 32. Works for IPv4 addresses.
             */
            aggregationLength?: pulumi.Input<number>;
            /**
             * The aggregation-length advertisement option lets you “roll up” the /128s into a larger prefix. Defaults to 128. Works for IPv6 addresses.
             */
            aggregationLengthV6?: pulumi.Input<number>;
            /**
             * The BGP communities to be associated with the announcement. Each item can be a community of the form 1234:1234 or the name of an alias defined in the Community CRD.
             */
            communities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecIpAddressPoolSelectorsArgs>[]>;
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: pulumi.Input<number>;
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecNodeSelectorsArgs>[]>;
            /**
             * Peers limits the bgppeer to advertise the ips of the selected pools to. When empty, the loadbalancer IP is announced to all the BGPPeers configured.
             */
            peers?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPAdvertisementSpecIpAddressPoolSelectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecIpAddressPoolSelectorsMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPAdvertisementSpecIpAddressPoolSelectorsMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPAdvertisementSpecNodeSelectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecNodeSelectorsMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPAdvertisementSpecNodeSelectorsMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpecArgs {
            bfdProfile?: pulumi.Input<string>;
            /**
             * EBGP peer is multi-hops away
             */
            ebgpMultiHop?: pulumi.Input<boolean>;
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime?: pulumi.Input<string>;
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime?: pulumi.Input<string>;
            /**
             * AS number to use for the local end of the session.
             */
            myASN: pulumi.Input<number>;
            /**
             * Only connect to this peer on nodes that match one of these selectors.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPPeerSpecNodeSelectorsArgs>[]>;
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password?: pulumi.Input<string>;
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: pulumi.Input<number>;
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: pulumi.Input<string>;
            /**
             * Port to dial when establishing the session.
             */
            peerPort?: pulumi.Input<number>;
            /**
             * BGP router ID to advertise to the peer
             */
            routerID?: pulumi.Input<string>;
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress?: pulumi.Input<string>;
        }

        export interface BGPPeerSpecNodeSelectorsArgs {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPPeerSpecNodeSelectorsMatchExpressionsArgs>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface BGPPeerSpecNodeSelectorsMatchExpressionsArgs {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CommunitySpec defines the desired state of Community.
         */
        export interface CommunitySpecArgs {
            communities?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.CommunitySpecCommunitiesArgs>[]>;
        }

        export interface CommunitySpecCommunitiesArgs {
            /**
             * The name of the alias for the community.
             */
            name?: pulumi.Input<string>;
            /**
             * The BGP community value corresponding to the given name.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * IPAddressPoolSpec defines the desired state of IPAddressPool.
         */
        export interface IPAddressPoolSpecArgs {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: pulumi.Input<boolean>;
            /**
             * AvoidBuggyIPs prevents addresses ending with .0 and .255 to be used by a pool.
             */
            avoidBuggyIPs?: pulumi.Input<boolean>;
        }

        /**
         * L2AdvertisementSpec defines the desired state of L2Advertisement.
         */
        export interface L2AdvertisementSpecArgs {
            /**
             * A list of interfaces to announce from. The LB IP will be announced only from these interfaces. If the field is not set, we advertise from all the interfaces on the host.
             */
            interfaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecIpAddressPoolSelectorsArgs>[]>;
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecNodeSelectorsArgs>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface L2AdvertisementSpecIpAddressPoolSelectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecIpAddressPoolSelectorsMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface L2AdvertisementSpecIpAddressPoolSelectorsMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface L2AdvertisementSpecNodeSelectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecNodeSelectorsMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface L2AdvertisementSpecNodeSelectorsMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

    }

    export namespace v1beta2 {
        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpecArgs {
            /**
             * The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.
             */
            bfdProfile?: pulumi.Input<string>;
            /**
             * To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
             */
            ebgpMultiHop?: pulumi.Input<boolean>;
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime?: pulumi.Input<string>;
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime?: pulumi.Input<string>;
            /**
             * AS number to use for the local end of the session.
             */
            myASN: pulumi.Input<number>;
            /**
             * Only connect to this peer on nodes that match one of these selectors.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta2.BGPPeerSpecNodeSelectorsArgs>[]>;
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password?: pulumi.Input<string>;
            /**
             * passwordSecret is name of the authentication secret for BGP Peer. the secret must be of type "kubernetes.io/basic-auth", and created in the same namespace as the MetalLB deployment. The password is stored in the secret as the key "password".
             */
            passwordSecret?: pulumi.Input<inputs.metallb.v1beta2.BGPPeerSpecPasswordSecretArgs>;
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: pulumi.Input<number>;
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: pulumi.Input<string>;
            /**
             * Port to dial when establishing the session.
             */
            peerPort?: pulumi.Input<number>;
            /**
             * BGP router ID to advertise to the peer
             */
            routerID?: pulumi.Input<string>;
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress?: pulumi.Input<string>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPPeerSpecNodeSelectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta2.BGPPeerSpecNodeSelectorsMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPPeerSpecNodeSelectorsMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * passwordSecret is name of the authentication secret for BGP Peer. the secret must be of type "kubernetes.io/basic-auth", and created in the same namespace as the MetalLB deployment. The password is stored in the secret as the key "password".
         */
        export interface BGPPeerSpecPasswordSecretArgs {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name?: pulumi.Input<string>;
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace?: pulumi.Input<string>;
        }

    }
}

export namespace traefik {
    export namespace v1alpha1 {
        /**
         * IngressRouteSpec defines the desired state of IngressRoute.
         */
        export interface IngressRouteSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/entrypoints/ Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesArgs>[]>;
            /**
             * TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsArgs>;
        }

        /**
         * Route holds the HTTP route configuration.
         */
        export interface IngressRouteSpecRoutesArgs {
            /**
             * Kind defines the kind of the route. Rule is the only supported kind.
             */
            kind: pulumi.Input<string>;
            /**
             * Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#rule
             */
            match: pulumi.Input<string>;
            /**
             * Middlewares defines the list of references to Middleware resources. More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-middleware
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewaresArgs>[]>;
            /**
             * Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#priority
             */
            priority?: pulumi.Input<number>;
            /**
             * Services defines the list of Service. It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesArgs>[]>;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface IngressRouteSpecRoutesMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface IngressRouteSpecRoutesServicesArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesPortArgs>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        export interface IngressRouteSpecRoutesServicesPortArgs {
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface IngressRouteSpecRoutesServicesResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
         */
        export interface IngressRouteSpecRoutesServicesStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls
         */
        export interface IngressRouteSpecTlsArgs {
            /**
             * CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.9/https/acme/#certificate-resolvers
             */
            certResolver?: pulumi.Input<string>;
            /**
             * Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#domains
             */
            domains?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsDomainsArgs>[]>;
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.9/https/tls/#tls-options
             */
            options?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsOptionsArgs>;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: pulumi.Input<string>;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
             */
            store?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsStoreArgs>;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomainsArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.9/https/tls/#tls-options
         */
        export interface IngressRouteSpecTlsOptionsArgs {
            /**
             * Name defines the name of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteSpecTlsStoreArgs {
            /**
             * Name defines the name of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
         */
        export interface IngressRouteTCPSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/entrypoints/ Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesArgs>[]>;
            /**
             * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls_1
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsArgs>;
        }

        /**
         * RouteTCP holds the TCP route configuration.
         */
        export interface IngressRouteTCPSpecRoutesArgs {
            /**
             * Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#rule_1
             */
            match: pulumi.Input<string>;
            /**
             * Middlewares defines the list of references to MiddlewareTCP resources.
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesMiddlewaresArgs>[]>;
            /**
             * Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#priority_1
             */
            priority?: pulumi.Input<number>;
            /**
             * Services defines the list of TCP services.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesArgs>[]>;
        }

        /**
         * ObjectReference is a generic reference to a Traefik resource.
         */
        export interface IngressRouteTCPSpecRoutesMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ServiceTCP defines an upstream TCP service to proxy traffic to.
         */
        export interface IngressRouteTCPSpecRoutesServicesArgs {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesPortArgs>;
            /**
             * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#proxy-protocol
             */
            proxyProtocol?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesProxyProtocolArgs>;
            /**
             * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates it has closed the writing capability of its connection, to close the reading capability as well, hence fully terminating the connection. It is a duration in milliseconds, defaulting to 100. A negative value means an infinite deadline (i.e. the reading capability is never closed).
             */
            terminationDelay?: pulumi.Input<number>;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: pulumi.Input<number>;
        }

        export interface IngressRouteTCPSpecRoutesServicesPortArgs {
        }

        /**
         * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#proxy-protocol
         */
        export interface IngressRouteTCPSpecRoutesServicesProxyProtocolArgs {
            /**
             * Version defines the PROXY Protocol version to use.
             */
            version?: pulumi.Input<number>;
        }

        /**
         * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls_1
         */
        export interface IngressRouteTCPSpecTlsArgs {
            /**
             * CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.9/https/acme/#certificate-resolvers
             */
            certResolver?: pulumi.Input<string>;
            /**
             * Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#domains
             */
            domains?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsDomainsArgs>[]>;
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.9/https/tls/#tls-options
             */
            options?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsOptionsArgs>;
            /**
             * Passthrough defines whether a TLS router will terminate the TLS connection.
             */
            passthrough?: pulumi.Input<boolean>;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: pulumi.Input<string>;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
             */
            store?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsStoreArgs>;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteTCPSpecTlsDomainsArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.9/https/tls/#tls-options
         */
        export interface IngressRouteTCPSpecTlsOptionsArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteTCPSpecTlsStoreArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
         */
        export interface IngressRouteUDPSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/entrypoints/ Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesArgs>[]>;
        }

        /**
         * RouteUDP holds the UDP route configuration.
         */
        export interface IngressRouteUDPSpecRoutesArgs {
            /**
             * Services defines the list of UDP services.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServicesArgs>[]>;
        }

        /**
         * ServiceUDP defines an upstream UDP service to proxy traffic to.
         */
        export interface IngressRouteUDPSpecRoutesServicesArgs {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServicesPortArgs>;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: pulumi.Input<number>;
        }

        export interface IngressRouteUDPSpecRoutesServicesPortArgs {
        }

        /**
         * MiddlewareSpec defines the desired state of a Middleware.
         */
        export interface MiddlewareSpecArgs {
            /**
             * AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/addprefix/
             */
            addPrefix?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecAddPrefixArgs>;
            /**
             * BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/basicauth/
             */
            basicAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecBasicAuthArgs>;
            /**
             * Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/buffering/#maxrequestbodybytes
             */
            buffering?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecBufferingArgs>;
            /**
             * Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/chain/
             */
            chain?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecChainArgs>;
            /**
             * CircuitBreaker holds the circuit breaker configuration.
             */
            circuitBreaker?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCircuitBreakerArgs>;
            /**
             * Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/compress/
             */
            compress?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCompressArgs>;
            /**
             * ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
             */
            contentType?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecContentTypeArgs>;
            /**
             * DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/digestauth/
             */
            digestAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecDigestAuthArgs>;
            /**
             * ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/errorpages/
             */
            errors?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsArgs>;
            /**
             * ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/forwardauth/
             */
            forwardAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecForwardAuthArgs>;
            /**
             * Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/headers/#customrequestheaders
             */
            headers?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecHeadersArgs>;
            /**
             * InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/inflightreq/
             */
            inFlightReq?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqArgs>;
            /**
             * IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/
             */
            ipWhiteList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListArgs>;
            /**
             * PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/passtlsclientcert/
             */
            passTLSClientCert?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertArgs>;
            /**
             * Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/
             */
            plugin?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
            /**
             * RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ratelimit/
             */
            rateLimit?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitArgs>;
            /**
             * RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/redirectregex/#regex
             */
            redirectRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRedirectRegexArgs>;
            /**
             * RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/redirectscheme/
             */
            redirectScheme?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRedirectSchemeArgs>;
            /**
             * ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/replacepath/
             */
            replacePath?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecReplacePathArgs>;
            /**
             * ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/replacepathregex/
             */
            replacePathRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecReplacePathRegexArgs>;
            /**
             * Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/retry/
             */
            retry?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRetryArgs>;
            /**
             * StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/stripprefix/
             */
            stripPrefix?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecStripPrefixArgs>;
            /**
             * StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/stripprefixregex/
             */
            stripPrefixRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecStripPrefixRegexArgs>;
        }

        /**
         * AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/addprefix/
         */
        export interface MiddlewareSpecAddPrefixArgs {
            /**
             * Prefix is the string to add before the current path in the requested URL. It should include a leading slash (/).
             */
            prefix?: pulumi.Input<string>;
        }

        /**
         * BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/basicauth/
         */
        export interface MiddlewareSpecBasicAuthArgs {
            /**
             * HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/basicauth/#headerfield
             */
            headerField?: pulumi.Input<string>;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
             */
            realm?: pulumi.Input<string>;
            /**
             * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service. Default: false.
             */
            removeHeader?: pulumi.Input<boolean>;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: pulumi.Input<string>;
        }

        /**
         * Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/buffering/#maxrequestbodybytes
         */
        export interface MiddlewareSpecBufferingArgs {
            /**
             * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).
             */
            maxRequestBodyBytes?: pulumi.Input<number>;
            /**
             * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).
             */
            maxResponseBodyBytes?: pulumi.Input<number>;
            /**
             * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
             */
            memRequestBodyBytes?: pulumi.Input<number>;
            /**
             * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
             */
            memResponseBodyBytes?: pulumi.Input<number>;
            /**
             * RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/buffering/#retryexpression
             */
            retryExpression?: pulumi.Input<string>;
        }

        /**
         * Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/chain/
         */
        export interface MiddlewareSpecChainArgs {
            /**
             * Middlewares is the list of MiddlewareRef which composes the chain.
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewaresArgs>[]>;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface MiddlewareSpecChainMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitBreakerArgs {
            /**
             * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
             */
            checkPeriod?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCircuitBreakerCheckPeriodArgs>;
            /**
             * Expression is the condition that triggers the tripped state.
             */
            expression?: pulumi.Input<string>;
            /**
             * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
             */
            fallbackDuration?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCircuitBreakerFallbackDurationArgs>;
            /**
             * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
             */
            recoveryDuration?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCircuitBreakerRecoveryDurationArgs>;
        }

        export interface MiddlewareSpecCircuitBreakerCheckPeriodArgs {
        }

        export interface MiddlewareSpecCircuitBreakerFallbackDurationArgs {
        }

        export interface MiddlewareSpecCircuitBreakerRecoveryDurationArgs {
        }

        /**
         * Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/compress/
         */
        export interface MiddlewareSpecCompressArgs {
            /**
             * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
             */
            excludedContentTypes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed. Default: 1024.
             */
            minResponseBodyBytes?: pulumi.Input<number>;
        }

        /**
         * ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContentTypeArgs {
            /**
             * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it.
             */
            autoDetect?: pulumi.Input<boolean>;
        }

        /**
         * DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/digestauth/
         */
        export interface MiddlewareSpecDigestAuthArgs {
            /**
             * HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/basicauth/#headerfield
             */
            headerField?: pulumi.Input<string>;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
             */
            realm?: pulumi.Input<string>;
            /**
             * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
             */
            removeHeader?: pulumi.Input<boolean>;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: pulumi.Input<string>;
        }

        /**
         * ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/errorpages/
         */
        export interface MiddlewareSpecErrorsArgs {
            /**
             * Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.
             */
            query?: pulumi.Input<string>;
            /**
             * Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/errorpages/#service
             */
            service?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceArgs>;
            /**
             * Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).
             */
            status?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/errorpages/#service
         */
        export interface MiddlewareSpecErrorsServiceArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServicePortArgs>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        export interface MiddlewareSpecErrorsServicePortArgs {
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface MiddlewareSpecErrorsServiceResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
         */
        export interface MiddlewareSpecErrorsServiceStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/forwardauth/
         */
        export interface MiddlewareSpecForwardAuthArgs {
            /**
             * Address defines the authentication server address.
             */
            address?: pulumi.Input<string>;
            /**
             * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.
             */
            authRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
             */
            authResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/forwardauth/#authresponseheadersregex
             */
            authResponseHeadersRegex?: pulumi.Input<string>;
            /**
             * TLS defines the configuration used to secure the connection to the authentication server.
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecForwardAuthTlsArgs>;
            /**
             * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
             */
            trustForwardHeader?: pulumi.Input<boolean>;
        }

        /**
         * TLS defines the configuration used to secure the connection to the authentication server.
         */
        export interface MiddlewareSpecForwardAuthTlsArgs {
            caOptional?: pulumi.Input<boolean>;
            /**
             * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.
             */
            caSecret?: pulumi.Input<string>;
            /**
             * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.
             */
            certSecret?: pulumi.Input<string>;
            /**
             * InsecureSkipVerify defines whether the server certificates should be validated.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
        }

        /**
         * Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/headers/#customrequestheaders
         */
        export interface MiddlewareSpecHeadersArgs {
            /**
             * AccessControlAllowCredentials defines whether the request can include user credentials.
             */
            accessControlAllowCredentials?: pulumi.Input<boolean>;
            /**
             * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
             */
            accessControlAllowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
             */
            accessControlAllowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
             */
            accessControlExposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlMaxAge defines the time that a preflight request may be cached.
             */
            accessControlMaxAge?: pulumi.Input<number>;
            /**
             * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader?: pulumi.Input<boolean>;
            /**
             * AllowedHosts defines the fully qualified list of allowed domain names.
             */
            allowedHosts?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
             */
            browserXssFilter?: pulumi.Input<boolean>;
            /**
             * ContentSecurityPolicy defines the Content-Security-Policy header value.
             */
            contentSecurityPolicy?: pulumi.Input<string>;
            /**
             * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
             */
            contentTypeNosniff?: pulumi.Input<boolean>;
            /**
             * CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.
             */
            customBrowserXSSValue?: pulumi.Input<string>;
            /**
             * CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.
             */
            customFrameOptionsValue?: pulumi.Input<string>;
            /**
             * CustomRequestHeaders defines the header names and values to apply to the request.
             */
            customRequestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CustomResponseHeaders defines the header names and values to apply to the response.
             */
            customResponseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Deprecated: use PermissionsPolicy instead.
             */
            featurePolicy?: pulumi.Input<string>;
            /**
             * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
             */
            forceSTSHeader?: pulumi.Input<boolean>;
            /**
             * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
             */
            frameDeny?: pulumi.Input<boolean>;
            /**
             * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
             */
            hostsProxyHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.
             */
            isDevelopment?: pulumi.Input<boolean>;
            /**
             * PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.
             */
            permissionsPolicy?: pulumi.Input<string>;
            /**
             * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
             */
            publicKey?: pulumi.Input<string>;
            /**
             * ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.
             */
            referrerPolicy?: pulumi.Input<string>;
            /**
             * Deprecated: use RedirectRegex instead.
             */
            sslForceHost?: pulumi.Input<boolean>;
            /**
             * Deprecated: use RedirectRegex instead.
             */
            sslHost?: pulumi.Input<string>;
            /**
             * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
             */
            sslProxyHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Deprecated: use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect?: pulumi.Input<boolean>;
            /**
             * Deprecated: use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect?: pulumi.Input<boolean>;
            /**
             * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
             */
            stsIncludeSubdomains?: pulumi.Input<boolean>;
            /**
             * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
             */
            stsPreload?: pulumi.Input<boolean>;
            /**
             * STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.
             */
            stsSeconds?: pulumi.Input<number>;
        }

        /**
         * InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/inflightreq/
         */
        export interface MiddlewareSpecInFlightReqArgs {
            /**
             * Amount defines the maximum amount of allowed simultaneous in-flight request. The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
             */
            amount?: pulumi.Input<number>;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/inflightreq/#sourcecriterion
             */
            sourceCriterion?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionArgs>;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/inflightreq/#sourcecriterion
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionIpStrategyArgs>;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: pulumi.Input<string>;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: pulumi.Input<boolean>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/#ipstrategy
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/
         */
        export interface MiddlewareSpecIpWhiteListArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListIpStrategyArgs>;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/#ipstrategy
         */
        export interface MiddlewareSpecIpWhiteListIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/passtlsclientcert/
         */
        export interface MiddlewareSpecPassTLSClientCertArgs {
            /**
             * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            info?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoArgs>;
            /**
             * PEM sets the X-Forwarded-Tls-Client-Cert header with the escaped certificate.
             */
            pem?: pulumi.Input<boolean>;
        }

        /**
         * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoArgs {
            /**
             * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            issuer?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoIssuerArgs>;
            /**
             * NotAfter defines whether to add the Not After information from the Validity part.
             */
            notAfter?: pulumi.Input<boolean>;
            /**
             * NotBefore defines whether to add the Not Before information from the Validity part.
             */
            notBefore?: pulumi.Input<boolean>;
            /**
             * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
             */
            sans?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the client serialNumber information.
             */
            serialNumber?: pulumi.Input<boolean>;
            /**
             * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            subject?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoSubjectArgs>;
        }

        /**
         * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoIssuerArgs {
            /**
             * CommonName defines whether to add the organizationalUnit information into the issuer.
             */
            commonName?: pulumi.Input<boolean>;
            /**
             * Country defines whether to add the country information into the issuer.
             */
            country?: pulumi.Input<boolean>;
            /**
             * DomainComponent defines whether to add the domainComponent information into the issuer.
             */
            domainComponent?: pulumi.Input<boolean>;
            /**
             * Locality defines whether to add the locality information into the issuer.
             */
            locality?: pulumi.Input<boolean>;
            /**
             * Organization defines whether to add the organization information into the issuer.
             */
            organization?: pulumi.Input<boolean>;
            /**
             * Province defines whether to add the province information into the issuer.
             */
            province?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the serialNumber information into the issuer.
             */
            serialNumber?: pulumi.Input<boolean>;
        }

        /**
         * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoSubjectArgs {
            /**
             * CommonName defines whether to add the organizationalUnit information into the subject.
             */
            commonName?: pulumi.Input<boolean>;
            /**
             * Country defines whether to add the country information into the subject.
             */
            country?: pulumi.Input<boolean>;
            /**
             * DomainComponent defines whether to add the domainComponent information into the subject.
             */
            domainComponent?: pulumi.Input<boolean>;
            /**
             * Locality defines whether to add the locality information into the subject.
             */
            locality?: pulumi.Input<boolean>;
            /**
             * Organization defines whether to add the organization information into the subject.
             */
            organization?: pulumi.Input<boolean>;
            /**
             * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
             */
            organizationalUnit?: pulumi.Input<boolean>;
            /**
             * Province defines whether to add the province information into the subject.
             */
            province?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the serialNumber information into the subject.
             */
            serialNumber?: pulumi.Input<boolean>;
        }

        /**
         * RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ratelimit/
         */
        export interface MiddlewareSpecRateLimitArgs {
            /**
             * Average is the maximum rate, by default in requests/s, allowed for the given source. It defaults to 0, which means no rate limiting. The rate is actually defined by dividing Average by Period. So for a rate below 1req/s, one needs to define a Period larger than a second.
             */
            average?: pulumi.Input<number>;
            /**
             * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time. It defaults to 1.
             */
            burst?: pulumi.Input<number>;
            /**
             * Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.
             */
            period?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitPeriodArgs>;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
             */
            sourceCriterion?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionArgs>;
        }

        export interface MiddlewareSpecRateLimitPeriodArgs {
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
         */
        export interface MiddlewareSpecRateLimitSourceCriterionArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionIpStrategyArgs>;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: pulumi.Input<string>;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: pulumi.Input<boolean>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ipwhitelist/#ipstrategy
         */
        export interface MiddlewareSpecRateLimitSourceCriterionIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/redirectregex/#regex
         */
        export interface MiddlewareSpecRedirectRegexArgs {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: pulumi.Input<boolean>;
            /**
             * Regex defines the regex used to match and capture elements from the request URL.
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement defines how to modify the URL to have the new target URL.
             */
            replacement?: pulumi.Input<string>;
        }

        /**
         * RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/redirectscheme/
         */
        export interface MiddlewareSpecRedirectSchemeArgs {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: pulumi.Input<boolean>;
            /**
             * Port defines the port of the new URL.
             */
            port?: pulumi.Input<string>;
            /**
             * Scheme defines the scheme of the new URL.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/replacepath/
         */
        export interface MiddlewareSpecReplacePathArgs {
            /**
             * Path defines the path to use as replacement in the request URL.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/replacepathregex/
         */
        export interface MiddlewareSpecReplacePathRegexArgs {
            /**
             * Regex defines the regular expression used to match and capture the path from the request URL.
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement defines the replacement path format, which can include captured variables.
             */
            replacement?: pulumi.Input<string>;
        }

        /**
         * Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/retry/
         */
        export interface MiddlewareSpecRetryArgs {
            /**
             * Attempts defines how many times the request should be retried.
             */
            attempts?: pulumi.Input<number>;
            /**
             * InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.
             */
            initialInterval?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRetryInitialIntervalArgs>;
        }

        export interface MiddlewareSpecRetryInitialIntervalArgs {
        }

        /**
         * StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/stripprefix/
         */
        export interface MiddlewareSpecStripPrefixArgs {
            /**
             * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary. Default: true.
             */
            forceSlash?: pulumi.Input<boolean>;
            /**
             * Prefixes defines the prefixes to strip from the request URL.
             */
            prefixes?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/stripprefixregex/
         */
        export interface MiddlewareSpecStripPrefixRegexArgs {
            /**
             * Regex defines the regular expression to match the path prefix from the request URL.
             */
            regex?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
         */
        export interface MiddlewareTCPSpecArgs {
            /**
             * InFlightConn defines the InFlightConn middleware configuration.
             */
            inFlightConn?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareTCPSpecInFlightConnArgs>;
            /**
             * IPWhiteList defines the IPWhiteList middleware configuration.
             */
            ipWhiteList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareTCPSpecIpWhiteListArgs>;
        }

        /**
         * InFlightConn defines the InFlightConn middleware configuration.
         */
        export interface MiddlewareTCPSpecInFlightConnArgs {
            /**
             * Amount defines the maximum amount of allowed simultaneous connections. The middleware closes the connection if there are already amount connections opened.
             */
            amount?: pulumi.Input<number>;
        }

        /**
         * IPWhiteList defines the IPWhiteList middleware configuration.
         */
        export interface MiddlewareTCPSpecIpWhiteListArgs {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServersTransportSpec defines the desired state of a ServersTransport.
         */
        export interface ServersTransportSpecArgs {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * DisableHTTP2 disables HTTP/2 for connections with backend servers.
             */
            disableHTTP2?: pulumi.Input<boolean>;
            /**
             * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
             */
            forwardingTimeouts?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsArgs>;
            /**
             * InsecureSkipVerify disables SSL certificate verification.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             */
            maxIdleConnsPerHost?: pulumi.Input<number>;
            /**
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: pulumi.Input<string>;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
             */
            rootCAsSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
         */
        export interface ServersTransportSpecForwardingTimeoutsArgs {
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsDialTimeoutArgs>;
            /**
             * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
             */
            idleConnTimeout?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsIdleConnTimeoutArgs>;
            /**
             * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
             */
            pingTimeout?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsPingTimeoutArgs>;
            /**
             * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
             */
            readIdleTimeout?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsReadIdleTimeoutArgs>;
            /**
             * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
             */
            responseHeaderTimeout?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsResponseHeaderTimeoutArgs>;
        }

        export interface ServersTransportSpecForwardingTimeoutsDialTimeoutArgs {
        }

        export interface ServersTransportSpecForwardingTimeoutsIdleConnTimeoutArgs {
        }

        export interface ServersTransportSpecForwardingTimeoutsPingTimeoutArgs {
        }

        export interface ServersTransportSpecForwardingTimeoutsReadIdleTimeoutArgs {
        }

        export interface ServersTransportSpecForwardingTimeoutsResponseHeaderTimeoutArgs {
        }

        /**
         * TLSOptionSpec defines the desired state of a TLSOption.
         */
        export interface TLSOptionSpecArgs {
            /**
             * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.9/https/tls/#alpn-protocols
             */
            alpnProtocols?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.9/https/tls/#cipher-suites
             */
            cipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ClientAuth defines the server's policy for TLS Client Authentication.
             */
            clientAuth?: pulumi.Input<inputs.traefik.v1alpha1.TLSOptionSpecClientAuthArgs>;
            /**
             * CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.9/https/tls/#curve-preferences
             */
            curvePreferences?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.
             */
            maxVersion?: pulumi.Input<string>;
            /**
             * MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.
             */
            minVersion?: pulumi.Input<string>;
            /**
             * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430
             */
            preferServerCipherSuites?: pulumi.Input<boolean>;
            /**
             * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
             */
            sniStrict?: pulumi.Input<boolean>;
        }

        /**
         * ClientAuth defines the server's policy for TLS Client Authentication.
         */
        export interface TLSOptionSpecClientAuthArgs {
            /**
             * ClientAuthType defines the client authentication type to apply.
             */
            clientAuthType?: pulumi.Input<string>;
            /**
             * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
             */
            secretNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TLSStoreSpec defines the desired state of a TLSStore.
         */
        export interface TLSStoreSpecArgs {
            /**
             * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
             */
            certificates?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecCertificatesArgs>[]>;
            /**
             * DefaultCertificate defines the default certificate configuration.
             */
            defaultCertificate?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultCertificateArgs>;
            /**
             * DefaultGeneratedCert defines the default generated certificate configuration.
             */
            defaultGeneratedCert?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertArgs>;
        }

        /**
         * Certificate holds a secret name for the TLSStore resource.
         */
        export interface TLSStoreSpecCertificatesArgs {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * DefaultCertificate defines the default certificate configuration.
         */
        export interface TLSStoreSpecDefaultCertificateArgs {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * DefaultGeneratedCert defines the default generated certificate configuration.
         */
        export interface TLSStoreSpecDefaultGeneratedCertArgs {
            /**
             * Domain is the domain definition for the DefaultCertificate.
             */
            domain?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertDomainArgs>;
            /**
             * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
             */
            resolver?: pulumi.Input<string>;
        }

        /**
         * Domain is the domain definition for the DefaultCertificate.
         */
        export interface TLSStoreSpecDefaultGeneratedCertDomainArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TraefikServiceSpec defines the desired state of a TraefikService.
         */
        export interface TraefikServiceSpecArgs {
            /**
             * Mirroring defines the Mirroring service configuration.
             */
            mirroring?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringArgs>;
            /**
             * Weighted defines the Weighted Round Robin configuration.
             */
            weighted?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedArgs>;
        }

        /**
         * Mirroring defines the Mirroring service configuration.
         */
        export interface TraefikServiceSpecMirroringArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * MaxBodySize defines the maximum size allowed for the body of the request. If the body is larger, the request is not mirrored. Default value is -1, which means unlimited size.
             */
            maxBodySize?: pulumi.Input<number>;
            /**
             * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
             */
            mirrors?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsArgs>[]>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringPortArgs>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * MirrorService holds the mirror configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Percent defines the part of the traffic to mirror. Supported values: 0 to 100.
             */
            percent?: pulumi.Input<number>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsPortArgs>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        export interface TraefikServiceSpecMirroringMirrorsPortArgs {
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringMirrorsResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        export interface TraefikServiceSpecMirroringPortArgs {
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * Weighted defines the Weighted Round Robin configuration.
         */
        export interface TraefikServiceSpecWeightedArgs {
            /**
             * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesArgs>[]>;
            /**
             * Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyArgs>;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface TraefikServiceSpecWeightedServicesArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesPortArgs>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        export interface TraefikServiceSpecWeightedServicesPortArgs {
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecWeightedServicesResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecWeightedServicesStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedServicesStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
         */
        export interface TraefikServiceSpecWeightedStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }
    }
}
