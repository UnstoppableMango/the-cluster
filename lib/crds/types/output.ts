// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace acme {
    export namespace v1 {
        export interface ChallengeSpec {
            /**
             * The URL to the ACME Authorization resource that this challenge is a part of.
             */
            authorizationURL: string;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: string;
            /**
             * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
             */
            issuerRef: outputs.acme.v1.ChallengeSpecIssuerRef;
            /**
             * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
             */
            key: string;
            /**
             * Contains the domain solving configuration that should be used to solve this challenge resource.
             */
            solver: outputs.acme.v1.ChallengeSpecSolver;
            /**
             * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
             */
            token: string;
            /**
             * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
             */
            type: string;
            /**
             * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
             */
            url: string;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Contains the domain solving configuration that should be used to solve this challenge resource.
         */
        export interface ChallengeSpecSolver {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.acme.v1.ChallengeSpecSolverDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.acme.v1.ChallengeSpecSolverHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.acme.v1.ChallengeSpecSolverSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNS;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.acme.v1.ChallengeSpecSolverDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNS;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNS;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.acme.v1.ChallengeSpecSolverDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.acme.v1.ChallengeSpecSolverDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.acme.v1.ChallengeSpecSolverDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.acme.v1.ChallengeSpecSolverDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmeDNS {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzureDNS {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ChallengeSpecSolverDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.acme.v1.ChallengeSpecSolverHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: number;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * challengeSpecSolverHttp01GatewayHTTPRouteParentRefsProvideDefaults sets the appropriate defaults for ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs
         */
        export function challengeSpecSolverHttp01GatewayHTTPRouteParentRefsProvideDefaults(val: ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs): ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        export interface ChallengeStatus {
            /**
             * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
             */
            presented?: boolean;
            /**
             * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
             */
            processing?: boolean;
            /**
             * Contains human readable information on why the Challenge is in the current state.
             */
            reason?: string;
            /**
             * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
             */
            state?: string;
        }

        export interface OrderSpec {
            /**
             * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
             */
            commonName?: string;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames?: string[];
            /**
             * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
             */
            duration?: string;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses?: string[];
            /**
             * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
             */
            issuerRef: outputs.acme.v1.OrderSpecIssuerRef;
            /**
             * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
             */
            request: string;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
         */
        export interface OrderSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        export interface OrderStatus {
            /**
             * Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
             */
            authorizations?: outputs.acme.v1.OrderStatusAuthorizations[];
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
             */
            certificate?: string;
            /**
             * FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
            /**
             * FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL?: string;
            /**
             * Reason optionally provides more information about a why the order is in the current state.
             */
            reason?: string;
            /**
             * State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
             */
            state?: string;
            /**
             * URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
             */
            url?: string;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
         */
        export interface OrderStatusAuthorizations {
            /**
             * Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
             */
            challenges?: outputs.acme.v1.OrderStatusAuthorizationsChallenges[];
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier?: string;
            /**
             * InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
             */
            initialState?: string;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: string;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
         */
        export interface OrderStatusAuthorizationsChallenges {
            /**
             * Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
             */
            token: string;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
             */
            type: string;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
             */
            url: string;
        }

    }
}

export namespace addons {
    export namespace v1alpha3 {
        /**
         * ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
         */
        export interface ClusterResourceSetBindingSpec {
            /**
             * Bindings is a list of ClusterResourceSets and their resources.
             */
            bindings?: outputs.addons.v1alpha3.ClusterResourceSetBindingSpecBindings[];
        }

        /**
         * ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
         */
        export interface ClusterResourceSetBindingSpecBindings {
            /**
             * ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
             */
            clusterResourceSetName: string;
            /**
             * Resources is a list of resources that the ClusterResourceSet has.
             */
            resources?: outputs.addons.v1alpha3.ClusterResourceSetBindingSpecBindingsResources[];
        }

        /**
         * ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
         */
        export interface ClusterResourceSetBindingSpecBindingsResources {
            /**
             * Applied is to track if a resource is applied to the cluster or not.
             */
            applied: boolean;
            /**
             * Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
             */
            hash?: string;
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: string;
            /**
             * LastAppliedTime identifies when this resource was last applied to the cluster.
             */
            lastAppliedTime?: string;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: string;
        }

        /**
         * ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
         */
        export interface ClusterResourceSetSpec {
            /**
             * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
             */
            clusterSelector: outputs.addons.v1alpha3.ClusterResourceSetSpecClusterSelector;
            /**
             * Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
             */
            resources?: outputs.addons.v1alpha3.ClusterResourceSetSpecResources[];
            /**
             * Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
             */
            strategy?: string;
        }

        /**
         * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
         */
        export interface ClusterResourceSetSpecClusterSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.addons.v1alpha3.ClusterResourceSetSpecClusterSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterResourceSetSpecClusterSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ResourceRef specifies a resource.
         */
        export interface ClusterResourceSetSpecResources {
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: string;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: string;
        }

        /**
         * ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
         */
        export interface ClusterResourceSetStatus {
            /**
             * Conditions defines current state of the ClusterResourceSet.
             */
            conditions?: outputs.addons.v1alpha3.ClusterResourceSetStatusConditions[];
            /**
             * ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
             */
            observedGeneration?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterResourceSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

    }

    export namespace v1alpha4 {
        /**
         * ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
         */
        export interface ClusterResourceSetBindingSpec {
            /**
             * Bindings is a list of ClusterResourceSets and their resources.
             */
            bindings?: outputs.addons.v1alpha4.ClusterResourceSetBindingSpecBindings[];
        }

        /**
         * ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
         */
        export interface ClusterResourceSetBindingSpecBindings {
            /**
             * ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
             */
            clusterResourceSetName: string;
            /**
             * Resources is a list of resources that the ClusterResourceSet has.
             */
            resources?: outputs.addons.v1alpha4.ClusterResourceSetBindingSpecBindingsResources[];
        }

        /**
         * ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
         */
        export interface ClusterResourceSetBindingSpecBindingsResources {
            /**
             * Applied is to track if a resource is applied to the cluster or not.
             */
            applied: boolean;
            /**
             * Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
             */
            hash?: string;
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: string;
            /**
             * LastAppliedTime identifies when this resource was last applied to the cluster.
             */
            lastAppliedTime?: string;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: string;
        }

        /**
         * ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
         */
        export interface ClusterResourceSetSpec {
            /**
             * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
             */
            clusterSelector: outputs.addons.v1alpha4.ClusterResourceSetSpecClusterSelector;
            /**
             * Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
             */
            resources?: outputs.addons.v1alpha4.ClusterResourceSetSpecResources[];
            /**
             * Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
             */
            strategy?: string;
        }

        /**
         * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
         */
        export interface ClusterResourceSetSpecClusterSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.addons.v1alpha4.ClusterResourceSetSpecClusterSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterResourceSetSpecClusterSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ResourceRef specifies a resource.
         */
        export interface ClusterResourceSetSpecResources {
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: string;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: string;
        }

        /**
         * ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
         */
        export interface ClusterResourceSetStatus {
            /**
             * Conditions defines current state of the ClusterResourceSet.
             */
            conditions?: outputs.addons.v1alpha4.ClusterResourceSetStatusConditions[];
            /**
             * ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
             */
            observedGeneration?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterResourceSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

    }

    export namespace v1beta1 {
        /**
         * ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
         */
        export interface ClusterResourceSetBindingSpec {
            /**
             * Bindings is a list of ClusterResourceSets and their resources.
             */
            bindings?: outputs.addons.v1beta1.ClusterResourceSetBindingSpecBindings[];
            /**
             * ClusterName is the name of the Cluster this binding applies to. Note: this field mandatory in v1beta2.
             */
            clusterName?: string;
        }

        /**
         * ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
         */
        export interface ClusterResourceSetBindingSpecBindings {
            /**
             * ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
             */
            clusterResourceSetName: string;
            /**
             * Resources is a list of resources that the ClusterResourceSet has.
             */
            resources?: outputs.addons.v1beta1.ClusterResourceSetBindingSpecBindingsResources[];
        }

        /**
         * ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
         */
        export interface ClusterResourceSetBindingSpecBindingsResources {
            /**
             * Applied is to track if a resource is applied to the cluster or not.
             */
            applied: boolean;
            /**
             * Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
             */
            hash?: string;
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: string;
            /**
             * LastAppliedTime identifies when this resource was last applied to the cluster.
             */
            lastAppliedTime?: string;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: string;
        }

        /**
         * ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
         */
        export interface ClusterResourceSetSpec {
            /**
             * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
             */
            clusterSelector: outputs.addons.v1beta1.ClusterResourceSetSpecClusterSelector;
            /**
             * Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
             */
            resources?: outputs.addons.v1beta1.ClusterResourceSetSpecResources[];
            /**
             * Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
             */
            strategy?: string;
        }

        /**
         * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
         */
        export interface ClusterResourceSetSpecClusterSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.addons.v1beta1.ClusterResourceSetSpecClusterSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterResourceSetSpecClusterSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ResourceRef specifies a resource.
         */
        export interface ClusterResourceSetSpecResources {
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: string;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: string;
        }

        /**
         * ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
         */
        export interface ClusterResourceSetStatus {
            /**
             * Conditions defines current state of the ClusterResourceSet.
             */
            conditions?: outputs.addons.v1beta1.ClusterResourceSetStatusConditions[];
            /**
             * ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
             */
            observedGeneration?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterResourceSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

    }
}

export namespace bootstrap {
    export namespace v1alpha2 {
        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigSpec {
            data?: string;
            generateType: string;
        }

        /**
         * TalosConfigStatus defines the observed state of TalosConfig
         */
        export interface TalosConfigStatus {
            /**
             * BootstrapData will be a slice of bootstrap data
             */
            bootstrapData?: string;
            /**
             * ErrorMessage will be set on non-retryable errors
             */
            errorMessage?: string;
            /**
             * ErrorReason will be set on non-retryable errors
             */
            errorReason?: string;
            /**
             * Ready indicates the BootstrapData field is ready to be consumed
             */
            ready?: boolean;
            /**
             * Talos config will be a string containing the config for download
             */
            talosConfig?: string;
        }

        /**
         * TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
         */
        export interface TalosConfigTemplateSpec {
            /**
             * TalosConfigTemplateResource defines the Template structure
             */
            template: outputs.bootstrap.v1alpha2.TalosConfigTemplateSpecTemplate;
        }

        /**
         * TalosConfigTemplateResource defines the Template structure
         */
        export interface TalosConfigTemplateSpecTemplate {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            spec?: outputs.bootstrap.v1alpha2.TalosConfigTemplateSpecTemplateSpec;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigTemplateSpecTemplateSpec {
            data?: string;
            generateType: string;
        }

    }

    export namespace v1alpha3 {
        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigSpec {
            configPatches?: outputs.bootstrap.v1alpha3.TalosConfigSpecConfigPatches[];
            data?: string;
            generateType: string;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: outputs.bootstrap.v1alpha3.TalosConfigSpecHostname;
            talosVersion?: string;
        }

        export interface TalosConfigSpecConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosConfigSpecHostname {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: string;
        }

        /**
         * TalosConfigStatus defines the observed state of TalosConfig
         */
        export interface TalosConfigStatus {
            /**
             * Conditions defines current service state of the TalosConfig.
             */
            conditions?: outputs.bootstrap.v1alpha3.TalosConfigStatusConditions[];
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script.
             */
            dataSecretName?: string;
            /**
             * FailureMessage will be set on non-retryable errors
             */
            failureMessage?: string;
            /**
             * FailureReason will be set on non-retryable errors
             */
            failureReason?: string;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Ready indicates the BootstrapData field is ready to be consumed
             */
            ready?: boolean;
            /**
             * Talos config will be a string containing the config for download. 
             *  Deprecated: please use `<cluster>-talosconfig` secret.
             */
            talosConfig?: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface TalosConfigStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
         */
        export interface TalosConfigTemplateSpec {
            /**
             * TalosConfigTemplateResource defines the Template structure
             */
            template: outputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplate;
        }

        /**
         * TalosConfigTemplateResource defines the Template structure
         */
        export interface TalosConfigTemplateSpecTemplate {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            spec?: outputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpec;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigTemplateSpecTemplateSpec {
            configPatches?: outputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecConfigPatches[];
            data?: string;
            generateType: string;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: outputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecHostname;
            talosVersion?: string;
        }

        export interface TalosConfigTemplateSpecTemplateSpecConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosConfigTemplateSpecTemplateSpecHostname {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: string;
        }

    }
}

export namespace certmanager {
    export namespace v1 {
        /**
         * Specification of the desired state of the CertificateRequest resource. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestSpec {
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the issuer may choose to ignore the requested duration, just like any other requested attribute.
             */
            duration?: string;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            extra?: {[key: string]: string[]};
            /**
             * Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            groups?: string[];
            /**
             * Requested basic constraints isCA value. Note that the issuer may choose to ignore the requested isCA value, just like any other requested attribute. 
             *  NOTE: If the CSR in the `Request` field has a BasicConstraints extension, it must have the same isCA value as specified here. 
             *  If true, this will automatically add the `cert sign` usage to the list of requested `usages`.
             */
            isCA?: boolean;
            /**
             * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
             *  The `name` field of the reference must always be specified.
             */
            issuerRef: outputs.certmanager.v1.CertificateRequestSpecIssuerRef;
            /**
             * The PEM-encoded X.509 certificate signing request to be submitted to the issuer for signing. 
             *  If the CSR has a BasicConstraints extension, its isCA attribute must match the `isCA` value of this CertificateRequest. If the CSR has a KeyUsage extension, its key usages must match the key usages in the `usages` field of this CertificateRequest. If the CSR has a ExtKeyUsage extension, its extended key usages must match the extended key usages in the `usages` field of this CertificateRequest.
             */
            request: string;
            /**
             * UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            uid?: string;
            /**
             * Requested key usages and extended key usages. 
             *  NOTE: If the CSR in the `Request` field has uses the KeyUsage or ExtKeyUsage extension, these extensions must have the same values as specified here without any additional values. 
             *  If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages?: string[];
            /**
             * Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            username?: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
         *  The `name` field of the reference must always be specified.
         */
        export interface CertificateRequestSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Status of the CertificateRequest. This is set and managed automatically. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestStatus {
            /**
             * The PEM encoded X.509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
             */
            ca?: string;
            /**
             * The PEM encoded X.509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
             */
            certificate?: string;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
             */
            conditions?: outputs.certmanager.v1.CertificateRequestStatusConditions[];
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
             */
            type: string;
        }

        /**
         * Specification of the desired state of the Certificate resource. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateSpec {
            /**
             * Defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. 
             *  This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option set on both the controller and webhook components.
             */
            additionalOutputFormats?: outputs.certmanager.v1.CertificateSpecAdditionalOutputFormats[];
            /**
             * Requested common name X509 certificate subject attribute. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6 NOTE: TLS clients will ignore this value when any subject alternative name is set (see https://tools.ietf.org/html/rfc6125#section-6.4.4). 
             *  Should have a length of 64 characters or fewer to avoid generating invalid CSRs. Cannot be set if the `literalSubject` field is set.
             */
            commonName?: string;
            /**
             * Requested DNS subject alternative names.
             */
            dnsNames?: string[];
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the issuer may choose to ignore the requested duration, just like any other requested attribute. 
             *  If unset, this defaults to 90 days. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            duration?: string;
            /**
             * Requested email subject alternative names.
             */
            emailAddresses?: string[];
            /**
             * Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR. 
             *  This option defaults to true, and should only be disabled if the target issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
             */
            encodeUsagesInRequest?: boolean;
            /**
             * Requested IP address subject alternative names.
             */
            ipAddresses?: string[];
            /**
             * Requested basic constraints isCA value. The isCA value is used to set the `isCA` field on the created CertificateRequest resources. Note that the issuer may choose to ignore the requested isCA value, just like any other requested attribute. 
             *  If true, this will automatically add the `cert sign` usage to the list of requested `usages`.
             */
            isCA?: boolean;
            /**
             * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
             *  The `name` field of the reference must always be specified.
             */
            issuerRef: outputs.certmanager.v1.CertificateSpecIssuerRef;
            /**
             * Additional keystore output formats to be stored in the Certificate's Secret.
             */
            keystores?: outputs.certmanager.v1.CertificateSpecKeystores;
            /**
             * Requested X.509 certificate subject, represented using the LDAP "String Representation of a Distinguished Name" [1]. Important: the LDAP string format also specifies the order of the attributes in the subject, this is important when issuing certs for LDAP authentication. Example: `CN=foo,DC=corp,DC=example,DC=com` More info [1]: https://datatracker.ietf.org/doc/html/rfc4514 More info: https://github.com/cert-manager/cert-manager/issues/3203 More info: https://github.com/cert-manager/cert-manager/issues/4424 
             *  Cannot be set if the `subject` or `commonName` field is set. This is an Alpha Feature and is only enabled with the `--feature-gates=LiteralCertificateSubject=true` option set on both the controller and webhook components.
             */
            literalSubject?: string;
            /**
             * Private key options. These include the key algorithm and size, the used encoding and the rotation policy.
             */
            privateKey?: outputs.certmanager.v1.CertificateSpecPrivateKey;
            /**
             * How long before the currently issued certificate's expiry cert-manager should renew the certificate. For example, if a certificate is valid for 60 minutes, and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate 50 minutes after it was issued (i.e. when there are 10 minutes remaining until the certificate is no longer valid). 
             *  NOTE: The actual lifetime of the issued certificate is used to determine the renewal time. If an issuer returns a certificate with a different lifetime than the one requested, cert-manager will use the lifetime of the issued certificate. 
             *  If unset, this defaults to 1/3 of the issued certificate's lifetime. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            renewBefore?: string;
            /**
             * The maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. 
             *  If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
             */
            revisionHistoryLimit?: number;
            /**
             * Name of the Secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer. The Secret resource lives in the same namespace as the Certificate resource.
             */
            secretName: string;
            /**
             * Defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
             */
            secretTemplate?: outputs.certmanager.v1.CertificateSpecSecretTemplate;
            /**
             * Requested set of X509 certificate subject attributes. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6 
             *  The common name attribute is specified separately in the `commonName` field. Cannot be set if the `literalSubject` field is set.
             */
            subject?: outputs.certmanager.v1.CertificateSpecSubject;
            /**
             * Requested URI subject alternative names.
             */
            uris?: string[];
            /**
             * Requested key usages and extended key usages. These usages are used to set the `usages` field on the created CertificateRequest resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages will additionally be encoded in the `request` field which contains the CSR blob. 
             *  If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages?: string[];
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormats {
            /**
             * Type is the name of the format type that should be written to the Certificate's target Secret.
             */
            type: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
         *  The `name` field of the reference must always be specified.
         */
        export interface CertificateSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Additional keystore output formats to be stored in the Certificate's Secret.
         */
        export interface CertificateSpecKeystores {
            /**
             * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
             */
            jks?: outputs.certmanager.v1.CertificateSpecKeystoresJks;
            /**
             * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
             */
            pkcs12?: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12;
        }

        /**
         * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJks {
            /**
             * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresJksPasswordSecretRef;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12 {
            /**
             * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRef;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Private key options. These include the key algorithm and size, the used encoding and the rotation policy.
         */
        export interface CertificateSpecPrivateKey {
            /**
             * Algorithm is the private key algorithm of the corresponding private key for this certificate. 
             *  If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`. If `algorithm` is specified and `size` is not provided, key size of 2048 will be used for `RSA` key algorithm and key size of 256 will be used for `ECDSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: string;
            /**
             * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. 
             *  If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
             */
            encoding?: string;
            /**
             * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. 
             *  If set to `Never`, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to `Always`, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is `Never` for backward compatibility.
             */
            rotationPolicy?: string;
            /**
             * Size is the key bit size of the corresponding private key for this certificate. 
             *  If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
             */
            size?: number;
        }

        /**
         * Defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplate {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Requested set of X509 certificate subject attributes. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6 
         *  The common name attribute is specified separately in the `commonName` field. Cannot be set if the `literalSubject` field is set.
         */
        export interface CertificateSpecSubject {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: string[];
            /**
             * Cities to be used on the Certificate.
             */
            localities?: string[];
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: string[];
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: string[];
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: string[];
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: string[];
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: string;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: string[];
        }

        /**
         * Status of the Certificate. This is set and managed automatically. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateStatus {
            /**
             * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
             */
            conditions?: outputs.certmanager.v1.CertificateStatusConditions[];
            /**
             * The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: number;
            /**
             * LastFailureTime is set only if the lastest issuance for this Certificate failed and contains the time of the failure. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1). If the latest issuance has succeeded this field will be unset.
             */
            lastFailureTime?: string;
            /**
             * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
             */
            nextPrivateKeySecretName?: string;
            /**
             * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
             */
            notAfter?: string;
            /**
             * The time after which the certificate stored in the secret named by this resource in `spec.secretName` is valid.
             */
            notBefore?: string;
            /**
             * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: string;
            /**
             * The current 'revision' of the certificate as issued. 
             *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
             *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
             *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
             */
            revision?: number;
        }

        /**
         * CertificateCondition contains condition information for an Certificate.
         */
        export interface CertificateStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: string;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.ClusterIssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.ClusterIssuerSpecSelfSigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.ClusterIssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.ClusterIssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcme {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNS;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNS;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNS;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNS {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNS {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: number;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * clusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults sets the appropriate defaults for ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs
         */
        export function clusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults(val: ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs): ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface ClusterIssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.ClusterIssuerSpecVaultAuth;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultCaBundleSecretRef;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretRef;
            /**
             * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
             */
            serviceAccountRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceAccountRef;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesServiceAccountRef {
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface ClusterIssuerSpecVaultCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.ClusterIssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTpp {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.ClusterIssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface ClusterIssuerStatusAcme {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
             */
            lastPrivateKeyHash?: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.IssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.IssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.IssuerSpecSelfSigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.IssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.IssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcme {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.IssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.IssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.IssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.IssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface IssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.IssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNS;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNS;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNS;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNS {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNS {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: number;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * issuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults sets the appropriate defaults for IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs
         */
        export function issuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults(val: IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs): IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface IssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.IssuerSpecVaultAuth;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: outputs.certmanager.v1.IssuerSpecVaultCaBundleSecretRef;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.IssuerSpecVaultAuthAppRole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.IssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.IssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetesSecretRef;
            /**
             * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
             */
            serviceAccountRef?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetesServiceAccountRef;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
         */
        export interface IssuerSpecVaultAuthKubernetesServiceAccountRef {
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface IssuerSpecVaultCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.IssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.IssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.IssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTpp {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.IssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface IssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.IssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.IssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface IssuerStatusAcme {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
             */
            lastPrivateKeyHash?: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

    }
}

export namespace charts {
    export namespace v1alpha1 {
    }
}

export namespace cluster {
    export namespace v1alpha3 {
        /**
         * ClusterSpec defines the desired state of Cluster.
         */
        export interface ClusterSpec {
            /**
             * Cluster network configuration.
             */
            clusterNetwork?: outputs.cluster.v1alpha3.ClusterSpecClusterNetwork;
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: outputs.cluster.v1alpha3.ClusterSpecControlPlaneEndpoint;
            /**
             * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
             */
            controlPlaneRef?: outputs.cluster.v1alpha3.ClusterSpecControlPlaneRef;
            /**
             * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
             */
            infrastructureRef?: outputs.cluster.v1alpha3.ClusterSpecInfrastructureRef;
            /**
             * Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
             */
            paused?: boolean;
        }

        /**
         * Cluster network configuration.
         */
        export interface ClusterSpecClusterNetwork {
            /**
             * APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
             */
            apiServerPort?: number;
            /**
             * The network ranges from which Pod networks are allocated.
             */
            pods?: outputs.cluster.v1alpha3.ClusterSpecClusterNetworkPods;
            /**
             * Domain name for services.
             */
            serviceDomain?: string;
            /**
             * The network ranges from which service VIPs are allocated.
             */
            services?: outputs.cluster.v1alpha3.ClusterSpecClusterNetworkServices;
        }

        /**
         * The network ranges from which Pod networks are allocated.
         */
        export interface ClusterSpecClusterNetworkPods {
            cidrBlocks: string[];
        }

        /**
         * The network ranges from which service VIPs are allocated.
         */
        export interface ClusterSpecClusterNetworkServices {
            cidrBlocks: string[];
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ClusterSpecControlPlaneEndpoint {
            /**
             * The hostname on which the API server is serving.
             */
            host: string;
            /**
             * The port on which the API server is serving.
             */
            port: number;
        }

        /**
         * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
         */
        export interface ClusterSpecControlPlaneRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
         */
        export interface ClusterSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * ClusterStatus defines the observed state of Cluster.
         */
        export interface ClusterStatus {
            /**
             * Conditions defines current service state of the cluster.
             */
            conditions?: outputs.cluster.v1alpha3.ClusterStatusConditions[];
            /**
             * ControlPlaneInitialized defines if the control plane has been initialized.
             */
            controlPlaneInitialized?: boolean;
            /**
             * ControlPlaneReady defines if the control plane is ready.
             */
            controlPlaneReady?: boolean;
            /**
             * FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
             */
            failureDomains?: {[key: string]: outputs.cluster.v1alpha3.ClusterStatusFailureDomains};
            /**
             * FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: string;
            /**
             * FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ClusterStatusFailureDomains {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: {[key: string]: string};
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: boolean;
        }

        /**
         * MachineDeploymentSpec defines the desired state of MachineDeployment.
         */
        export interface MachineDeploymentSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * Indicates that the deployment is paused.
             */
            paused?: boolean;
            /**
             * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
             */
            progressDeadlineSeconds?: number;
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: number;
            /**
             * The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
             */
            revisionHistoryLimit?: number;
            /**
             * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
             */
            selector: outputs.cluster.v1alpha3.MachineDeploymentSpecSelector;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: outputs.cluster.v1alpha3.MachineDeploymentSpecStrategy;
            /**
             * Template describes the machines that will be created.
             */
            template: outputs.cluster.v1alpha3.MachineDeploymentSpecTemplate;
        }

        /**
         * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
         */
        export interface MachineDeploymentSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1alpha3.MachineDeploymentSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineDeploymentSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface MachineDeploymentSpecStrategy {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: outputs.cluster.v1alpha3.MachineDeploymentSpecStrategyRollingUpdate;
            /**
             * Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachineDeploymentSpecStrategyRollingUpdate {
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: number | string;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachineDeploymentSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1alpha3.MachineDeploymentSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineDeploymentSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. 
             *  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). 
             *  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            generateName?: string;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            name?: string;
            /**
             * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. 
             *  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            namespace?: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            ownerReferences?: outputs.cluster.v1alpha3.MachineDeploymentSpecTemplateMetadataOwnerReferences[];
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface MachineDeploymentSpecTemplateMetadataOwnerReferences {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineDeploymentSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpecBootstrapConfigRef;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: string;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineDeploymentSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineDeploymentStatus defines the observed state of MachineDeployment.
         */
        export interface MachineDeploymentStatus {
            /**
             * Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: number;
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
             */
            phase?: string;
            /**
             * Total number of ready machines targeted by this deployment.
             */
            readyReplicas?: number;
            /**
             * Total number of non-terminated machines targeted by this deployment (their labels match the selector).
             */
            replicas?: number;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: string;
            /**
             * Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
             */
            unavailableReplicas?: number;
            /**
             * Total number of non-terminated machines targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: number;
        }

        /**
         * Specification of machine health check policy
         */
        export interface MachineHealthCheckSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: number | string;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated.
             */
            nodeStartupTimeout?: string;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: outputs.cluster.v1alpha3.MachineHealthCheckSpecRemediationTemplate;
            /**
             * Label selector to match machines whose health will be exercised
             */
            selector: outputs.cluster.v1alpha3.MachineHealthCheckSpecSelector;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions: outputs.cluster.v1alpha3.MachineHealthCheckSpecUnhealthyConditions[];
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface MachineHealthCheckSpecRemediationTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Label selector to match machines whose health will be exercised
         */
        export interface MachineHealthCheckSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1alpha3.MachineHealthCheckSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineHealthCheckSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface MachineHealthCheckSpecUnhealthyConditions {
            status: string;
            timeout: string;
            type: string;
        }

        /**
         * Most recently observed status of MachineHealthCheck resource
         */
        export interface MachineHealthCheckStatus {
            /**
             * Conditions defines current service state of the MachineHealthCheck.
             */
            conditions?: outputs.cluster.v1alpha3.MachineHealthCheckStatusConditions[];
            /**
             * total number of healthy machines counted by this machine health check
             */
            currentHealthy?: number;
            /**
             * total number of machines counted by this machine health check
             */
            expectedMachines?: number;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
             */
            remediationsAllowed?: number;
            /**
             * Targets shows the current list of machines the machine health check is watching
             */
            targets?: string[];
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineHealthCheckStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * MachinePoolSpec defines the desired state of MachinePool.
         */
        export interface MachinePoolSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomains is the list of failure domains this MachinePool should be attached to.
             */
            failureDomains?: string[];
            /**
             * Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
             */
            providerIDList?: string[];
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: number;
            /**
             * The deployment strategy to use to replace existing machine instances with new ones.
             */
            strategy?: outputs.cluster.v1alpha3.MachinePoolSpecStrategy;
            /**
             * Template describes the machines that will be created.
             */
            template: outputs.cluster.v1alpha3.MachinePoolSpecTemplate;
        }

        /**
         * The deployment strategy to use to replace existing machine instances with new ones.
         */
        export interface MachinePoolSpecStrategy {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: outputs.cluster.v1alpha3.MachinePoolSpecStrategyRollingUpdate;
            /**
             * Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachinePoolSpecStrategyRollingUpdate {
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: number | string;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachinePoolSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1alpha3.MachinePoolSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1alpha3.MachinePoolSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachinePoolSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. 
             *  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). 
             *  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            generateName?: string;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            name?: string;
            /**
             * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. 
             *  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            namespace?: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            ownerReferences?: outputs.cluster.v1alpha3.MachinePoolSpecTemplateMetadataOwnerReferences[];
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface MachinePoolSpecTemplateMetadataOwnerReferences {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachinePoolSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha3.MachinePoolSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha3.MachinePoolSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachinePoolSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha3.MachinePoolSpecTemplateSpecBootstrapConfigRef;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: string;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachinePoolSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachinePoolStatus defines the observed state of MachinePool.
         */
        export interface MachinePoolStatus {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
             */
            availableReplicas?: number;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: boolean;
            /**
             * Conditions define the current service state of the MachinePool.
             */
            conditions?: outputs.cluster.v1alpha3.MachinePoolStatusConditions[];
            /**
             * FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: string;
            /**
             * FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * NodeRefs will point to the corresponding Nodes if it they exist.
             */
            nodeRefs?: outputs.cluster.v1alpha3.MachinePoolStatusNodeRefs[];
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
            /**
             * The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: number;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: number;
            /**
             * Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
             */
            unavailableReplicas?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachinePoolStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MachinePoolStatusNodeRefs {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineSetSpec defines the desired state of MachineSet.
         */
        export interface MachineSetSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
             */
            deletePolicy?: string;
            /**
             * MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
             */
            replicas?: number;
            /**
             * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.cluster.v1alpha3.MachineSetSpecSelector;
            /**
             * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
             */
            template?: outputs.cluster.v1alpha3.MachineSetSpecTemplate;
        }

        /**
         * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface MachineSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1alpha3.MachineSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
         */
        export interface MachineSetSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1alpha3.MachineSetSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1alpha3.MachineSetSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineSetSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. 
             *  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). 
             *  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            generateName?: string;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            name?: string;
            /**
             * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. 
             *  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            namespace?: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            ownerReferences?: outputs.cluster.v1alpha3.MachineSetSpecTemplateMetadataOwnerReferences[];
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface MachineSetSpecTemplateMetadataOwnerReferences {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineSetSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha3.MachineSetSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha3.MachineSetSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSetSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha3.MachineSetSpecTemplateSpecBootstrapConfigRef;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: string;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachineSetSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSetSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineSetStatus defines the observed state of MachineSet.
         */
        export interface MachineSetStatus {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
             */
            availableReplicas?: number;
            failureMessage?: string;
            /**
             * In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption. 
             *  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
             */
            failureReason?: string;
            /**
             * The number of replicas that have labels matching the labels of the machine template of the MachineSet.
             */
            fullyLabeledReplicas?: number;
            /**
             * ObservedGeneration reflects the generation of the most recently observed MachineSet.
             */
            observedGeneration?: number;
            /**
             * The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: number;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: number;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: string;
        }

        /**
         * MachineSpec defines the desired state of Machine.
         */
        export interface MachineSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha3.MachineSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha3.MachineSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha3.MachineSpecBootstrapConfigRef;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: string;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachineSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineStatus defines the observed state of Machine.
         */
        export interface MachineStatus {
            /**
             * Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
             */
            addresses?: outputs.cluster.v1alpha3.MachineStatusAddresses[];
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: boolean;
            /**
             * Conditions defines current service state of the Machine.
             */
            conditions?: outputs.cluster.v1alpha3.MachineStatusConditions[];
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: string;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * LastUpdated identifies when the phase of the Machine last transitioned.
             */
            lastUpdated?: string;
            /**
             * NodeRef will point to the corresponding Node if it exists.
             */
            nodeRef?: outputs.cluster.v1alpha3.MachineStatusNodeRef;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
            /**
             * Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
             */
            version?: string;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MachineStatusAddresses {
            /**
             * The machine address.
             */
            address: string;
            /**
             * Machine address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * NodeRef will point to the corresponding Node if it exists.
         */
        export interface MachineStatusNodeRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

    }

    export namespace v1alpha4 {
        /**
         * ClusterClassSpec describes the desired state of the ClusterClass.
         */
        export interface ClusterClassSpec {
            /**
             * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
             */
            controlPlane?: outputs.cluster.v1alpha4.ClusterClassSpecControlPlane;
            /**
             * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
             */
            infrastructure?: outputs.cluster.v1alpha4.ClusterClassSpecInfrastructure;
            /**
             * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
             */
            workers?: outputs.cluster.v1alpha4.ClusterClassSpecWorkers;
        }

        /**
         * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
         */
        export interface ClusterClassSpecControlPlane {
            /**
             * MachineTemplate defines the metadata and infrastructure information for control plane machines. 
             *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
             */
            machineInfrastructure?: outputs.cluster.v1alpha4.ClusterClassSpecControlPlaneMachineInfrastructure;
            /**
             * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
             *  This field is supported if and only if the control plane provider template referenced is Machine based.
             */
            metadata?: outputs.cluster.v1alpha4.ClusterClassSpecControlPlaneMetadata;
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1alpha4.ClusterClassSpecControlPlaneRef;
        }

        /**
         * MachineTemplate defines the metadata and infrastructure information for control plane machines. 
         *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructure {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1alpha4.ClusterClassSpecControlPlaneMachineInfrastructureRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
         *  This field is supported if and only if the control plane provider template referenced is Machine based.
         */
        export interface ClusterClassSpecControlPlaneMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
         */
        export interface ClusterClassSpecInfrastructure {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1alpha4.ClusterClassSpecInfrastructureRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
         */
        export interface ClusterClassSpecWorkers {
            /**
             * MachineDeployments is a list of machine deployment classes that can be used to create a set of worker nodes.
             */
            machineDeployments?: outputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeployments[];
        }

        /**
         * MachineDeploymentClass serves as a template to define a set of worker nodes of the cluster provisioned using the `ClusterClass`.
         */
        export interface ClusterClassSpecWorkersMachineDeployments {
            /**
             * Class denotes a type of worker node present in the cluster, this name MUST be unique within a ClusterClass and can be referenced in the Cluster to create a managed MachineDeployment.
             */
            class: string;
            /**
             * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
             */
            template: outputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplate;
        }

        /**
         * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplate {
            /**
             * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
             */
            bootstrap: outputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrap;
            /**
             * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
             */
            infrastructure: outputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructure;
            /**
             * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
             */
            metadata?: outputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateMetadata;
        }

        /**
         * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrap {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructure {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * ClusterSpec defines the desired state of Cluster.
         */
        export interface ClusterSpec {
            /**
             * Cluster network configuration.
             */
            clusterNetwork?: outputs.cluster.v1alpha4.ClusterSpecClusterNetwork;
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: outputs.cluster.v1alpha4.ClusterSpecControlPlaneEndpoint;
            /**
             * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
             */
            controlPlaneRef?: outputs.cluster.v1alpha4.ClusterSpecControlPlaneRef;
            /**
             * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
             */
            infrastructureRef?: outputs.cluster.v1alpha4.ClusterSpecInfrastructureRef;
            /**
             * Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
             */
            paused?: boolean;
            /**
             * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
             */
            topology?: outputs.cluster.v1alpha4.ClusterSpecTopology;
        }

        /**
         * Cluster network configuration.
         */
        export interface ClusterSpecClusterNetwork {
            /**
             * APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
             */
            apiServerPort?: number;
            /**
             * The network ranges from which Pod networks are allocated.
             */
            pods?: outputs.cluster.v1alpha4.ClusterSpecClusterNetworkPods;
            /**
             * Domain name for services.
             */
            serviceDomain?: string;
            /**
             * The network ranges from which service VIPs are allocated.
             */
            services?: outputs.cluster.v1alpha4.ClusterSpecClusterNetworkServices;
        }

        /**
         * The network ranges from which Pod networks are allocated.
         */
        export interface ClusterSpecClusterNetworkPods {
            cidrBlocks: string[];
        }

        /**
         * The network ranges from which service VIPs are allocated.
         */
        export interface ClusterSpecClusterNetworkServices {
            cidrBlocks: string[];
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ClusterSpecControlPlaneEndpoint {
            /**
             * The hostname on which the API server is serving.
             */
            host: string;
            /**
             * The port on which the API server is serving.
             */
            port: number;
        }

        /**
         * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
         */
        export interface ClusterSpecControlPlaneRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
         */
        export interface ClusterSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
         */
        export interface ClusterSpecTopology {
            /**
             * The name of the ClusterClass object to create the topology.
             */
            class: string;
            /**
             * ControlPlane describes the cluster control plane.
             */
            controlPlane?: outputs.cluster.v1alpha4.ClusterSpecTopologyControlPlane;
            /**
             * RolloutAfter performs a rollout of the entire cluster one component at a time, control plane first and then machine deployments.
             */
            rolloutAfter?: string;
            /**
             * The Kubernetes version of the cluster.
             */
            version: string;
            /**
             * Workers encapsulates the different constructs that form the worker nodes for the cluster.
             */
            workers?: outputs.cluster.v1alpha4.ClusterSpecTopologyWorkers;
        }

        /**
         * ControlPlane describes the cluster control plane.
         */
        export interface ClusterSpecTopologyControlPlane {
            /**
             * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass. 
             *  This field is supported if and only if the control plane provider template referenced in the ClusterClass is Machine based.
             */
            metadata?: outputs.cluster.v1alpha4.ClusterSpecTopologyControlPlaneMetadata;
            /**
             * Replicas is the number of control plane nodes. If the value is nil, the ControlPlane object is created without the number of Replicas and it's assumed that the control plane controller does not implement support for this field. When specified against a control plane provider that lacks support for this field, this value will be ignored.
             */
            replicas?: number;
        }

        /**
         * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass. 
         *  This field is supported if and only if the control plane provider template referenced in the ClusterClass is Machine based.
         */
        export interface ClusterSpecTopologyControlPlaneMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Workers encapsulates the different constructs that form the worker nodes for the cluster.
         */
        export interface ClusterSpecTopologyWorkers {
            /**
             * MachineDeployments is a list of machine deployments in the cluster.
             */
            machineDeployments?: outputs.cluster.v1alpha4.ClusterSpecTopologyWorkersMachineDeployments[];
        }

        /**
         * MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology. This set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.
         */
        export interface ClusterSpecTopologyWorkersMachineDeployments {
            /**
             * Class is the name of the MachineDeploymentClass used to create the set of worker nodes. This should match one of the deployment classes defined in the ClusterClass object mentioned in the `Cluster.Spec.Class` field.
             */
            class: string;
            /**
             * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
             */
            metadata?: outputs.cluster.v1alpha4.ClusterSpecTopologyWorkersMachineDeploymentsMetadata;
            /**
             * Name is the unique identifier for this MachineDeploymentTopology. The value is used with other unique identifiers to create a MachineDeployment's Name (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length, the values are hashed together.
             */
            name: string;
            /**
             * Replicas is the number of worker nodes belonging to this set. If the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to zero) and it's assumed that an external entity (like cluster autoscaler) is responsible for the management of this value.
             */
            replicas?: number;
        }

        /**
         * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * ClusterStatus defines the observed state of Cluster.
         */
        export interface ClusterStatus {
            /**
             * Conditions defines current service state of the cluster.
             */
            conditions?: outputs.cluster.v1alpha4.ClusterStatusConditions[];
            /**
             * ControlPlaneReady defines if the control plane is ready.
             */
            controlPlaneReady?: boolean;
            /**
             * FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
             */
            failureDomains?: {[key: string]: outputs.cluster.v1alpha4.ClusterStatusFailureDomains};
            /**
             * FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: string;
            /**
             * FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ClusterStatusFailureDomains {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: {[key: string]: string};
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: boolean;
        }

        /**
         * MachineDeploymentSpec defines the desired state of MachineDeployment.
         */
        export interface MachineDeploymentSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * Indicates that the deployment is paused.
             */
            paused?: boolean;
            /**
             * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
             */
            progressDeadlineSeconds?: number;
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: number;
            /**
             * The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
             */
            revisionHistoryLimit?: number;
            /**
             * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
             */
            selector: outputs.cluster.v1alpha4.MachineDeploymentSpecSelector;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: outputs.cluster.v1alpha4.MachineDeploymentSpecStrategy;
            /**
             * Template describes the machines that will be created.
             */
            template: outputs.cluster.v1alpha4.MachineDeploymentSpecTemplate;
        }
        /**
         * machineDeploymentSpecProvideDefaults sets the appropriate defaults for MachineDeploymentSpec
         */
        export function machineDeploymentSpecProvideDefaults(val: MachineDeploymentSpec): MachineDeploymentSpec {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
         */
        export interface MachineDeploymentSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1alpha4.MachineDeploymentSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineDeploymentSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface MachineDeploymentSpecStrategy {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: outputs.cluster.v1alpha4.MachineDeploymentSpecStrategyRollingUpdate;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachineDeploymentSpecStrategyRollingUpdate {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: string;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: number | string;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachineDeploymentSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1alpha4.MachineDeploymentSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineDeploymentSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineDeploymentSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineDeploymentSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineDeploymentStatus defines the observed state of MachineDeployment.
         */
        export interface MachineDeploymentStatus {
            /**
             * Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: number;
            /**
             * Conditions defines current service state of the MachineDeployment.
             */
            conditions?: outputs.cluster.v1alpha4.MachineDeploymentStatusConditions[];
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
             */
            phase?: string;
            /**
             * Total number of ready machines targeted by this deployment.
             */
            readyReplicas?: number;
            /**
             * Total number of non-terminated machines targeted by this deployment (their labels match the selector).
             */
            replicas?: number;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: string;
            /**
             * Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
             */
            unavailableReplicas?: number;
            /**
             * Total number of non-terminated machines targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineDeploymentStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * Specification of machine health check policy
         */
        export interface MachineHealthCheckSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: number | string;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If not set, this value is defaulted to 10 minutes. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: string;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: outputs.cluster.v1alpha4.MachineHealthCheckSpecRemediationTemplate;
            /**
             * Label selector to match machines whose health will be exercised
             */
            selector: outputs.cluster.v1alpha4.MachineHealthCheckSpecSelector;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions: outputs.cluster.v1alpha4.MachineHealthCheckSpecUnhealthyConditions[];
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: string;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface MachineHealthCheckSpecRemediationTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Label selector to match machines whose health will be exercised
         */
        export interface MachineHealthCheckSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1alpha4.MachineHealthCheckSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineHealthCheckSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface MachineHealthCheckSpecUnhealthyConditions {
            status: string;
            timeout: string;
            type: string;
        }

        /**
         * Most recently observed status of MachineHealthCheck resource
         */
        export interface MachineHealthCheckStatus {
            /**
             * Conditions defines current service state of the MachineHealthCheck.
             */
            conditions?: outputs.cluster.v1alpha4.MachineHealthCheckStatusConditions[];
            /**
             * total number of healthy machines counted by this machine health check
             */
            currentHealthy?: number;
            /**
             * total number of machines counted by this machine health check
             */
            expectedMachines?: number;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
             */
            remediationsAllowed?: number;
            /**
             * Targets shows the current list of machines the machine health check is watching
             */
            targets?: string[];
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineHealthCheckStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * MachinePoolSpec defines the desired state of MachinePool.
         */
        export interface MachinePoolSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomains is the list of failure domains this MachinePool should be attached to.
             */
            failureDomains?: string[];
            /**
             * Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
             */
            providerIDList?: string[];
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: number;
            /**
             * Template describes the machines that will be created.
             */
            template: outputs.cluster.v1alpha4.MachinePoolSpecTemplate;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachinePoolSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1alpha4.MachinePoolSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1alpha4.MachinePoolSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachinePoolSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachinePoolSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha4.MachinePoolSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha4.MachinePoolSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachinePoolSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha4.MachinePoolSpecTemplateSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachinePoolSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachinePoolStatus defines the observed state of MachinePool.
         */
        export interface MachinePoolStatus {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
             */
            availableReplicas?: number;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: boolean;
            /**
             * Conditions define the current service state of the MachinePool.
             */
            conditions?: outputs.cluster.v1alpha4.MachinePoolStatusConditions[];
            /**
             * FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: string;
            /**
             * FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * NodeRefs will point to the corresponding Nodes if it they exist.
             */
            nodeRefs?: outputs.cluster.v1alpha4.MachinePoolStatusNodeRefs[];
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
            /**
             * The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: number;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: number;
            /**
             * Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
             */
            unavailableReplicas?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachinePoolStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MachinePoolStatusNodeRefs {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineSetSpec defines the desired state of MachineSet.
         */
        export interface MachineSetSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
             */
            deletePolicy?: string;
            /**
             * MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
             */
            replicas?: number;
            /**
             * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.cluster.v1alpha4.MachineSetSpecSelector;
            /**
             * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
             */
            template?: outputs.cluster.v1alpha4.MachineSetSpecTemplate;
        }
        /**
         * machineSetSpecProvideDefaults sets the appropriate defaults for MachineSetSpec
         */
        export function machineSetSpecProvideDefaults(val: MachineSetSpec): MachineSetSpec {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface MachineSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1alpha4.MachineSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
         */
        export interface MachineSetSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1alpha4.MachineSetSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1alpha4.MachineSetSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineSetSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineSetSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha4.MachineSetSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha4.MachineSetSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSetSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha4.MachineSetSpecTemplateSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSetSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSetSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineSetStatus defines the observed state of MachineSet.
         */
        export interface MachineSetStatus {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
             */
            availableReplicas?: number;
            /**
             * Conditions defines current service state of the MachineSet.
             */
            conditions?: outputs.cluster.v1alpha4.MachineSetStatusConditions[];
            failureMessage?: string;
            /**
             * In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption. 
             *  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
             */
            failureReason?: string;
            /**
             * The number of replicas that have labels matching the labels of the machine template of the MachineSet.
             */
            fullyLabeledReplicas?: number;
            /**
             * ObservedGeneration reflects the generation of the most recently observed MachineSet.
             */
            observedGeneration?: number;
            /**
             * The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: number;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: number;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * MachineSpec defines the desired state of Machine.
         */
        export interface MachineSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1alpha4.MachineSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1alpha4.MachineSpecInfrastructureRef;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1alpha4.MachineSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineStatus defines the observed state of Machine.
         */
        export interface MachineStatus {
            /**
             * Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
             */
            addresses?: outputs.cluster.v1alpha4.MachineStatusAddresses[];
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: boolean;
            /**
             * Conditions defines current service state of the Machine.
             */
            conditions?: outputs.cluster.v1alpha4.MachineStatusConditions[];
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: string;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * LastUpdated identifies when the phase of the Machine last transitioned.
             */
            lastUpdated?: string;
            /**
             * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
             */
            nodeInfo?: outputs.cluster.v1alpha4.MachineStatusNodeInfo;
            /**
             * NodeRef will point to the corresponding Node if it exists.
             */
            nodeRef?: outputs.cluster.v1alpha4.MachineStatusNodeRef;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
            /**
             * Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
             */
            version?: string;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MachineStatusAddresses {
            /**
             * The machine address.
             */
            address: string;
            /**
             * Machine address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
         */
        export interface MachineStatusNodeInfo {
            /**
             * The Architecture reported by the node
             */
            architecture: string;
            /**
             * Boot ID reported by the node.
             */
            bootID: string;
            /**
             * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
             */
            containerRuntimeVersion: string;
            /**
             * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
             */
            kernelVersion: string;
            /**
             * KubeProxy Version reported by the node.
             */
            kubeProxyVersion: string;
            /**
             * Kubelet Version reported by the node.
             */
            kubeletVersion: string;
            /**
             * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
             */
            machineID: string;
            /**
             * The Operating System reported by the node
             */
            operatingSystem: string;
            /**
             * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
             */
            osImage: string;
            /**
             * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
             */
            systemUUID: string;
        }

        /**
         * NodeRef will point to the corresponding Node if it exists.
         */
        export interface MachineStatusNodeRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

    }

    export namespace v1beta1 {
        /**
         * ClusterClassSpec describes the desired state of the ClusterClass.
         */
        export interface ClusterClassSpec {
            /**
             * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
             */
            controlPlane?: outputs.cluster.v1beta1.ClusterClassSpecControlPlane;
            /**
             * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
             */
            infrastructure?: outputs.cluster.v1beta1.ClusterClassSpecInfrastructure;
            /**
             * Patches defines the patches which are applied to customize referenced templates of a ClusterClass. Note: Patches will be applied in the order of the array.
             */
            patches?: outputs.cluster.v1beta1.ClusterClassSpecPatches[];
            /**
             * Variables defines the variables which can be configured in the Cluster topology and are then used in patches.
             */
            variables?: outputs.cluster.v1beta1.ClusterClassSpecVariables[];
            /**
             * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
             */
            workers?: outputs.cluster.v1beta1.ClusterClassSpecWorkers;
        }

        /**
         * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
         */
        export interface ClusterClassSpecControlPlane {
            /**
             * MachineHealthCheck defines a MachineHealthCheck for this ControlPlaneClass. This field is supported if and only if the ControlPlane provider template referenced above is Machine based and supports setting replicas.
             */
            machineHealthCheck?: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineHealthCheck;
            /**
             * MachineInfrastructure defines the metadata and infrastructure information for control plane machines. 
             *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
             */
            machineInfrastructure?: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineInfrastructure;
            /**
             * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
             *  This field is supported if and only if the control plane provider template referenced is Machine based.
             */
            metadata?: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneMetadata;
            /**
             * NamingStrategy allows changing the naming pattern used when creating the control plane provider object.
             */
            namingStrategy?: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneNamingStrategy;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds. NOTE: This value can be overridden while defining a Cluster.Topology.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout` NOTE: This value can be overridden while defining a Cluster.Topology.
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations. NOTE: This value can be overridden while defining a Cluster.Topology.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneRef;
        }

        /**
         * MachineHealthCheck defines a MachineHealthCheck for this ControlPlaneClass. This field is supported if and only if the ControlPlane provider template referenced above is Machine based and supports setting replicas.
         */
        export interface ClusterClassSpecControlPlaneMachineHealthCheck {
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: number | string;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: string;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineHealthCheckRemediationTemplate;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineHealthCheckUnhealthyConditions[];
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: string;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterClassSpecControlPlaneMachineHealthCheckRemediationTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterClassSpecControlPlaneMachineHealthCheckUnhealthyConditions {
            status: string;
            timeout: string;
            type: string;
        }

        /**
         * MachineInfrastructure defines the metadata and infrastructure information for control plane machines. 
         *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructure {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineInfrastructureRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
         *  This field is supported if and only if the control plane provider template referenced is Machine based.
         */
        export interface ClusterClassSpecControlPlaneMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * NamingStrategy allows changing the naming pattern used when creating the control plane provider object.
         */
        export interface ClusterClassSpecControlPlaneNamingStrategy {
            /**
             * Template defines the template to use for generating the name of the ControlPlane object. If not defined, it will fallback to `{{ .cluster.name }}-{{ .random }}`. If the templated string exceeds 63 characters, it will be trimmed to 58 characters and will get concatenated with a random suffix of length 5. The templating mechanism provides the following arguments: * `.cluster.name`: The name of the cluster object. * `.random`: A random alphanumeric string, without vowels, of length 5.
             */
            template?: string;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
         */
        export interface ClusterClassSpecInfrastructure {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1beta1.ClusterClassSpecInfrastructureRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * ClusterClassPatch defines a patch which is applied to customize the referenced templates.
         */
        export interface ClusterClassSpecPatches {
            /**
             * Definitions define inline patches. Note: Patches will be applied in the order of the array. Note: Exactly one of Definitions or External must be set.
             */
            definitions?: outputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitions[];
            /**
             * Description is a human-readable description of this patch.
             */
            description?: string;
            /**
             * EnabledIf is a Go template to be used to calculate if a patch should be enabled. It can reference variables defined in .spec.variables and builtin variables. The patch will be enabled if the template evaluates to `true`, otherwise it will be disabled. If EnabledIf is not set, the patch will be enabled per default.
             */
            enabledIf?: string;
            /**
             * External defines an external patch. Note: Exactly one of Definitions or External must be set.
             */
            external?: outputs.cluster.v1beta1.ClusterClassSpecPatchesExternal;
            /**
             * Name of the patch.
             */
            name: string;
        }

        /**
         * PatchDefinition defines a patch which is applied to customize the referenced templates.
         */
        export interface ClusterClassSpecPatchesDefinitions {
            /**
             * JSONPatches defines the patches which should be applied on the templates matching the selector. Note: Patches will be applied in the order of the array.
             */
            jsonPatches: outputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsJsonPatches[];
            /**
             * Selector defines on which templates the patch should be applied.
             */
            selector: outputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsSelector;
        }

        /**
         * JSONPatch defines a JSON patch.
         */
        export interface ClusterClassSpecPatchesDefinitionsJsonPatches {
            /**
             * Op defines the operation of the patch. Note: Only `add`, `replace` and `remove` are supported.
             */
            op: string;
            /**
             * Path defines the path of the patch. Note: Only the spec of a template can be patched, thus the path has to start with /spec/. Note: For now the only allowed array modifications are `append` and `prepend`, i.e.: * for op: `add`: only index 0 (prepend) and - (append) are allowed * for op: `replace` or `remove`: no indexes are allowed
             */
            path: string;
            /**
             * Value defines the value of the patch. Note: Either Value or ValueFrom is required for add and replace operations. Only one of them is allowed to be set at the same time. Note: We have to use apiextensionsv1.JSON instead of our JSON type, because controller-tools has a hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type (unset type field). Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
             */
            value?: {[key: string]: any};
            /**
             * ValueFrom defines the value of the patch. Note: Either Value or ValueFrom is required for add and replace operations. Only one of them is allowed to be set at the same time.
             */
            valueFrom?: outputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsJsonPatchesValueFrom;
        }

        /**
         * ValueFrom defines the value of the patch. Note: Either Value or ValueFrom is required for add and replace operations. Only one of them is allowed to be set at the same time.
         */
        export interface ClusterClassSpecPatchesDefinitionsJsonPatchesValueFrom {
            /**
             * Template is the Go template to be used to calculate the value. A template can reference variables defined in .spec.variables and builtin variables. Note: The template must evaluate to a valid YAML or JSON value.
             */
            template?: string;
            /**
             * Variable is the variable to be used as value. Variable can be one of the variables defined in .spec.variables or a builtin variable.
             */
            variable?: string;
        }

        /**
         * Selector defines on which templates the patch should be applied.
         */
        export interface ClusterClassSpecPatchesDefinitionsSelector {
            /**
             * APIVersion filters templates by apiVersion.
             */
            apiVersion: string;
            /**
             * Kind filters templates by kind.
             */
            kind: string;
            /**
             * MatchResources selects templates based on where they are referenced.
             */
            matchResources: outputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsSelectorMatchResources;
        }

        /**
         * MatchResources selects templates based on where they are referenced.
         */
        export interface ClusterClassSpecPatchesDefinitionsSelectorMatchResources {
            /**
             * ControlPlane selects templates referenced in .spec.ControlPlane. Note: this will match the controlPlane and also the controlPlane machineInfrastructure (depending on the kind and apiVersion).
             */
            controlPlane?: boolean;
            /**
             * InfrastructureCluster selects templates referenced in .spec.infrastructure.
             */
            infrastructureCluster?: boolean;
            /**
             * MachineDeploymentClass selects templates referenced in specific MachineDeploymentClasses in .spec.workers.machineDeployments.
             */
            machineDeploymentClass?: outputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsSelectorMatchResourcesMachineDeploymentClass;
        }

        /**
         * MachineDeploymentClass selects templates referenced in specific MachineDeploymentClasses in .spec.workers.machineDeployments.
         */
        export interface ClusterClassSpecPatchesDefinitionsSelectorMatchResourcesMachineDeploymentClass {
            /**
             * Names selects templates by class names.
             */
            names?: string[];
        }

        /**
         * External defines an external patch. Note: Exactly one of Definitions or External must be set.
         */
        export interface ClusterClassSpecPatchesExternal {
            /**
             * DiscoverVariablesExtension references an extension which is called to discover variables.
             */
            discoverVariablesExtension?: string;
            /**
             * GenerateExtension references an extension which is called to generate patches.
             */
            generateExtension?: string;
            /**
             * Settings defines key value pairs to be passed to the extensions. Values defined here take precedence over the values defined in the corresponding ExtensionConfig.
             */
            settings?: {[key: string]: string};
            /**
             * ValidateExtension references an extension which is called to validate the topology.
             */
            validateExtension?: string;
        }

        /**
         * ClusterClassVariable defines a variable which can be configured in the Cluster topology and used in patches.
         */
        export interface ClusterClassSpecVariables {
            /**
             * Name of the variable.
             */
            name: string;
            /**
             * Required specifies if the variable is required. Note: this applies to the variable as a whole and thus the top-level object defined in the schema. If nested fields are required, this will be specified inside the schema.
             */
            required: boolean;
            /**
             * Schema defines the schema of the variable.
             */
            schema: outputs.cluster.v1beta1.ClusterClassSpecVariablesSchema;
        }

        /**
         * Schema defines the schema of the variable.
         */
        export interface ClusterClassSpecVariablesSchema {
            /**
             * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
             */
            openAPIV3Schema: outputs.cluster.v1beta1.ClusterClassSpecVariablesSchemaOpenAPIV3Schema;
        }

        /**
         * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
         */
        export interface ClusterClassSpecVariablesSchemaOpenAPIV3Schema {
            /**
             * AdditionalProperties specifies the schema of values in a map (keys are always strings). NOTE: Can only be set if type is object. NOTE: AdditionalProperties is mutually exclusive with Properties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            additionalProperties?: {[key: string]: any};
            /**
             * Default is the default value of the variable. NOTE: Can be set for all types.
             */
            default?: {[key: string]: any};
            /**
             * Description is a human-readable description of this variable.
             */
            description?: string;
            /**
             * Enum is the list of valid values of the variable. NOTE: Can be set for all types.
             */
            enum?: {[key: string]: any}[];
            /**
             * Example is an example for this variable.
             */
            example?: {[key: string]: any};
            /**
             * ExclusiveMaximum specifies if the Maximum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMaximum?: boolean;
            /**
             * ExclusiveMinimum specifies if the Minimum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMinimum?: boolean;
            /**
             * Format is an OpenAPI v3 format string. Unknown formats are ignored. For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we're currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go NOTE: Can only be set if type is string.
             */
            format?: string;
            /**
             * Items specifies fields of an array. NOTE: Can only be set if type is array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            items?: {[key: string]: any};
            /**
             * MaxItems is the max length of an array variable. NOTE: Can only be set if type is array.
             */
            maxItems?: number;
            /**
             * MaxLength is the max length of a string variable. NOTE: Can only be set if type is string.
             */
            maxLength?: number;
            /**
             * Maximum is the maximum of an integer or number variable. If ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum. If ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum. NOTE: Can only be set if type is integer or number.
             */
            maximum?: number;
            /**
             * MinItems is the min length of an array variable. NOTE: Can only be set if type is array.
             */
            minItems?: number;
            /**
             * MinLength is the min length of a string variable. NOTE: Can only be set if type is string.
             */
            minLength?: number;
            /**
             * Minimum is the minimum of an integer or number variable. If ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum. If ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum. NOTE: Can only be set if type is integer or number.
             */
            minimum?: number;
            /**
             * Pattern is the regex which a string variable must match. NOTE: Can only be set if type is string.
             */
            pattern?: string;
            /**
             * Properties specifies fields of an object. NOTE: Can only be set if type is object. NOTE: Properties is mutually exclusive with AdditionalProperties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            properties?: {[key: string]: any};
            /**
             * Required specifies which fields of an object are required. NOTE: Can only be set if type is object.
             */
            required?: string[];
            /**
             * Type is the type of the variable. Valid values are: object, array, string, integer, number or boolean.
             */
            type: string;
            /**
             * UniqueItems specifies if items in an array must be unique. NOTE: Can only be set if type is array.
             */
            uniqueItems?: boolean;
            /**
             * XPreserveUnknownFields allows setting fields in a variable object which are not defined in the variable schema. This affects fields recursively, except if nested properties or additionalProperties are specified in the schema.
             */
            'x-kubernetes-preserve-unknown-fields'?: boolean;
        }

        /**
         * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
         */
        export interface ClusterClassSpecWorkers {
            /**
             * MachineDeployments is a list of machine deployment classes that can be used to create a set of worker nodes.
             */
            machineDeployments?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeployments[];
        }

        /**
         * MachineDeploymentClass serves as a template to define a set of worker nodes of the cluster provisioned using the `ClusterClass`.
         */
        export interface ClusterClassSpecWorkersMachineDeployments {
            /**
             * Class denotes a type of worker node present in the cluster, this name MUST be unique within a ClusterClass and can be referenced in the Cluster to create a managed MachineDeployment.
             */
            class: string;
            /**
             * FailureDomain is the failure domain the machines will be created in. Must match a key in the FailureDomains map stored on the cluster object. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            failureDomain?: string;
            /**
             * MachineHealthCheck defines a MachineHealthCheck for this MachineDeploymentClass.
             */
            machineHealthCheck?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheck;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready) NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            minReadySeconds?: number;
            /**
             * NamingStrategy allows changing the naming pattern used when creating the MachineDeployment.
             */
            namingStrategy?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsNamingStrategy;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout` NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * The deployment strategy to use to replace existing machines with new ones. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            strategy?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsStrategy;
            /**
             * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
             */
            template: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplate;
        }

        /**
         * MachineHealthCheck defines a MachineHealthCheck for this MachineDeploymentClass.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheck {
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: number | string;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: string;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckRemediationTemplate;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditions[];
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: string;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckRemediationTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditions {
            status: string;
            timeout: string;
            type: string;
        }

        /**
         * NamingStrategy allows changing the naming pattern used when creating the MachineDeployment.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsNamingStrategy {
            /**
             * Template defines the template to use for generating the name of the MachineDeployment object. If not defined, it will fallback to `{{ .cluster.name }}-{{ .machineDeployment.topologyName }}-{{ .random }}`. If the templated string exceeds 63 characters, it will be trimmed to 58 characters and will get concatenated with a random suffix of length 5. The templating mechanism provides the following arguments: * `.cluster.name`: The name of the cluster object. * `.random`: A random alphanumeric string, without vowels, of length 5. * `.machineDeployment.topologyName`: The name of the MachineDeployment topology (Cluster.spec.topology.workers.machineDeployments[].name).
             */
            template?: string;
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsStrategy {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsStrategyRollingUpdate;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsStrategyRollingUpdate {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: string;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: number | string;
        }

        /**
         * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplate {
            /**
             * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
             */
            bootstrap: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrap;
            /**
             * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
             */
            infrastructure: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructure;
            /**
             * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
             */
            metadata?: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateMetadata;
        }

        /**
         * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrap {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructure {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: outputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRef;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * ClusterClassStatus defines the observed state of the ClusterClass.
         */
        export interface ClusterClassStatus {
            /**
             * Conditions defines current observed state of the ClusterClass.
             */
            conditions?: outputs.cluster.v1beta1.ClusterClassStatusConditions[];
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Variables is a list of ClusterClassStatusVariable that are defined for the ClusterClass.
             */
            variables?: outputs.cluster.v1beta1.ClusterClassStatusVariables[];
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterClassStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * ClusterClassStatusVariable defines a variable which appears in the status of a ClusterClass.
         */
        export interface ClusterClassStatusVariables {
            /**
             * Definitions is a list of definitions for a variable.
             */
            definitions: outputs.cluster.v1beta1.ClusterClassStatusVariablesDefinitions[];
            /**
             * DefinitionsConflict specifies whether or not there are conflicting definitions for a single variable name.
             */
            definitionsConflict?: boolean;
            /**
             * Name is the name of the variable.
             */
            name: string;
        }

        /**
         * ClusterClassStatusVariableDefinition defines a variable which appears in the status of a ClusterClass.
         */
        export interface ClusterClassStatusVariablesDefinitions {
            /**
             * From specifies the origin of the variable definition. This will be `inline` for variables defined in the ClusterClass or the name of a patch defined in the ClusterClass for variables discovered from a DiscoverVariables runtime extensions.
             */
            from: string;
            /**
             * Required specifies if the variable is required. Note: this applies to the variable as a whole and thus the top-level object defined in the schema. If nested fields are required, this will be specified inside the schema.
             */
            required: boolean;
            /**
             * Schema defines the schema of the variable.
             */
            schema: outputs.cluster.v1beta1.ClusterClassStatusVariablesDefinitionsSchema;
        }

        /**
         * Schema defines the schema of the variable.
         */
        export interface ClusterClassStatusVariablesDefinitionsSchema {
            /**
             * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
             */
            openAPIV3Schema: outputs.cluster.v1beta1.ClusterClassStatusVariablesDefinitionsSchemaOpenAPIV3Schema;
        }

        /**
         * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
         */
        export interface ClusterClassStatusVariablesDefinitionsSchemaOpenAPIV3Schema {
            /**
             * AdditionalProperties specifies the schema of values in a map (keys are always strings). NOTE: Can only be set if type is object. NOTE: AdditionalProperties is mutually exclusive with Properties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            additionalProperties?: {[key: string]: any};
            /**
             * Default is the default value of the variable. NOTE: Can be set for all types.
             */
            default?: {[key: string]: any};
            /**
             * Description is a human-readable description of this variable.
             */
            description?: string;
            /**
             * Enum is the list of valid values of the variable. NOTE: Can be set for all types.
             */
            enum?: {[key: string]: any}[];
            /**
             * Example is an example for this variable.
             */
            example?: {[key: string]: any};
            /**
             * ExclusiveMaximum specifies if the Maximum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMaximum?: boolean;
            /**
             * ExclusiveMinimum specifies if the Minimum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMinimum?: boolean;
            /**
             * Format is an OpenAPI v3 format string. Unknown formats are ignored. For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we're currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go NOTE: Can only be set if type is string.
             */
            format?: string;
            /**
             * Items specifies fields of an array. NOTE: Can only be set if type is array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            items?: {[key: string]: any};
            /**
             * MaxItems is the max length of an array variable. NOTE: Can only be set if type is array.
             */
            maxItems?: number;
            /**
             * MaxLength is the max length of a string variable. NOTE: Can only be set if type is string.
             */
            maxLength?: number;
            /**
             * Maximum is the maximum of an integer or number variable. If ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum. If ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum. NOTE: Can only be set if type is integer or number.
             */
            maximum?: number;
            /**
             * MinItems is the min length of an array variable. NOTE: Can only be set if type is array.
             */
            minItems?: number;
            /**
             * MinLength is the min length of a string variable. NOTE: Can only be set if type is string.
             */
            minLength?: number;
            /**
             * Minimum is the minimum of an integer or number variable. If ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum. If ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum. NOTE: Can only be set if type is integer or number.
             */
            minimum?: number;
            /**
             * Pattern is the regex which a string variable must match. NOTE: Can only be set if type is string.
             */
            pattern?: string;
            /**
             * Properties specifies fields of an object. NOTE: Can only be set if type is object. NOTE: Properties is mutually exclusive with AdditionalProperties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            properties?: {[key: string]: any};
            /**
             * Required specifies which fields of an object are required. NOTE: Can only be set if type is object.
             */
            required?: string[];
            /**
             * Type is the type of the variable. Valid values are: object, array, string, integer, number or boolean.
             */
            type: string;
            /**
             * UniqueItems specifies if items in an array must be unique. NOTE: Can only be set if type is array.
             */
            uniqueItems?: boolean;
            /**
             * XPreserveUnknownFields allows setting fields in a variable object which are not defined in the variable schema. This affects fields recursively, except if nested properties or additionalProperties are specified in the schema.
             */
            'x-kubernetes-preserve-unknown-fields'?: boolean;
        }

        /**
         * ClusterSpec defines the desired state of Cluster.
         */
        export interface ClusterSpec {
            /**
             * Cluster network configuration.
             */
            clusterNetwork?: outputs.cluster.v1beta1.ClusterSpecClusterNetwork;
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: outputs.cluster.v1beta1.ClusterSpecControlPlaneEndpoint;
            /**
             * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
             */
            controlPlaneRef?: outputs.cluster.v1beta1.ClusterSpecControlPlaneRef;
            /**
             * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
             */
            infrastructureRef?: outputs.cluster.v1beta1.ClusterSpecInfrastructureRef;
            /**
             * Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
             */
            paused?: boolean;
            /**
             * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
             */
            topology?: outputs.cluster.v1beta1.ClusterSpecTopology;
        }

        /**
         * Cluster network configuration.
         */
        export interface ClusterSpecClusterNetwork {
            /**
             * APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
             */
            apiServerPort?: number;
            /**
             * The network ranges from which Pod networks are allocated.
             */
            pods?: outputs.cluster.v1beta1.ClusterSpecClusterNetworkPods;
            /**
             * Domain name for services.
             */
            serviceDomain?: string;
            /**
             * The network ranges from which service VIPs are allocated.
             */
            services?: outputs.cluster.v1beta1.ClusterSpecClusterNetworkServices;
        }

        /**
         * The network ranges from which Pod networks are allocated.
         */
        export interface ClusterSpecClusterNetworkPods {
            cidrBlocks: string[];
        }

        /**
         * The network ranges from which service VIPs are allocated.
         */
        export interface ClusterSpecClusterNetworkServices {
            cidrBlocks: string[];
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ClusterSpecControlPlaneEndpoint {
            /**
             * The hostname on which the API server is serving.
             */
            host: string;
            /**
             * The port on which the API server is serving.
             */
            port: number;
        }

        /**
         * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
         */
        export interface ClusterSpecControlPlaneRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
         */
        export interface ClusterSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
         */
        export interface ClusterSpecTopology {
            /**
             * The name of the ClusterClass object to create the topology.
             */
            class: string;
            /**
             * ControlPlane describes the cluster control plane.
             */
            controlPlane?: outputs.cluster.v1beta1.ClusterSpecTopologyControlPlane;
            /**
             * RolloutAfter performs a rollout of the entire cluster one component at a time, control plane first and then machine deployments. 
             *  Deprecated: This field has no function and is going to be removed in the next apiVersion.
             */
            rolloutAfter?: string;
            /**
             * Variables can be used to customize the Cluster through patches. They must comply to the corresponding VariableClasses defined in the ClusterClass.
             */
            variables?: outputs.cluster.v1beta1.ClusterSpecTopologyVariables[];
            /**
             * The Kubernetes version of the cluster.
             */
            version: string;
            /**
             * Workers encapsulates the different constructs that form the worker nodes for the cluster.
             */
            workers?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkers;
        }

        /**
         * ControlPlane describes the cluster control plane.
         */
        export interface ClusterSpecTopologyControlPlane {
            /**
             * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this control plane.
             */
            machineHealthCheck?: outputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMachineHealthCheck;
            /**
             * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
             */
            metadata?: outputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMetadata;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * Replicas is the number of control plane nodes. If the value is nil, the ControlPlane object is created without the number of Replicas and it's assumed that the control plane controller does not implement support for this field. When specified against a control plane provider that lacks support for this field, this value will be ignored.
             */
            replicas?: number;
        }

        /**
         * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this control plane.
         */
        export interface ClusterSpecTopologyControlPlaneMachineHealthCheck {
            /**
             * Enable controls if a MachineHealthCheck should be created for the target machines. 
             *  If false: No MachineHealthCheck will be created. 
             *  If not set(default): A MachineHealthCheck will be created if it is defined here or in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created. 
             *  If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will block if `enable` is true and no MachineHealthCheck definition is available.
             */
            enable?: boolean;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: number | string;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: string;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: outputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplate;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: outputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditions[];
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: string;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditions {
            status: string;
            timeout: string;
            type: string;
        }

        /**
         * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
         */
        export interface ClusterSpecTopologyControlPlaneMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a Variable definition in the ClusterClass `status` variables.
         */
        export interface ClusterSpecTopologyVariables {
            /**
             * DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the definition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass `.spec.patches` where the patch is external and provides external variables. This field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`
             */
            definitionFrom?: string;
            /**
             * Name of the variable.
             */
            name: string;
            /**
             * Value of the variable. Note: the value will be validated against the schema of the corresponding ClusterClassVariable from the ClusterClass. Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools, i.e. it is not possible to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
             */
            value: {[key: string]: any};
        }

        /**
         * Workers encapsulates the different constructs that form the worker nodes for the cluster.
         */
        export interface ClusterSpecTopologyWorkers {
            /**
             * MachineDeployments is a list of machine deployments in the cluster.
             */
            machineDeployments?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeployments[];
        }

        /**
         * MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology. This set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.
         */
        export interface ClusterSpecTopologyWorkersMachineDeployments {
            /**
             * Class is the name of the MachineDeploymentClass used to create the set of worker nodes. This should match one of the deployment classes defined in the ClusterClass object mentioned in the `Cluster.Spec.Class` field.
             */
            class: string;
            /**
             * FailureDomain is the failure domain the machines will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.
             */
            machineHealthCheck?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheck;
            /**
             * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
             */
            metadata?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMetadata;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * Name is the unique identifier for this MachineDeploymentTopology. The value is used with other unique identifiers to create a MachineDeployment's Name (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length, the values are hashed together.
             */
            name: string;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * Replicas is the number of worker nodes belonging to this set. If the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to 1) and it's assumed that an external entity (like cluster autoscaler) is responsible for the management of this value.
             */
            replicas?: number;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsStrategy;
            /**
             * Variables can be used to customize the MachineDeployment through patches.
             */
            variables?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsVariables;
        }

        /**
         * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheck {
            /**
             * Enable controls if a MachineHealthCheck should be created for the target machines. 
             *  If false: No MachineHealthCheck will be created. 
             *  If not set(default): A MachineHealthCheck will be created if it is defined here or in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created. 
             *  If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will block if `enable` is true and no MachineHealthCheck definition is available.
             */
            enable?: boolean;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: number | string;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: string;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckRemediationTemplate;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditions[];
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: string;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckRemediationTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditions {
            status: string;
            timeout: string;
            type: string;
        }

        /**
         * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsStrategy {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsStrategyRollingUpdate;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsStrategyRollingUpdate {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: string;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: number | string;
        }

        /**
         * Variables can be used to customize the MachineDeployment through patches.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsVariables {
            /**
             * Overrides can be used to override Cluster level variables.
             */
            overrides?: outputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsVariablesOverrides[];
        }

        /**
         * ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a Variable definition in the ClusterClass `status` variables.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsVariablesOverrides {
            /**
             * DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the definition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass `.spec.patches` where the patch is external and provides external variables. This field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`
             */
            definitionFrom?: string;
            /**
             * Name of the variable.
             */
            name: string;
            /**
             * Value of the variable. Note: the value will be validated against the schema of the corresponding ClusterClassVariable from the ClusterClass. Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools, i.e. it is not possible to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
             */
            value: {[key: string]: any};
        }

        /**
         * ClusterStatus defines the observed state of Cluster.
         */
        export interface ClusterStatus {
            /**
             * Conditions defines current service state of the cluster.
             */
            conditions?: outputs.cluster.v1beta1.ClusterStatusConditions[];
            /**
             * ControlPlaneReady defines if the control plane is ready.
             */
            controlPlaneReady?: boolean;
            /**
             * FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
             */
            failureDomains?: {[key: string]: outputs.cluster.v1beta1.ClusterStatusFailureDomains};
            /**
             * FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: string;
            /**
             * FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ClusterStatusFailureDomains {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: {[key: string]: string};
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: boolean;
        }

        /**
         * MachineDeploymentSpec defines the desired state of MachineDeployment.
         */
        export interface MachineDeploymentSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * MinReadySeconds is the minimum number of seconds for which a Node for a newly created machine should be ready before considering the replica available. Defaults to 0 (machine will be considered available as soon as the Node is ready)
             */
            minReadySeconds?: number;
            /**
             * Indicates that the deployment is paused.
             */
            paused?: boolean;
            /**
             * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
             */
            progressDeadlineSeconds?: number;
            /**
             * Number of desired machines. This is a pointer to distinguish between explicit zero and not specified. 
             *  Defaults to: * if the Kubernetes autoscaler min size and max size annotations are set: - if it's a new MachineDeployment, use min size - if the replicas field of the old MachineDeployment is < min size, use min size - if the replicas field of the old MachineDeployment is > max size, use max size - if the replicas field of the old MachineDeployment is in the (min size, max size) range, keep the value from the oldMD * otherwise use 1 Note: Defaulting will be run whenever the replicas field is not set: * A new MachineDeployment is created with replicas not set. * On an existing MachineDeployment the replicas field was first set and is now unset. Those cases are especially relevant for the following Kubernetes autoscaler use cases: * A new MachineDeployment is created and replicas should be managed by the autoscaler * An existing MachineDeployment which initially wasn't controlled by the autoscaler should be later controlled by the autoscaler
             */
            replicas?: number;
            /**
             * The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
             */
            revisionHistoryLimit?: number;
            /**
             * RolloutAfter is a field to indicate a rollout should be performed after the specified time even if no changes have been made to the MachineDeployment. Example: In the YAML the time can be specified in the RFC3339 format. To specify the rolloutAfter target as March 9, 2023, at 9 am UTC use "2023-03-09T09:00:00Z".
             */
            rolloutAfter?: string;
            /**
             * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
             */
            selector: outputs.cluster.v1beta1.MachineDeploymentSpecSelector;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: outputs.cluster.v1beta1.MachineDeploymentSpecStrategy;
            /**
             * Template describes the machines that will be created.
             */
            template: outputs.cluster.v1beta1.MachineDeploymentSpecTemplate;
        }

        /**
         * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
         */
        export interface MachineDeploymentSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1beta1.MachineDeploymentSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineDeploymentSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface MachineDeploymentSpecStrategy {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: outputs.cluster.v1beta1.MachineDeploymentSpecStrategyRollingUpdate;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachineDeploymentSpecStrategyRollingUpdate {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: string;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: number | string;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachineDeploymentSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1beta1.MachineDeploymentSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineDeploymentSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineDeploymentSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineDeploymentSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineDeploymentStatus defines the observed state of MachineDeployment.
         */
        export interface MachineDeploymentStatus {
            /**
             * Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: number;
            /**
             * Conditions defines current service state of the MachineDeployment.
             */
            conditions?: outputs.cluster.v1beta1.MachineDeploymentStatusConditions[];
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
             */
            phase?: string;
            /**
             * Total number of ready machines targeted by this deployment.
             */
            readyReplicas?: number;
            /**
             * Total number of non-terminated machines targeted by this deployment (their labels match the selector).
             */
            replicas?: number;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: string;
            /**
             * Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
             */
            unavailableReplicas?: number;
            /**
             * Total number of non-terminated machines targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineDeploymentStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * Specification of machine health check policy
         */
        export interface MachineHealthCheckSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: number | string;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If not set, this value is defaulted to 10 minutes. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: string;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: outputs.cluster.v1beta1.MachineHealthCheckSpecRemediationTemplate;
            /**
             * Label selector to match machines whose health will be exercised
             */
            selector: outputs.cluster.v1beta1.MachineHealthCheckSpecSelector;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions: outputs.cluster.v1beta1.MachineHealthCheckSpecUnhealthyConditions[];
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: string;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface MachineHealthCheckSpecRemediationTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Label selector to match machines whose health will be exercised
         */
        export interface MachineHealthCheckSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1beta1.MachineHealthCheckSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineHealthCheckSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface MachineHealthCheckSpecUnhealthyConditions {
            status: string;
            timeout: string;
            type: string;
        }

        /**
         * Most recently observed status of MachineHealthCheck resource
         */
        export interface MachineHealthCheckStatus {
            /**
             * Conditions defines current service state of the MachineHealthCheck.
             */
            conditions?: outputs.cluster.v1beta1.MachineHealthCheckStatusConditions[];
            /**
             * total number of healthy machines counted by this machine health check
             */
            currentHealthy?: number;
            /**
             * total number of machines counted by this machine health check
             */
            expectedMachines?: number;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
             */
            remediationsAllowed?: number;
            /**
             * Targets shows the current list of machines the machine health check is watching
             */
            targets?: string[];
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineHealthCheckStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * MachinePoolSpec defines the desired state of MachinePool.
         */
        export interface MachinePoolSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomains is the list of failure domains this MachinePool should be attached to.
             */
            failureDomains?: string[];
            /**
             * Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready) NOTE: No logic is implemented for this field and it currently has no behaviour.
             */
            minReadySeconds?: number;
            /**
             * ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
             */
            providerIDList?: string[];
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: number;
            /**
             * Template describes the machines that will be created.
             */
            template: outputs.cluster.v1beta1.MachinePoolSpecTemplate;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachinePoolSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1beta1.MachinePoolSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1beta1.MachinePoolSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachinePoolSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachinePoolSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1beta1.MachinePoolSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1beta1.MachinePoolSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachinePoolSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1beta1.MachinePoolSpecTemplateSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachinePoolSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachinePoolStatus defines the observed state of MachinePool.
         */
        export interface MachinePoolStatus {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
             */
            availableReplicas?: number;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: boolean;
            /**
             * Conditions define the current service state of the MachinePool.
             */
            conditions?: outputs.cluster.v1beta1.MachinePoolStatusConditions[];
            /**
             * FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: string;
            /**
             * FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * NodeRefs will point to the corresponding Nodes if it they exist.
             */
            nodeRefs?: outputs.cluster.v1beta1.MachinePoolStatusNodeRefs[];
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
            /**
             * The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: number;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: number;
            /**
             * Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
             */
            unavailableReplicas?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachinePoolStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MachinePoolStatusNodeRefs {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineSetSpec defines the desired state of MachineSet.
         */
        export interface MachineSetSpec {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
             */
            deletePolicy?: string;
            /**
             * MinReadySeconds is the minimum number of seconds for which a Node for a newly created machine should be ready before considering the replica available. Defaults to 0 (machine will be considered available as soon as the Node is ready)
             */
            minReadySeconds?: number;
            /**
             * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
             */
            replicas?: number;
            /**
             * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.cluster.v1beta1.MachineSetSpecSelector;
            /**
             * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
             */
            template?: outputs.cluster.v1beta1.MachineSetSpecTemplate;
        }
        /**
         * machineSetSpecProvideDefaults sets the appropriate defaults for MachineSetSpec
         */
        export function machineSetSpecProvideDefaults(val: MachineSetSpec): MachineSetSpec {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface MachineSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.cluster.v1beta1.MachineSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
         */
        export interface MachineSetSpecTemplate {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: outputs.cluster.v1beta1.MachineSetSpecTemplateMetadata;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: outputs.cluster.v1beta1.MachineSetSpecTemplateSpec;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineSetSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineSetSpecTemplateSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1beta1.MachineSetSpecTemplateSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1beta1.MachineSetSpecTemplateSpecInfrastructureRef;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSetSpecTemplateSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1beta1.MachineSetSpecTemplateSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSetSpecTemplateSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSetSpecTemplateSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineSetStatus defines the observed state of MachineSet.
         */
        export interface MachineSetStatus {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
             */
            availableReplicas?: number;
            /**
             * Conditions defines current service state of the MachineSet.
             */
            conditions?: outputs.cluster.v1beta1.MachineSetStatusConditions[];
            failureMessage?: string;
            /**
             * In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption. 
             *  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
             */
            failureReason?: string;
            /**
             * The number of replicas that have labels matching the labels of the machine template of the MachineSet.
             */
            fullyLabeledReplicas?: number;
            /**
             * ObservedGeneration reflects the generation of the most recently observed MachineSet.
             */
            observedGeneration?: number;
            /**
             * The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: number;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: number;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * MachineSpec defines the desired state of Machine.
         */
        export interface MachineSpec {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: outputs.cluster.v1beta1.MachineSpecBootstrap;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: string;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: string;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: outputs.cluster.v1beta1.MachineSpecInfrastructureRef;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: string;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: string;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: string;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: string;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: string;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSpecBootstrap {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: outputs.cluster.v1beta1.MachineSpecBootstrapConfigRef;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: string;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSpecBootstrapConfigRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSpecInfrastructureRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MachineStatus defines the observed state of Machine.
         */
        export interface MachineStatus {
            /**
             * Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
             */
            addresses?: outputs.cluster.v1beta1.MachineStatusAddresses[];
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: boolean;
            /**
             * CertificatesExpiryDate is the expiry date of the machine certificates. This value is only set for control plane machines.
             */
            certificatesExpiryDate?: string;
            /**
             * Conditions defines current service state of the Machine.
             */
            conditions?: outputs.cluster.v1beta1.MachineStatusConditions[];
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: string;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: string;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: boolean;
            /**
             * LastUpdated identifies when the phase of the Machine last transitioned.
             */
            lastUpdated?: string;
            /**
             * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
             */
            nodeInfo?: outputs.cluster.v1beta1.MachineStatusNodeInfo;
            /**
             * NodeRef will point to the corresponding Node if it exists.
             */
            nodeRef?: outputs.cluster.v1beta1.MachineStatusNodeRef;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: string;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MachineStatusAddresses {
            /**
             * The machine address.
             */
            address: string;
            /**
             * Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
             */
            type: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
         */
        export interface MachineStatusNodeInfo {
            /**
             * The Architecture reported by the node
             */
            architecture: string;
            /**
             * Boot ID reported by the node.
             */
            bootID: string;
            /**
             * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
             */
            containerRuntimeVersion: string;
            /**
             * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
             */
            kernelVersion: string;
            /**
             * KubeProxy Version reported by the node.
             */
            kubeProxyVersion: string;
            /**
             * Kubelet Version reported by the node.
             */
            kubeletVersion: string;
            /**
             * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
             */
            machineID: string;
            /**
             * The Operating System reported by the node
             */
            operatingSystem: string;
            /**
             * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
             */
            osImage: string;
            /**
             * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
             */
            systemUUID: string;
        }

        /**
         * NodeRef will point to the corresponding Node if it exists.
         */
        export interface MachineStatusNodeRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

    }
}

export namespace controlplane {
    export namespace v1alpha3 {
        /**
         * TalosControlPlaneSpec defines the desired state of TalosControlPlane
         */
        export interface TalosControlPlaneSpec {
            /**
             * ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
             */
            controlPlaneConfig: outputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfig;
            /**
             * InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureTemplate: outputs.controlplane.v1alpha3.TalosControlPlaneSpecInfrastructureTemplate;
            /**
             * Number of desired machines. Defaults to 1. When stacked etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members). This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: number;
            /**
             * The RolloutStrategy to use to replace control plane machines with new ones.
             */
            rolloutStrategy?: outputs.controlplane.v1alpha3.TalosControlPlaneSpecRolloutStrategy;
            /**
             * Version defines the desired Kubernetes version.
             */
            version: string;
        }
        /**
         * talosControlPlaneSpecProvideDefaults sets the appropriate defaults for TalosControlPlaneSpec
         */
        export function talosControlPlaneSpecProvideDefaults(val: TalosControlPlaneSpec): TalosControlPlaneSpec {
            return {
                ...val,
                rolloutStrategy: (val.rolloutStrategy ? outputs.controlplane.v1alpha3.talosControlPlaneSpecRolloutStrategyProvideDefaults(val.rolloutStrategy) : undefined),
            };
        }

        /**
         * ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
         */
        export interface TalosControlPlaneSpecControlPlaneConfig {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            controlplane: outputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigControlplane;
            /**
             * Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
             */
            init?: outputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigInit;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosControlPlaneSpecControlPlaneConfigControlplane {
            configPatches?: outputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatches[];
            data?: string;
            generateType: string;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: outputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigControlplaneHostname;
            talosVersion?: string;
        }

        export interface TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosControlPlaneSpecControlPlaneConfigControlplaneHostname {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: string;
        }

        /**
         * Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
         */
        export interface TalosControlPlaneSpecControlPlaneConfigInit {
            configPatches?: outputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigInitConfigPatches[];
            data?: string;
            generateType: string;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: outputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigInitHostname;
            talosVersion?: string;
        }

        export interface TalosControlPlaneSpecControlPlaneConfigInitConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosControlPlaneSpecControlPlaneConfigInitHostname {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: string;
        }

        /**
         * InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface TalosControlPlaneSpecInfrastructureTemplate {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * The RolloutStrategy to use to replace control plane machines with new ones.
         */
        export interface TalosControlPlaneSpecRolloutStrategy {
            /**
             * Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
             */
            rollingUpdate?: outputs.controlplane.v1alpha3.TalosControlPlaneSpecRolloutStrategyRollingUpdate;
            /**
             * Change rollout strategy. 
             *  Supported strategies: * "RollingUpdate". * "OnDelete" 
             *  Default is RollingUpdate.
             */
            type?: string;
        }
        /**
         * talosControlPlaneSpecRolloutStrategyProvideDefaults sets the appropriate defaults for TalosControlPlaneSpecRolloutStrategy
         */
        export function talosControlPlaneSpecRolloutStrategyProvideDefaults(val: TalosControlPlaneSpecRolloutStrategy): TalosControlPlaneSpecRolloutStrategy {
            return {
                ...val,
                rollingUpdate: (val.rollingUpdate ? outputs.controlplane.v1alpha3.talosControlPlaneSpecRolloutStrategyRollingUpdateProvideDefaults(val.rollingUpdate) : undefined),
                type: (val.type) ?? "RollingUpdate",
            };
        }

        /**
         * Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
         */
        export interface TalosControlPlaneSpecRolloutStrategyRollingUpdate {
            /**
             * The maximum number of control planes that can be scheduled above or under the desired number of control planes. Value can be an absolute number 1 or 0. Defaults to 1. Example: when this is set to 1, the control plane can be scaled up immediately when the rolling update starts.
             */
            maxSurge?: number | string;
        }
        /**
         * talosControlPlaneSpecRolloutStrategyRollingUpdateProvideDefaults sets the appropriate defaults for TalosControlPlaneSpecRolloutStrategyRollingUpdate
         */
        export function talosControlPlaneSpecRolloutStrategyRollingUpdateProvideDefaults(val: TalosControlPlaneSpecRolloutStrategyRollingUpdate): TalosControlPlaneSpecRolloutStrategyRollingUpdate {
            return {
                ...val,
                maxSurge: (val.maxSurge) ?? 1,
            };
        }

        /**
         * TalosControlPlaneStatus defines the observed state of TalosControlPlane
         */
        export interface TalosControlPlaneStatus {
            /**
             * Bootstrapped denotes whether any nodes received bootstrap request which is required to start etcd and Kubernetes components in Talos.
             */
            bootstrapped?: boolean;
            /**
             * Conditions defines current service state of the KubeadmControlPlane.
             */
            conditions?: outputs.controlplane.v1alpha3.TalosControlPlaneStatusConditions[];
            /**
             * ErrorMessage indicates that there is a terminal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: string;
            /**
             * FailureReason indicates that there is a terminal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: string;
            /**
             * Initialized denotes whether or not the control plane has the uploaded talos-config configmap.
             */
            initialized?: boolean;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: number;
            /**
             * Ready denotes that the TalosControlPlane API Server is ready to receive requests.
             */
            ready?: boolean;
            /**
             * Total number of fully running and ready control plane machines.
             */
            readyReplicas?: number;
            /**
             * Total number of non-terminated machines targeted by this control plane (their labels match the selector).
             */
            replicas?: number;
            /**
             * Selector is the label selector in string format to avoid introspection by clients, and is used to provide the CRD-based integration for the scale subresource and additional integrations for things like kubectl describe.. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: string;
            /**
             * Total number of unavailable machines targeted by this control plane. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet ready or machines that still have not been created.
             */
            unavailableReplicas?: number;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface TalosControlPlaneStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

    }
}

export namespace infrastructure {
    export namespace v1alpha2 {
        /**
         * MetalClusterSpec defines the desired state of MetalCluster.
         */
        export interface MetalClusterSpec {
            apiEndpoints?: outputs.infrastructure.v1alpha2.MetalClusterSpecApiEndpoints[];
        }

        export interface MetalClusterSpecApiEndpoints {
            /**
             * The hostname on which the API server is serving.
             */
            host: string;
            /**
             * The port on which the API server is serving.
             */
            port: number;
        }

        /**
         * MetalClusterStatus defines the observed state of MetalCluster.
         */
        export interface MetalClusterStatus {
            /**
             * APIEndpoints represents the endpoints to communicate with the control plane.
             */
            apiEndpoints?: outputs.infrastructure.v1alpha2.MetalClusterStatusApiEndpoints[];
            ready: boolean;
        }

        export interface MetalClusterStatusApiEndpoints {
            /**
             * The hostname on which the API server is serving.
             */
            host: string;
            /**
             * The port on which the API server is serving.
             */
            port: number;
        }

        /**
         * MetalMachineSpec defines the desired state of MetalMachine.
         */
        export interface MetalMachineSpec {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: string;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: outputs.infrastructure.v1alpha2.MetalMachineSpecServerRef;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MetalMachineStatus defines the observed state of MetalMachine.
         */
        export interface MetalMachineStatus {
            /**
             * ErrorMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            errorMessage?: string;
            /**
             * ErrorReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            errorReason?: string;
            ready: boolean;
        }

        /**
         * MetalMachineTemplateSpec defines the desired state of MetalMachineTemplate.
         */
        export interface MetalMachineTemplateSpec {
            template: outputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplate;
        }

        export interface MetalMachineTemplateSpecTemplate {
            /**
             * Spec is the specification of the desired behavior of the machine.
             */
            spec: outputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateSpec;
        }

        /**
         * Spec is the specification of the desired behavior of the machine.
         */
        export interface MetalMachineTemplateSpecTemplateSpec {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: string;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: outputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateSpecServerRef;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

    }

    export namespace v1alpha3 {
        /**
         * MetalClusterSpec defines the desired state of MetalCluster.
         */
        export interface MetalClusterSpec {
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: outputs.infrastructure.v1alpha3.MetalClusterSpecControlPlaneEndpoint;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface MetalClusterSpecControlPlaneEndpoint {
            /**
             * The hostname on which the API server is serving.
             */
            host: string;
            /**
             * The port on which the API server is serving.
             */
            port: number;
        }

        /**
         * MetalClusterStatus defines the observed state of MetalCluster.
         */
        export interface MetalClusterStatus {
            ready: boolean;
        }

        /**
         * MetalMachineSpec defines the desired state of MetalMachine.
         */
        export interface MetalMachineSpec {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: string;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: outputs.infrastructure.v1alpha3.MetalMachineSpecServerClassRef;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: outputs.infrastructure.v1alpha3.MetalMachineSpecServerRef;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerClassRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * MetalMachineStatus defines the observed state of MetalMachine.
         */
        export interface MetalMachineStatus {
            /**
             * Addresses contains the Metal machine associated addresses.
             */
            addresses?: outputs.infrastructure.v1alpha3.MetalMachineStatusAddresses[];
            /**
             * Conditions defines current state of the MetalMachine.
             */
            conditions?: outputs.infrastructure.v1alpha3.MetalMachineStatusConditions[];
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: string;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: string;
            ready?: boolean;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MetalMachineStatusAddresses {
            /**
             * The machine address.
             */
            address: string;
            /**
             * Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
             */
            type: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MetalMachineStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * MetalMachineTemplateSpec defines the desired state of MetalMachineTemplate.
         */
        export interface MetalMachineTemplateSpec {
            template: outputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplate;
        }

        export interface MetalMachineTemplateSpecTemplate {
            /**
             * Spec is the specification of the desired behavior of the machine.
             */
            spec: outputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpec;
        }

        /**
         * Spec is the specification of the desired behavior of the machine.
         */
        export interface MetalMachineTemplateSpecTemplateSpec {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: string;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: outputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecServerClassRef;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: outputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecServerRef;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerClassRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * ServerBindingSpec defines the spec of the ServerBinding object.
         */
        export interface ServerBindingSpec {
            /**
             * Addresses describes node addresses for the server.
             */
            addresses?: string[];
            /**
             * Hostname describes node hostname for the server.
             */
            hostname?: string;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            metalMachineRef: outputs.infrastructure.v1alpha3.ServerBindingSpecMetalMachineRef;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: outputs.infrastructure.v1alpha3.ServerBindingSpecServerClassRef;
            /**
             * SideroLink describes state of the SideroLink tunnel.
             */
            siderolink?: outputs.infrastructure.v1alpha3.ServerBindingSpecSiderolink;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerBindingSpecMetalMachineRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerBindingSpecServerClassRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * SideroLink describes state of the SideroLink tunnel.
         */
        export interface ServerBindingSpecSiderolink {
            /**
             * NodeAddress is the tunnel address of the node.
             */
            address: string;
            /**
             * NodePublicKey is the Wireguard public key of the node.
             */
            publicKey: string;
        }

        /**
         * ServerBindingState defines the observed state of ServerBinding.
         */
        export interface ServerBindingStatus {
            /**
             * Conditions defines current state of the ServerBinding.
             */
            conditions?: outputs.infrastructure.v1alpha3.ServerBindingStatusConditions[];
            /**
             * Ready is true when matching server is found.
             */
            ready?: boolean;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerBindingStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

    }

    export namespace v1beta1 {
        /**
         * ProxmoxClusterSpec defines the desired state of ProxmoxCluster
         */
        export interface ProxmoxClusterSpec {
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: outputs.infrastructure.v1beta1.ProxmoxClusterSpecControlPlaneEndpoint;
            /**
             * ServerRef is used for configuring Proxmox client
             */
            serverRef: outputs.infrastructure.v1beta1.ProxmoxClusterSpecServerRef;
            /**
             * storage is used for storing cloud init snippet
             */
            storage?: outputs.infrastructure.v1beta1.ProxmoxClusterSpecStorage;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ProxmoxClusterSpecControlPlaneEndpoint {
            /**
             * The hostname on which the API server is serving.
             */
            host: string;
            /**
             * The port on which the API server is serving.
             */
            port: number;
        }

        /**
         * ServerRef is used for configuring Proxmox client
         */
        export interface ProxmoxClusterSpecServerRef {
            /**
             * endpoint is the address of the Proxmox-VE REST API endpoint.
             */
            endpoint: string;
            /**
             * SecretRef is a reference for secret which contains proxmox login secrets
             */
            secretRef: outputs.infrastructure.v1beta1.ProxmoxClusterSpecServerRefSecretRef;
        }

        /**
         * SecretRef is a reference for secret which contains proxmox login secrets
         */
        export interface ProxmoxClusterSpecServerRefSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
        }

        /**
         * storage is used for storing cloud init snippet
         */
        export interface ProxmoxClusterSpecStorage {
            name?: string;
            path?: string;
        }

        /**
         * ProxmoxClusterStatus defines the observed state of ProxmoxCluster
         */
        export interface ProxmoxClusterStatus {
            /**
             * Conditions
             */
            conditions?: outputs.infrastructure.v1beta1.ProxmoxClusterStatusConditions[];
            /**
             * FailureDomains
             */
            failureDomains?: {[key: string]: outputs.infrastructure.v1beta1.ProxmoxClusterStatusFailureDomains};
            /**
             * Ready
             */
            ready: boolean;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ProxmoxClusterStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ProxmoxClusterStatusFailureDomains {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: {[key: string]: string};
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: boolean;
        }

        /**
         * ProxmoxMachineSpec defines the desired state of ProxmoxMachine
         */
        export interface ProxmoxMachineSpec {
            /**
             * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
             */
            cloudInit?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInit;
            /**
             * FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
             */
            failureDomain?: string;
            /**
             * Hardware
             */
            hardware?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecHardware;
            /**
             * Image is the image to be provisioned
             */
            image: outputs.infrastructure.v1beta1.ProxmoxMachineSpecImage;
            /**
             * Network
             */
            network?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecNetwork;
            /**
             * Node is proxmox node hosting vm instance which used for ProxmoxMachine
             */
            node?: string;
            /**
             * Options for QEMU instance
             */
            options?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecOptions;
            /**
             * ProviderID
             */
            providerID?: string;
            /**
             * Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
             */
            storage?: string;
            /**
             * VMID is proxmox qemu's id
             */
            vmID?: number;
        }
        /**
         * proxmoxMachineSpecProvideDefaults sets the appropriate defaults for ProxmoxMachineSpec
         */
        export function proxmoxMachineSpecProvideDefaults(val: ProxmoxMachineSpec): ProxmoxMachineSpec {
            return {
                ...val,
                hardware: (val.hardware ? outputs.infrastructure.v1beta1.proxmoxMachineSpecHardwareProvideDefaults(val.hardware) : undefined),
            };
        }

        /**
         * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
         */
        export interface ProxmoxMachineSpecCloudInit {
            user?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUser;
        }

        export interface ProxmoxMachineSpecCloudInitUser {
            bootcmd?: string[];
            ca_certs?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserCaCerts;
            chpasswd?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserChpasswd;
            manage_etc_hosts?: boolean;
            no_ssh_fingerprints?: boolean;
            package_update?: boolean;
            package_upgrade?: boolean;
            packages?: string[];
            password?: string;
            runCmd?: string[];
            ssh?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserSsh;
            ssh_authorized_keys?: string[];
            ssh_keys?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserSshKeys;
            ssh_pwauth?: boolean;
            user?: string;
            users?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserUsers[];
            writeFiles?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserWriteFiles[];
        }

        export interface ProxmoxMachineSpecCloudInitUserCaCerts {
            remove_defaults?: boolean;
            trusted?: string[];
        }

        export interface ProxmoxMachineSpecCloudInitUserChpasswd {
            expire?: string;
        }

        export interface ProxmoxMachineSpecCloudInitUserSsh {
            emit_keys_to_console?: boolean;
        }

        export interface ProxmoxMachineSpecCloudInitUserSshKeys {
            dsa_private?: string;
            dsa_public?: string;
            ecdsa_private?: string;
            ecdsa_public?: string;
            rsa_private?: string;
            rsa_public?: string;
        }

        export interface ProxmoxMachineSpecCloudInitUserUsers {
            expiredate?: string;
            gecos?: string;
            groups?: string[];
            homedir?: string;
            inactive?: number;
            lock_passwd?: boolean;
            name: string;
            no_create_home?: boolean;
            no_log_init?: boolean;
            no_user_group?: boolean;
            passwd?: string;
            primary_group?: string;
            selinux_user?: string;
            shell?: string;
            snapuser?: string;
            ssh_authorized_keys?: string[];
            ssh_import_id?: string[];
            ssh_redirect_user?: boolean;
            sudo?: string[];
            system?: boolean;
        }

        export interface ProxmoxMachineSpecCloudInitUserWriteFiles {
            content?: string;
            defer?: boolean;
            encoding?: string;
            owner?: string;
            path?: string;
            permissions?: string;
        }

        /**
         * Hardware
         */
        export interface ProxmoxMachineSpecHardware {
            /**
             * Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
             */
            bios?: string;
            /**
             * number of CPU cores : 1 ~
             */
            cpu?: number;
            /**
             * Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
             */
            cpuLimit?: number;
            /**
             * hard disk size
             */
            disk?: string;
            /**
             * amount of RAM for the VM in MiB : 16 ~
             */
            memory?: number;
            /**
             * The number of CPU sockets. Defaults to 1.
             */
            sockets?: number;
        }
        /**
         * proxmoxMachineSpecHardwareProvideDefaults sets the appropriate defaults for ProxmoxMachineSpecHardware
         */
        export function proxmoxMachineSpecHardwareProvideDefaults(val: ProxmoxMachineSpecHardware): ProxmoxMachineSpecHardware {
            return {
                ...val,
                cpu: (val.cpu) ?? 2,
                disk: (val.disk) ?? "50G",
                memory: (val.memory) ?? 4096,
            };
        }

        /**
         * Image is the image to be provisioned
         */
        export interface ProxmoxMachineSpecImage {
            /**
             * Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
             */
            checksum?: string;
            /**
             * ChecksumType
             */
            checksumType?: string;
            /**
             * URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
             */
            url: string;
        }

        /**
         * Network
         */
        export interface ProxmoxMachineSpecNetwork {
            /**
             * to do : should accept multiple IPConfig
             */
            ipConfig?: outputs.infrastructure.v1beta1.ProxmoxMachineSpecNetworkIpConfig;
            /**
             * DNS server
             */
            nameServer?: string;
            /**
             * search domain
             */
            searchDomain?: string;
        }

        /**
         * to do : should accept multiple IPConfig
         */
        export interface ProxmoxMachineSpecNetworkIpConfig {
            /**
             * gateway IPv4
             */
            gateway?: string;
            /**
             * gateway IPv6
             */
            gateway6?: string;
            /**
             * IPv4 with CIDR
             */
            ip?: string;
            /**
             * IPv6 with CIDR
             */
            ip6?: string;
        }

        /**
         * Options for QEMU instance
         */
        export interface ProxmoxMachineSpecOptions {
            /**
             * Enable/Disable ACPI. Defaults to true.
             */
            acpi?: boolean;
            /**
             * Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
             */
            arch?: string;
            /**
             * Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
             */
            balloon?: number;
            /**
             * Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
             */
            description?: string;
            /**
             * enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
             */
            hugePages?: number;
            /**
             * Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
             */
            keepHugePages?: boolean;
            /**
             * Enable/disable KVM hardware virtualization. Defaults to true.
             */
            kvm?: boolean;
            /**
             * Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
             */
            localTime?: boolean;
            /**
             * Lock/unlock the VM.
             */
            lock?: string;
            /**
             * Enable/disable NUMA.
             */
            numa?: boolean;
            /**
             * Specifies whether a VM will be started during system bootup.
             */
            onBoot?: boolean;
            /**
             * Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
             */
            osType?: string;
            /**
             * Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
             */
            protection?: boolean;
            /**
             * Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
             */
            reboot?: boolean;
            /**
             * Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
             */
            shares?: number;
            /**
             * Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
             */
            tablet?: boolean;
            /**
             * Tags of the VM. This is only meta information.
             */
            tags?: string[];
            /**
             * Enable/disable Template. Defaults to false.
             */
            template?: boolean;
            /**
             * Enable/disable time drift fix. Defaults to false.
             */
            timeDriftFix?: boolean;
            /**
             * Number of hotplugged vcpus. Defaults to 0.
             */
            vcpus?: number;
            /**
             * The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
             */
            vmGenerationID?: string;
        }

        /**
         * ProxmoxMachineStatus defines the observed state of ProxmoxMachine
         */
        export interface ProxmoxMachineStatus {
            /**
             * Addresses
             */
            addresses?: outputs.infrastructure.v1beta1.ProxmoxMachineStatusAddresses[];
            /**
             * Conditions
             */
            conditions?: outputs.infrastructure.v1beta1.ProxmoxMachineStatusConditions[];
            /**
             * Configuration
             */
            config?: outputs.infrastructure.v1beta1.ProxmoxMachineStatusConfig;
            /**
             * FailureMessage
             */
            failureMessage?: string;
            /**
             * FailureReason
             */
            failureReason?: string;
            /**
             * InstanceStatus is the status of the proxmox instance for this machine.
             */
            instanceStatus?: string;
            /**
             * Ready is true when the provider resource is ready.
             */
            ready?: boolean;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface ProxmoxMachineStatusAddresses {
            /**
             * The machine address.
             */
            address: string;
            /**
             * Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
             */
            type: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ProxmoxMachineStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * Configuration
         */
        export interface ProxmoxMachineStatusConfig {
            /**
             * Enable/disable ACPI.
             */
            acpi?: number;
            /**
             * List of host cores used to execute guest processes, for example: 0,5,8-11
             */
            affinity?: string;
            /**
             * Enable/disable communication with the QEMU Guest Agent and its properties.
             */
            agent?: string;
            /**
             * Virtual processor architecture. Defaults to the host.
             */
            arch?: string;
            /**
             * Arbitrary arguments passed to kvm, for example: args: -no-reboot -no-hpet NOTE: this option is for experts only.
             */
            args?: string;
            /**
             * Configure a audio device, useful in combination with QXL/Spice.
             */
            audio0?: string;
            /**
             * Automatic restart after crash (currently ignored).
             */
            autostart?: number;
            /**
             * Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
             */
            balloon?: number;
            /**
             * Select BIOS implementation.
             */
            bios?: string;
            /**
             * boot order. ";" separated. : 'order=device1;device2;device3'
             */
            boot?: string;
            /**
             * This is an alias for option -ide2
             */
            cdrom?: string;
            /**
             * cloud-init: Specify custom files to replace the automatically generated ones at start.
             */
            cicustom?: string;
            /**
             * cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.
             */
            cipassword?: string;
            /**
             * Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.
             */
            citype?: string;
            /**
             * cloud-init: User name to change ssh keys and password for instead of the image's configured default user.
             */
            ciuser?: string;
            /**
             * The number of cores per socket. : 1 ~
             */
            cores?: number;
            /**
             * emulated cpu type
             */
            cpu?: string;
            /**
             * Limit of CPU usage. NOTE: If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit.
             */
            cpulimit?: number;
            /**
             * CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
             */
            cpuunits?: number;
            description?: string;
            efidisk0?: number;
            freeze?: number;
            hookscript?: string;
            hostpci0?: string;
            hostpci1?: string;
            hostpci2?: string;
            hostpci3?: string;
            hotplug?: string;
            hugepages?: string;
            ide0?: string;
            ide1?: string;
            ide2?: string;
            ide3?: string;
            ipconfig0?: string;
            ipconfig1?: string;
            ipconfig10?: string;
            ipconfig11?: string;
            ipconfig12?: string;
            ipconfig13?: string;
            ipconfig14?: string;
            ipconfig15?: string;
            ipconfig16?: string;
            ipconfig17?: string;
            ipconfig18?: string;
            ipconfig19?: string;
            ipconfig2?: string;
            ipconfig20?: string;
            ipconfig21?: string;
            ipconfig22?: string;
            ipconfig23?: string;
            ipconfig24?: string;
            ipconfig25?: string;
            ipconfig26?: string;
            ipconfig27?: string;
            ipconfig28?: string;
            ipconfig29?: string;
            ipconfig3?: string;
            ipconfig30?: string;
            ipconfig31?: string;
            ipconfig4?: string;
            ipconfig5?: string;
            ipconfig6?: string;
            ipconfig7?: string;
            ipconfig8?: string;
            ipconfig9?: string;
            ivshmem?: string;
            keephugepages?: number;
            keyboard?: string;
            /**
             * enable/disable KVM hardware virtualization
             */
            kvm?: number;
            localtime?: number;
            lock?: string;
            /**
             * specifies the QEMU machine type
             */
            machine?: string;
            /**
             * amount of RAM for the VM in MiB : 16 ~
             */
            memory?: number;
            /**
             * A Number represents a JSON number literal.
             */
            migrate_downtime?: string;
            migrate_speed?: number;
            /**
             * name for VM. Only used on the configuration web interface
             */
            name?: string;
            /**
             * cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
             */
            nameserver?: string;
            net0?: string;
            net1?: string;
            net10?: string;
            net11?: string;
            net12?: string;
            net13?: string;
            net14?: string;
            net15?: string;
            net16?: string;
            net17?: string;
            net18?: string;
            net19?: string;
            net2?: string;
            net20?: string;
            net21?: string;
            net22?: string;
            net23?: string;
            net24?: string;
            net25?: string;
            net26?: string;
            net27?: string;
            net28?: string;
            net29?: string;
            net3?: string;
            net30?: string;
            net31?: string;
            net4?: string;
            net5?: string;
            net6?: string;
            net7?: string;
            net8?: string;
            net9?: string;
            numa?: number;
            numa0?: string;
            numa1?: string;
            numa2?: string;
            numa3?: string;
            numa4?: string;
            numa5?: string;
            numa6?: string;
            numa7?: string;
            /**
             * specifies whether a VM will be started during system bootup
             */
            onboot?: number;
            /**
             * quest OS
             */
            ostype?: string;
            parallel0?: string;
            parallel1?: string;
            parallel2?: string;
            protection?: number;
            /**
             * Allow reboot. if set to '0' the VM exit on reboot
             */
            reboot?: number;
            rng0?: string;
            sata0?: string;
            sata1?: string;
            sata2?: string;
            sata3?: string;
            sata4?: string;
            sata5?: string;
            scsi0?: string;
            scsi1?: string;
            scsi10?: string;
            scsi11?: string;
            scsi12?: string;
            scsi13?: string;
            scsi14?: string;
            scsi15?: string;
            scsi16?: string;
            scsi17?: string;
            scsi18?: string;
            scsi19?: string;
            scsi2?: string;
            scsi20?: string;
            scsi21?: string;
            scsi22?: string;
            scsi23?: string;
            scsi24?: string;
            scsi25?: string;
            scsi26?: string;
            scsi27?: string;
            scsi28?: string;
            scsi29?: string;
            scsi3?: string;
            scsi30?: string;
            scsi4?: string;
            scsi5?: string;
            scsi6?: string;
            scsi7?: string;
            scsi8?: string;
            scsi9?: string;
            /**
             * SCSI controller model
             */
            scsihw?: string;
            /**
             * cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
             */
            searchdomain?: string;
            serial0?: string;
            serial1?: string;
            serial2?: string;
            serial3?: string;
            shares?: number;
            smbios1?: string;
            smp?: number;
            /**
             * number of sockets
             */
            sockets?: number;
            spice_enhancements?: string;
            /**
             * cloud-init setup public ssh keys (one key per line, OpenSSH format)
             */
            sshkeys?: string;
            startdate?: string;
            startup?: number;
            tablet?: number;
            /**
             * tags of the VM. only for meta information
             */
            tags?: string;
            tdf?: number;
            /**
             * enable/disable template
             */
            template?: number;
            tpmstate?: string;
            unused0?: string;
            unused1?: string;
            unused2?: string;
            unused3?: string;
            unused4?: string;
            unused5?: string;
            unused6?: string;
            unused7?: string;
            vcpus?: number;
            vga?: string;
            virtio0?: string;
            virtio1?: string;
            virtio10?: string;
            virtio11?: string;
            virtio12?: string;
            virtio13?: string;
            virtio14?: string;
            virtio15?: string;
            virtio2?: string;
            virtio3?: string;
            virtio4?: string;
            virtio5?: string;
            virtio6?: string;
            virtio7?: string;
            virtio8?: string;
            virtio9?: string;
            vmgenid?: string;
            vmstatestorage?: string;
            watchdog?: string;
        }

        /**
         * ProxmoxMachineTemplateSpec defines the desired state of ProxmoxMachineTemplate
         */
        export interface ProxmoxMachineTemplateSpec {
            template: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplate;
        }
        /**
         * proxmoxMachineTemplateSpecProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpec
         */
        export function proxmoxMachineTemplateSpecProvideDefaults(val: ProxmoxMachineTemplateSpec): ProxmoxMachineTemplateSpec {
            return {
                ...val,
                template: outputs.infrastructure.v1beta1.proxmoxMachineTemplateSpecTemplateProvideDefaults(val.template),
            };
        }

        export interface ProxmoxMachineTemplateSpecTemplate {
            /**
             * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
             *  ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
             *  During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
             *  In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
             *  In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
             */
            'metadata.omitempty'?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateMetadataOmitempty;
            /**
             * ProxmoxMachineSpec defines the desired state of ProxmoxMachine
             */
            spec: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpec;
        }
        /**
         * proxmoxMachineTemplateSpecTemplateProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecTemplate
         */
        export function proxmoxMachineTemplateSpecTemplateProvideDefaults(val: ProxmoxMachineTemplateSpecTemplate): ProxmoxMachineTemplateSpecTemplate {
            return {
                ...val,
                spec: outputs.infrastructure.v1beta1.proxmoxMachineTemplateSpecTemplateSpecProvideDefaults(val.spec),
            };
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
         *  ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
         *  During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
         *  In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
         *  In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
         */
        export interface ProxmoxMachineTemplateSpecTemplateMetadataOmitempty {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
        }

        /**
         * ProxmoxMachineSpec defines the desired state of ProxmoxMachine
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpec {
            /**
             * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
             */
            cloudInit?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInit;
            /**
             * FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
             */
            failureDomain?: string;
            /**
             * Hardware
             */
            hardware?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecHardware;
            /**
             * Image is the image to be provisioned
             */
            image: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecImage;
            /**
             * Network
             */
            network?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecNetwork;
            /**
             * Node is proxmox node hosting vm instance which used for ProxmoxMachine
             */
            node?: string;
            /**
             * Options for QEMU instance
             */
            options?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecOptions;
            /**
             * ProviderID
             */
            providerID?: string;
            /**
             * Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
             */
            storage?: string;
            /**
             * VMID is proxmox qemu's id
             */
            vmID?: number;
        }
        /**
         * proxmoxMachineTemplateSpecTemplateSpecProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecTemplateSpec
         */
        export function proxmoxMachineTemplateSpecTemplateSpecProvideDefaults(val: ProxmoxMachineTemplateSpecTemplateSpec): ProxmoxMachineTemplateSpecTemplateSpec {
            return {
                ...val,
                hardware: (val.hardware ? outputs.infrastructure.v1beta1.proxmoxMachineTemplateSpecTemplateSpecHardwareProvideDefaults(val.hardware) : undefined),
            };
        }

        /**
         * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInit {
            user?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser {
            bootcmd?: string[];
            ca_certs?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCerts;
            chpasswd?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswd;
            manage_etc_hosts?: boolean;
            no_ssh_fingerprints?: boolean;
            package_update?: boolean;
            package_upgrade?: boolean;
            packages?: string[];
            password?: string;
            runCmd?: string[];
            ssh?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSsh;
            ssh_authorized_keys?: string[];
            ssh_keys?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeys;
            ssh_pwauth?: boolean;
            user?: string;
            users?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsers[];
            writeFiles?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFiles[];
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCerts {
            remove_defaults?: boolean;
            trusted?: string[];
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswd {
            expire?: string;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSsh {
            emit_keys_to_console?: boolean;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeys {
            dsa_private?: string;
            dsa_public?: string;
            ecdsa_private?: string;
            ecdsa_public?: string;
            rsa_private?: string;
            rsa_public?: string;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsers {
            expiredate?: string;
            gecos?: string;
            groups?: string[];
            homedir?: string;
            inactive?: number;
            lock_passwd?: boolean;
            name: string;
            no_create_home?: boolean;
            no_log_init?: boolean;
            no_user_group?: boolean;
            passwd?: string;
            primary_group?: string;
            selinux_user?: string;
            shell?: string;
            snapuser?: string;
            ssh_authorized_keys?: string[];
            ssh_import_id?: string[];
            ssh_redirect_user?: boolean;
            sudo?: string[];
            system?: boolean;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFiles {
            content?: string;
            defer?: boolean;
            encoding?: string;
            owner?: string;
            path?: string;
            permissions?: string;
        }

        /**
         * Hardware
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecHardware {
            /**
             * Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
             */
            bios?: string;
            /**
             * number of CPU cores : 1 ~
             */
            cpu?: number;
            /**
             * Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
             */
            cpuLimit?: number;
            /**
             * hard disk size
             */
            disk?: string;
            /**
             * amount of RAM for the VM in MiB : 16 ~
             */
            memory?: number;
            /**
             * The number of CPU sockets. Defaults to 1.
             */
            sockets?: number;
        }
        /**
         * proxmoxMachineTemplateSpecTemplateSpecHardwareProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecTemplateSpecHardware
         */
        export function proxmoxMachineTemplateSpecTemplateSpecHardwareProvideDefaults(val: ProxmoxMachineTemplateSpecTemplateSpecHardware): ProxmoxMachineTemplateSpecTemplateSpecHardware {
            return {
                ...val,
                cpu: (val.cpu) ?? 2,
                disk: (val.disk) ?? "50G",
                memory: (val.memory) ?? 4096,
            };
        }

        /**
         * Image is the image to be provisioned
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecImage {
            /**
             * Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
             */
            checksum?: string;
            /**
             * ChecksumType
             */
            checksumType?: string;
            /**
             * URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
             */
            url: string;
        }

        /**
         * Network
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecNetwork {
            /**
             * to do : should accept multiple IPConfig
             */
            ipConfig?: outputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfig;
            /**
             * DNS server
             */
            nameServer?: string;
            /**
             * search domain
             */
            searchDomain?: string;
        }

        /**
         * to do : should accept multiple IPConfig
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfig {
            /**
             * gateway IPv4
             */
            gateway?: string;
            /**
             * gateway IPv6
             */
            gateway6?: string;
            /**
             * IPv4 with CIDR
             */
            ip?: string;
            /**
             * IPv6 with CIDR
             */
            ip6?: string;
        }

        /**
         * Options for QEMU instance
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecOptions {
            /**
             * Enable/Disable ACPI. Defaults to true.
             */
            acpi?: boolean;
            /**
             * Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
             */
            arch?: string;
            /**
             * Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
             */
            balloon?: number;
            /**
             * Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
             */
            description?: string;
            /**
             * enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
             */
            hugePages?: number;
            /**
             * Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
             */
            keepHugePages?: boolean;
            /**
             * Enable/disable KVM hardware virtualization. Defaults to true.
             */
            kvm?: boolean;
            /**
             * Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
             */
            localTime?: boolean;
            /**
             * Lock/unlock the VM.
             */
            lock?: string;
            /**
             * Enable/disable NUMA.
             */
            numa?: boolean;
            /**
             * Specifies whether a VM will be started during system bootup.
             */
            onBoot?: boolean;
            /**
             * Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
             */
            osType?: string;
            /**
             * Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
             */
            protection?: boolean;
            /**
             * Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
             */
            reboot?: boolean;
            /**
             * Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
             */
            shares?: number;
            /**
             * Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
             */
            tablet?: boolean;
            /**
             * Tags of the VM. This is only meta information.
             */
            tags?: string[];
            /**
             * Enable/disable Template. Defaults to false.
             */
            template?: boolean;
            /**
             * Enable/disable time drift fix. Defaults to false.
             */
            timeDriftFix?: boolean;
            /**
             * Number of hotplugged vcpus. Defaults to 0.
             */
            vcpus?: number;
            /**
             * The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
             */
            vmGenerationID?: string;
        }

    }
}

export namespace ipam {
    export namespace v1alpha1 {
        /**
         * IPAddressClaimSpec is the desired state of an IPAddressClaim.
         */
        export interface IPAddressClaimSpec {
            /**
             * PoolRef is a reference to the pool from which an IP address should be created.
             */
            poolRef: outputs.ipam.v1alpha1.IPAddressClaimSpecPoolRef;
        }

        /**
         * PoolRef is a reference to the pool from which an IP address should be created.
         */
        export interface IPAddressClaimSpecPoolRef {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * IPAddressClaimStatus is the observed status of a IPAddressClaim.
         */
        export interface IPAddressClaimStatus {
            /**
             * AddressRef is a reference to the address that was created for this claim.
             */
            addressRef?: outputs.ipam.v1alpha1.IPAddressClaimStatusAddressRef;
            /**
             * Conditions summarises the current state of the IPAddressClaim
             */
            conditions?: outputs.ipam.v1alpha1.IPAddressClaimStatusConditions[];
        }

        /**
         * AddressRef is a reference to the address that was created for this claim.
         */
        export interface IPAddressClaimStatusAddressRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface IPAddressClaimStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * IPAddressSpec is the desired state of an IPAddress.
         */
        export interface IPAddressSpec {
            /**
             * Address is the IP address.
             */
            address: string;
            /**
             * ClaimRef is a reference to the claim this IPAddress was created for.
             */
            claimRef: outputs.ipam.v1alpha1.IPAddressSpecClaimRef;
            /**
             * Gateway is the network gateway of the network the address is from.
             */
            gateway?: string;
            /**
             * PoolRef is a reference to the pool that this IPAddress was created from.
             */
            poolRef: outputs.ipam.v1alpha1.IPAddressSpecPoolRef;
            /**
             * Prefix is the prefix of the address.
             */
            prefix: number;
        }

        /**
         * ClaimRef is a reference to the claim this IPAddress was created for.
         */
        export interface IPAddressSpecClaimRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * PoolRef is a reference to the pool that this IPAddress was created from.
         */
        export interface IPAddressSpecPoolRef {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

    }
}

export namespace metal {
    export namespace v1alpha1 {
        /**
         * EnvironmentSpec defines the desired state of Environment.
         */
        export interface EnvironmentSpec {
            initrd?: outputs.metal.v1alpha1.EnvironmentSpecInitrd;
            kernel?: outputs.metal.v1alpha1.EnvironmentSpecKernel;
        }

        export interface EnvironmentSpecInitrd {
            sha512?: string;
            url?: string;
        }

        export interface EnvironmentSpecKernel {
            args?: string[];
            sha512?: string;
            url?: string;
        }

        /**
         * EnvironmentStatus defines the observed state of Environment.
         */
        export interface EnvironmentStatus {
            conditions?: outputs.metal.v1alpha1.EnvironmentStatusConditions[];
        }

        export interface EnvironmentStatusConditions {
            sha512?: string;
            status: string;
            type: string;
            url?: string;
        }

        /**
         * ServerClassSpec defines the desired state of ServerClass.
         */
        export interface ServerClassSpec {
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: string;
            /**
             * Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
             */
            configPatches?: outputs.metal.v1alpha1.ServerClassSpecConfigPatches[];
            /**
             * Reference to the environment which should be used to provision the servers via this server class.
             */
            environmentRef?: outputs.metal.v1alpha1.ServerClassSpecEnvironmentRef;
            /**
             * Qualifiers to match on the server spec. 
             *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
             */
            qualifiers?: outputs.metal.v1alpha1.ServerClassSpecQualifiers;
            /**
             * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: outputs.metal.v1alpha1.ServerClassSpecSelector;
        }

        export interface ServerClassSpecConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        /**
         * Reference to the environment which should be used to provision the servers via this server class.
         */
        export interface ServerClassSpecEnvironmentRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Qualifiers to match on the server spec. 
         *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
         */
        export interface ServerClassSpecQualifiers {
            cpu?: outputs.metal.v1alpha1.ServerClassSpecQualifiersCpu[];
            labelSelectors?: {[key: string]: string}[];
            systemInformation?: outputs.metal.v1alpha1.ServerClassSpecQualifiersSystemInformation[];
        }

        export interface ServerClassSpecQualifiersCpu {
            manufacturer?: string;
            version?: string;
        }

        export interface ServerClassSpecQualifiersSystemInformation {
            family?: string;
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            skuNumber?: string;
            version?: string;
        }

        /**
         * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ServerClassSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.metal.v1alpha1.ServerClassSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServerClassSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ServerClassStatus defines the observed state of ServerClass.
         */
        export interface ServerClassStatus {
            serversAvailable: string[];
            serversInUse: string[];
        }

        /**
         * ServerSpec defines the desired state of Server.
         */
        export interface ServerSpec {
            accepted: boolean;
            /**
             * BMC defines data about how to talk to the node via ipmitool.
             */
            bmc?: outputs.metal.v1alpha1.ServerSpecBmc;
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: string;
            configPatches?: outputs.metal.v1alpha1.ServerSpecConfigPatches[];
            cordoned?: boolean;
            cpu?: outputs.metal.v1alpha1.ServerSpecCpu;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            environmentRef?: outputs.metal.v1alpha1.ServerSpecEnvironmentRef;
            hostname?: string;
            /**
             * ManagementAPI defines data about how to talk to the node via simple HTTP API.
             */
            managementApi?: outputs.metal.v1alpha1.ServerSpecManagementApi;
            pxeBootAlways?: boolean;
            /**
             * PXEMode specifies the method to trigger PXE boot via IPMI. 
             *  If not set, controller default is used. Valid values: uefi, bios.
             */
            pxeMode?: string;
            system?: outputs.metal.v1alpha1.ServerSpecSystem;
        }

        /**
         * BMC defines data about how to talk to the node via ipmitool.
         */
        export interface ServerSpecBmc {
            /**
             * BMC endpoint.
             */
            endpoint: string;
            /**
             * BMC Interface Type. Defaults to lanplus.
             */
            interface?: string;
            /**
             * BMC password value.
             */
            pass?: string;
            /**
             * Source for the password value. Cannot be used if Pass is not empty.
             */
            passFrom?: outputs.metal.v1alpha1.ServerSpecBmcPassFrom;
            /**
             * BMC port. Defaults to 623.
             */
            port?: number;
            /**
             * BMC user value.
             */
            user?: string;
            /**
             * Source for the user value. Cannot be used if User is not empty.
             */
            userFrom?: outputs.metal.v1alpha1.ServerSpecBmcUserFrom;
        }

        /**
         * Source for the password value. Cannot be used if Pass is not empty.
         */
        export interface ServerSpecBmcPassFrom {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: outputs.metal.v1alpha1.ServerSpecBmcPassFromSecretKeyRef;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcPassFromSecretKeyRef {
            /**
             * Key to select
             */
            key: string;
            name: string;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: string;
        }

        /**
         * Source for the user value. Cannot be used if User is not empty.
         */
        export interface ServerSpecBmcUserFrom {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: outputs.metal.v1alpha1.ServerSpecBmcUserFromSecretKeyRef;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcUserFromSecretKeyRef {
            /**
             * Key to select
             */
            key: string;
            name: string;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: string;
        }

        export interface ServerSpecConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        export interface ServerSpecCpu {
            manufacturer?: string;
            version?: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerSpecEnvironmentRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * ManagementAPI defines data about how to talk to the node via simple HTTP API.
         */
        export interface ServerSpecManagementApi {
            endpoint: string;
        }

        export interface ServerSpecSystem {
            family?: string;
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            skuNumber?: string;
            version?: string;
        }

        /**
         * ServerStatus defines the observed state of Server.
         */
        export interface ServerStatus {
            /**
             * Addresses lists discovered node IPs.
             */
            addresses?: outputs.metal.v1alpha1.ServerStatusAddresses[];
            /**
             * Conditions defines current service state of the Server.
             */
            conditions?: outputs.metal.v1alpha1.ServerStatusConditions[];
            /**
             * InUse is true when server is assigned to some MetalMachine.
             */
            inUse?: boolean;
            /**
             * IsClean is true when server disks are wiped.
             */
            isClean?: boolean;
            /**
             * Power is the current power state of the server: "on", "off" or "unknown".
             */
            power?: string;
            /**
             * Ready is true when server is accepted and in use.
             */
            ready?: boolean;
        }

        /**
         * NodeAddress contains information for the node's address.
         */
        export interface ServerStatusAddresses {
            /**
             * The node address.
             */
            address: string;
            /**
             * Node address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

    }

    export namespace v1alpha2 {
        /**
         * EnvironmentSpec defines the desired state of Environment.
         */
        export interface EnvironmentSpec {
            initrd?: outputs.metal.v1alpha2.EnvironmentSpecInitrd;
            kernel?: outputs.metal.v1alpha2.EnvironmentSpecKernel;
        }

        export interface EnvironmentSpecInitrd {
            sha512?: string;
            url?: string;
        }

        export interface EnvironmentSpecKernel {
            args?: string[];
            sha512?: string;
            url?: string;
        }

        /**
         * EnvironmentStatus defines the observed state of Environment.
         */
        export interface EnvironmentStatus {
            conditions?: outputs.metal.v1alpha2.EnvironmentStatusConditions[];
        }

        export interface EnvironmentStatusConditions {
            sha512?: string;
            status: string;
            type: string;
            url?: string;
        }

        /**
         * ServerClassSpec defines the desired state of ServerClass.
         */
        export interface ServerClassSpec {
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: string;
            /**
             * Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
             */
            configPatches?: outputs.metal.v1alpha2.ServerClassSpecConfigPatches[];
            /**
             * Reference to the environment which should be used to provision the servers via this server class.
             */
            environmentRef?: outputs.metal.v1alpha2.ServerClassSpecEnvironmentRef;
            /**
             * Qualifiers to match on the server spec. 
             *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
             */
            qualifiers?: outputs.metal.v1alpha2.ServerClassSpecQualifiers;
            /**
             * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: outputs.metal.v1alpha2.ServerClassSpecSelector;
        }

        export interface ServerClassSpecConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        /**
         * Reference to the environment which should be used to provision the servers via this server class.
         */
        export interface ServerClassSpecEnvironmentRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * Qualifiers to match on the server spec. 
         *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
         */
        export interface ServerClassSpecQualifiers {
            hardware?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardware[];
            labelSelectors?: {[key: string]: string}[];
        }

        export interface ServerClassSpecQualifiersHardware {
            compute?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareCompute;
            memory?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareMemory;
            network?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareNetwork;
            storage?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareStorage;
            system?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareSystem;
        }

        export interface ServerClassSpecQualifiersHardwareCompute {
            processorCount?: number;
            processors?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareComputeProcessors[];
            totalCoreCount?: number;
            totalThreadCount?: number;
        }

        export interface ServerClassSpecQualifiersHardwareComputeProcessors {
            coreCount?: number;
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            /**
             * Speed is in megahertz (Mhz)
             */
            speed?: number;
            threadCount?: number;
        }

        export interface ServerClassSpecQualifiersHardwareMemory {
            moduleCount?: number;
            modules?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareMemoryModules[];
            totalSize?: string;
        }

        export interface ServerClassSpecQualifiersHardwareMemoryModules {
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            /**
             * Size is in megabytes (MB)
             */
            size?: number;
            /**
             * Speed is in megatransfers per second (MT/S)
             */
            speed?: number;
            type?: string;
        }

        export interface ServerClassSpecQualifiersHardwareNetwork {
            interfaceCount?: number;
            interfaces?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareNetworkInterfaces[];
        }

        export interface ServerClassSpecQualifiersHardwareNetworkInterfaces {
            addresses?: string[];
            flags?: string;
            index?: number;
            mac?: string;
            mtu?: number;
            name?: string;
        }

        export interface ServerClassSpecQualifiersHardwareStorage {
            deviceCount?: number;
            devices?: outputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareStorageDevices[];
            totalSize?: string;
        }

        export interface ServerClassSpecQualifiersHardwareStorageDevices {
            deviceName?: string;
            name?: string;
            productName?: string;
            serialNumber?: string;
            /**
             * Size is in bytes
             */
            size?: number;
            type?: string;
            uuid?: string;
            wwid?: string;
        }

        export interface ServerClassSpecQualifiersHardwareSystem {
            family?: string;
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            skuNumber?: string;
            uuid?: string;
            version?: string;
        }

        /**
         * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ServerClassSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.metal.v1alpha2.ServerClassSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServerClassSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ServerClassStatus defines the observed state of ServerClass.
         */
        export interface ServerClassStatus {
            serversAvailable: string[];
            serversInUse: string[];
        }

        /**
         * ServerSpec defines the desired state of Server.
         */
        export interface ServerSpec {
            accepted: boolean;
            /**
             * BMC defines data about how to talk to the node via ipmitool.
             */
            bmc?: outputs.metal.v1alpha2.ServerSpecBmc;
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: string;
            configPatches?: outputs.metal.v1alpha2.ServerSpecConfigPatches[];
            cordoned?: boolean;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            environmentRef?: outputs.metal.v1alpha2.ServerSpecEnvironmentRef;
            hardware?: outputs.metal.v1alpha2.ServerSpecHardware;
            hostname?: string;
            /**
             * ManagementAPI defines data about how to talk to the node via simple HTTP API.
             */
            managementApi?: outputs.metal.v1alpha2.ServerSpecManagementApi;
            pxeBootAlways?: boolean;
            /**
             * PXEMode specifies the method to trigger PXE boot via IPMI. 
             *  If not set, controller default is used. Valid values: uefi, bios.
             */
            pxeMode?: string;
        }

        /**
         * BMC defines data about how to talk to the node via ipmitool.
         */
        export interface ServerSpecBmc {
            /**
             * BMC endpoint.
             */
            endpoint: string;
            /**
             * BMC Interface Type. Defaults to lanplus.
             */
            interface?: string;
            /**
             * BMC password value.
             */
            pass?: string;
            /**
             * Source for the password value. Cannot be used if Pass is not empty.
             */
            passFrom?: outputs.metal.v1alpha2.ServerSpecBmcPassFrom;
            /**
             * BMC port. Defaults to 623.
             */
            port?: number;
            /**
             * BMC user value.
             */
            user?: string;
            /**
             * Source for the user value. Cannot be used if User is not empty.
             */
            userFrom?: outputs.metal.v1alpha2.ServerSpecBmcUserFrom;
        }

        /**
         * Source for the password value. Cannot be used if Pass is not empty.
         */
        export interface ServerSpecBmcPassFrom {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: outputs.metal.v1alpha2.ServerSpecBmcPassFromSecretKeyRef;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcPassFromSecretKeyRef {
            /**
             * Key to select
             */
            key: string;
            name: string;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: string;
        }

        /**
         * Source for the user value. Cannot be used if User is not empty.
         */
        export interface ServerSpecBmcUserFrom {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: outputs.metal.v1alpha2.ServerSpecBmcUserFromSecretKeyRef;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcUserFromSecretKeyRef {
            /**
             * Key to select
             */
            key: string;
            name: string;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: string;
        }

        export interface ServerSpecConfigPatches {
            op: string;
            path: string;
            value?: {[key: string]: any};
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerSpecEnvironmentRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        export interface ServerSpecHardware {
            compute?: outputs.metal.v1alpha2.ServerSpecHardwareCompute;
            memory?: outputs.metal.v1alpha2.ServerSpecHardwareMemory;
            network?: outputs.metal.v1alpha2.ServerSpecHardwareNetwork;
            storage?: outputs.metal.v1alpha2.ServerSpecHardwareStorage;
            system?: outputs.metal.v1alpha2.ServerSpecHardwareSystem;
        }

        export interface ServerSpecHardwareCompute {
            processorCount?: number;
            processors?: outputs.metal.v1alpha2.ServerSpecHardwareComputeProcessors[];
            totalCoreCount?: number;
            totalThreadCount?: number;
        }

        export interface ServerSpecHardwareComputeProcessors {
            coreCount?: number;
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            /**
             * Speed is in megahertz (Mhz)
             */
            speed?: number;
            threadCount?: number;
        }

        export interface ServerSpecHardwareMemory {
            moduleCount?: number;
            modules?: outputs.metal.v1alpha2.ServerSpecHardwareMemoryModules[];
            totalSize?: string;
        }

        export interface ServerSpecHardwareMemoryModules {
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            /**
             * Size is in megabytes (MB)
             */
            size?: number;
            /**
             * Speed is in megatransfers per second (MT/S)
             */
            speed?: number;
            type?: string;
        }

        export interface ServerSpecHardwareNetwork {
            interfaceCount?: number;
            interfaces?: outputs.metal.v1alpha2.ServerSpecHardwareNetworkInterfaces[];
        }

        export interface ServerSpecHardwareNetworkInterfaces {
            addresses?: string[];
            flags?: string;
            index?: number;
            mac?: string;
            mtu?: number;
            name?: string;
        }

        export interface ServerSpecHardwareStorage {
            deviceCount?: number;
            devices?: outputs.metal.v1alpha2.ServerSpecHardwareStorageDevices[];
            totalSize?: string;
        }

        export interface ServerSpecHardwareStorageDevices {
            deviceName?: string;
            name?: string;
            productName?: string;
            serialNumber?: string;
            /**
             * Size is in bytes
             */
            size?: number;
            type?: string;
            uuid?: string;
            wwid?: string;
        }

        export interface ServerSpecHardwareSystem {
            family?: string;
            manufacturer?: string;
            productName?: string;
            serialNumber?: string;
            skuNumber?: string;
            uuid?: string;
            version?: string;
        }

        /**
         * ManagementAPI defines data about how to talk to the node via simple HTTP API.
         */
        export interface ServerSpecManagementApi {
            endpoint: string;
        }

        /**
         * ServerStatus defines the observed state of Server.
         */
        export interface ServerStatus {
            /**
             * Addresses lists discovered node IPs.
             */
            addresses?: outputs.metal.v1alpha2.ServerStatusAddresses[];
            /**
             * Conditions defines current service state of the Server.
             */
            conditions?: outputs.metal.v1alpha2.ServerStatusConditions[];
            /**
             * InUse is true when server is assigned to some MetalMachine.
             */
            inUse?: boolean;
            /**
             * IsClean is true when server disks are wiped.
             */
            isClean?: boolean;
            /**
             * Power is the current power state of the server: "on", "off" or "unknown".
             */
            power?: string;
            /**
             * Ready is true when server is accepted and in use.
             */
            ready?: boolean;
        }

        /**
         * NodeAddress contains information for the node's address.
         */
        export interface ServerStatusAddresses {
            /**
             * The node address.
             */
            address: string;
            /**
             * Node address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: string;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

    }
}

export namespace pulumiOperator {
    export namespace v1 {
        export interface ProgramProgram {
            /**
             * configuration specifies the Pulumi config inputs to the deployment. Either type or default is required.
             */
            configuration?: {[key: string]: outputs.pulumiOperator.v1.ProgramProgramConfiguration};
            /**
             * outputs specifies the Pulumi stack outputs of the program and how they are computed from the resources.
             */
            outputs?: {[key: string]: {[key: string]: any}};
            /**
             * resources declares the Pulumi resources that will be deployed and managed by the program.
             */
            resources?: {[key: string]: outputs.pulumiOperator.v1.ProgramProgramResources};
            /**
             * variables specifies intermediate values of the program; the values of variables are expressions that can be re-used.
             */
            variables?: {[key: string]: {[key: string]: any}};
        }

        export interface ProgramProgramConfiguration {
            /**
             * default is a value of the appropriate type for the template to use if no value is specified.
             */
            default?: {[key: string]: any};
            /**
             * type is the (required) data type for the parameter.
             */
            type?: string;
        }

        export interface ProgramProgramResources {
            /**
             * A getter function for the resource. Supplying get is mutually exclusive to properties.
             */
            get?: outputs.pulumiOperator.v1.ProgramProgramResourcesGet;
            /**
             * options contains all resource options supported by Pulumi.
             */
            options?: outputs.pulumiOperator.v1.ProgramProgramResourcesOptions;
            /**
             * properties contains the primary resource-specific keys and values to initialize the resource state.
             */
            properties?: {[key: string]: {[key: string]: any}};
            /**
             * type is the Pulumi type token for this resource.
             */
            type: string;
        }

        /**
         * A getter function for the resource. Supplying get is mutually exclusive to properties.
         */
        export interface ProgramProgramResourcesGet {
            /**
             * The ID of the resource to import.
             */
            id: string;
            /**
             * state contains the known properties (input & output) of the resource. This assists the provider in figuring out the correct resource.
             */
            state?: {[key: string]: {[key: string]: any}};
        }

        /**
         * options contains all resource options supported by Pulumi.
         */
        export interface ProgramProgramResourcesOptions {
            /**
             * additionalSecretOutputs specifies properties that must be encrypted as secrets.
             */
            additionalSecretOutputs?: string[];
            /**
             * aliases specifies names that this resource used to have, so that renaming or refactoring doesn’t replace it.
             */
            aliases?: string[];
            /**
             * customTimeouts overrides the default retry/timeout behavior for resource provisioning.
             */
            customTimeouts?: outputs.pulumiOperator.v1.ProgramProgramResourcesOptionsCustomTimeouts;
            /**
             * deleteBeforeReplace overrides the default create-before-delete behavior when replacing.
             */
            deleteBeforeReplace?: boolean;
            /**
             * dependsOn adds explicit dependencies in addition to the ones in the dependency graph.
             */
            dependsOn?: {[key: string]: any}[];
            /**
             * ignoreChanges declares that changes to certain properties should be ignored when diffing.
             */
            ignoreChanges?: string[];
            /**
             * import adopts an existing resource from your cloud account under the control of Pulumi.
             */
            import?: string;
            /**
             * parent resource option specifies a parent for a resource. It is used to associate children with the parents that encapsulate or are responsible for them.
             */
            parent?: {[key: string]: any};
            /**
             * protect prevents accidental deletion of a resource.
             */
            protect?: boolean;
            /**
             * provider resource option sets a provider for the resource.
             */
            provider?: {[key: string]: any};
            /**
             * providers resource option sets a map of providers for the resource and its children.
             */
            providers?: {[key: string]: {[key: string]: any}};
            /**
             * version specifies a provider plugin version that should be used when operating on a resource.
             */
            version?: string;
        }

        /**
         * customTimeouts overrides the default retry/timeout behavior for resource provisioning.
         */
        export interface ProgramProgramResourcesOptionsCustomTimeouts {
            /**
             * create is the custom timeout for create operations.
             */
            create?: string;
            /**
             * delete is the custom timeout for delete operations.
             */
            delete?: string;
            /**
             * update is the custom timeout for update operations.
             */
            update?: string;
        }

        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpec {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret?: string;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend?: string;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch?: string;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit?: string;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config?: {[key: string]: string};
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
             */
            continueResyncOnCommitMatch?: boolean;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize?: boolean;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
             */
            envRefs?: {[key: string]: outputs.pulumiOperator.v1.StackSpecEnvRefs};
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envSecrets?: string[];
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envs?: string[];
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges?: boolean;
            /**
             * FluxSource specifies how to fetch source code from a Flux source object.
             */
            fluxSource?: outputs.pulumiOperator.v1.StackSpecFluxSource;
            /**
             * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
             */
            gitAuth?: outputs.pulumiOperator.v1.StackSpecGitAuth;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
             */
            gitAuthSecret?: string;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
             */
            prerequisites?: outputs.pulumiOperator.v1.StackSpecPrerequisites[];
            /**
             * ProgramRef refers to a Program object, to be used as the source for the stack.
             */
            programRef?: outputs.pulumiOperator.v1.StackSpecProgramRef;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo?: string;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh?: boolean;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
             */
            repoDir?: string;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds?: number;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict?: boolean;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
             */
            secrets?: {[key: string]: string};
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider?: string;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef?: {[key: string]: outputs.pulumiOperator.v1.StackSpecSecretsRef};
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: string;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
             */
            targets?: string[];
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly?: boolean;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecEnvRefs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1.StackSpecEnvRefsEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1.StackSpecEnvRefsFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1.StackSpecEnvRefsLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1.StackSpecEnvRefsSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecEnvRefsEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecEnvRefsFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecEnvRefsLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecEnvRefsSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSource {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
             */
            dir?: string;
            sourceRef: outputs.pulumiOperator.v1.StackSpecFluxSourceSourceRef;
        }

        export interface StackSpecFluxSourceSourceRef {
            apiVersion: string;
            kind: string;
            name: string;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
         */
        export interface StackSpecGitAuth {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            accessToken?: outputs.pulumiOperator.v1.StackSpecGitAuthAccessToken;
            /**
             * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
             */
            basicAuth?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuth;
            /**
             * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
             */
            sshAuth?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuth;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthAccessToken {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuth {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPassword;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            userName: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserName;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPassword {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserName {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuth {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPassword;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            sshPrivateKey: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKey;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPassword {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKey {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeyEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeyLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeySecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be considered satisfied.
         */
        export interface StackSpecPrerequisites {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: string;
            /**
             * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
             */
            requirement?: outputs.pulumiOperator.v1.StackSpecPrerequisitesRequirement;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirement {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
             */
            succeededWithinDuration?: string;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRef {
            name: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecSecretsRef {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1.StackSpecSecretsRefEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1.StackSpecSecretsRefFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1.StackSpecSecretsRefLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1.StackSpecSecretsRefSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecSecretsRefEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecSecretsRefFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecSecretsRefLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecSecretsRefSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatus {
            conditions?: outputs.pulumiOperator.v1.StackStatusConditions[];
            /**
             * LastUpdate contains details of the status of the last update.
             */
            lastUpdate?: outputs.pulumiOperator.v1.StackStatusLastUpdate;
            /**
             * ObservedGeneration records the value of .meta.generation at the point the controller last processed this object
             */
            observedGeneration?: number;
            /**
             * ObservedReconcileRequest records the value of the annotation named for `ReconcileRequestAnnotation` when it was last seen.
             */
            observedReconcileRequest?: string;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs?: {[key: string]: {[key: string]: any}};
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface StackStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdate {
            /**
             * Last commit attempted
             */
            lastAttemptedCommit?: string;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime?: string;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit?: string;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink?: string;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state?: string;
        }

    }

    export namespace v1alpha1 {
        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpec {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret?: string;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend?: string;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch?: string;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit?: string;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config?: {[key: string]: string};
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
             */
            continueResyncOnCommitMatch?: boolean;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize?: boolean;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
             */
            envRefs?: {[key: string]: outputs.pulumiOperator.v1alpha1.StackSpecEnvRefs};
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envSecrets?: string[];
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envs?: string[];
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges?: boolean;
            /**
             * FluxSource specifies how to fetch source code from a Flux source object.
             */
            fluxSource?: outputs.pulumiOperator.v1alpha1.StackSpecFluxSource;
            /**
             * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
             */
            gitAuth?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuth;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
             */
            gitAuthSecret?: string;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
             */
            prerequisites?: outputs.pulumiOperator.v1alpha1.StackSpecPrerequisites[];
            /**
             * ProgramRef refers to a Program object, to be used as the source for the stack.
             */
            programRef?: outputs.pulumiOperator.v1alpha1.StackSpecProgramRef;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo?: string;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh?: boolean;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
             */
            repoDir?: string;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds?: number;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict?: boolean;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
             */
            secrets?: {[key: string]: string};
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider?: string;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef?: {[key: string]: outputs.pulumiOperator.v1alpha1.StackSpecSecretsRef};
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: string;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
             */
            targets?: string[];
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly?: boolean;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecEnvRefs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1alpha1.StackSpecEnvRefsEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1alpha1.StackSpecEnvRefsFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1alpha1.StackSpecEnvRefsLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1alpha1.StackSpecEnvRefsSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecEnvRefsEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecEnvRefsFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecEnvRefsLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecEnvRefsSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSource {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
             */
            dir?: string;
            sourceRef: outputs.pulumiOperator.v1alpha1.StackSpecFluxSourceSourceRef;
        }

        export interface StackSpecFluxSourceSourceRef {
            apiVersion: string;
            kind: string;
            name: string;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
         */
        export interface StackSpecGitAuth {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            accessToken?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessToken;
            /**
             * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
             */
            basicAuth?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuth;
            /**
             * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
             */
            sshAuth?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuth;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthAccessToken {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuth {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPassword;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            userName: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserName;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPassword {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserName {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuth {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPassword;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            sshPrivateKey: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKey;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPassword {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKey {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeySecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be considered satisfied.
         */
        export interface StackSpecPrerequisites {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: string;
            /**
             * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
             */
            requirement?: outputs.pulumiOperator.v1alpha1.StackSpecPrerequisitesRequirement;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirement {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
             */
            succeededWithinDuration?: string;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRef {
            name: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecSecretsRef {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: outputs.pulumiOperator.v1alpha1.StackSpecSecretsRefEnv;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: outputs.pulumiOperator.v1alpha1.StackSpecSecretsRefFilesystem;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: outputs.pulumiOperator.v1alpha1.StackSpecSecretsRefLiteral;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: outputs.pulumiOperator.v1alpha1.StackSpecSecretsRefSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecSecretsRefEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecSecretsRefFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecSecretsRefLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecSecretsRefSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: string;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatus {
            /**
             * LastUpdate contains details of the status of the last update.
             */
            lastUpdate?: outputs.pulumiOperator.v1alpha1.StackStatusLastUpdate;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs?: {[key: string]: {[key: string]: any}};
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdate {
            /**
             * Last commit attempted
             */
            lastAttemptedCommit?: string;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime?: string;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit?: string;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink?: string;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state?: string;
        }

    }
}

export namespace runtime {
    export namespace v1alpha1 {
        /**
         * ExtensionConfigSpec is the desired state of the ExtensionConfig
         */
        export interface ExtensionConfigSpec {
            /**
             * ClientConfig defines how to communicate with the Extension server.
             */
            clientConfig: outputs.runtime.v1alpha1.ExtensionConfigSpecClientConfig;
            /**
             * NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
             */
            namespaceSelector?: outputs.runtime.v1alpha1.ExtensionConfigSpecNamespaceSelector;
            /**
             * Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
             */
            settings?: {[key: string]: string};
        }

        /**
         * ClientConfig defines how to communicate with the Extension server.
         */
        export interface ExtensionConfigSpecClientConfig {
            /**
             * CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
             */
            caBundle?: string;
            /**
             * Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
             *  If the Extension server is running within a cluster, then you should use `service`.
             */
            service?: outputs.runtime.v1alpha1.ExtensionConfigSpecClientConfigService;
            /**
             * URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified. 
             *  The scheme must be "https". 
             *  The `host` should not refer to a service running in the cluster; use the `service` field instead. 
             *  A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path. 
             *  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
             */
            url?: string;
        }

        /**
         * Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
         *  If the Extension server is running within a cluster, then you should use `service`.
         */
        export interface ExtensionConfigSpecClientConfigService {
            /**
             * Name is the name of the service.
             */
            name: string;
            /**
             * Namespace is the namespace of the service.
             */
            namespace: string;
            /**
             * Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
             */
            path?: string;
            /**
             * Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
             */
            port?: number;
        }

        /**
         * NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
         */
        export interface ExtensionConfigSpecNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.runtime.v1alpha1.ExtensionConfigSpecNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ExtensionConfigSpecNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ExtensionConfigStatus is the current state of the ExtensionConfig
         */
        export interface ExtensionConfigStatus {
            /**
             * Conditions define the current service state of the ExtensionConfig.
             */
            conditions?: outputs.runtime.v1alpha1.ExtensionConfigStatusConditions[];
            /**
             * Handlers defines the current ExtensionHandlers supported by an Extension.
             */
            handlers?: outputs.runtime.v1alpha1.ExtensionConfigStatusHandlers[];
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ExtensionConfigStatusConditions {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: string;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: string;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: string;
        }

        /**
         * ExtensionHandler specifies the details of a handler for a particular runtime hook registered by an Extension server.
         */
        export interface ExtensionConfigStatusHandlers {
            /**
             * FailurePolicy defines how failures in calls to the ExtensionHandler should be handled by a client. Defaults to Fail if not set.
             */
            failurePolicy?: string;
            /**
             * Name is the unique name of the ExtensionHandler.
             */
            name: string;
            /**
             * RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
             */
            requestHook: outputs.runtime.v1alpha1.ExtensionConfigStatusHandlersRequestHook;
            /**
             * TimeoutSeconds defines the timeout duration for client calls to the ExtensionHandler. Defaults to 10 is not set.
             */
            timeoutSeconds?: number;
        }

        /**
         * RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
         */
        export interface ExtensionConfigStatusHandlersRequestHook {
            /**
             * APIVersion is the group and version of the Hook.
             */
            apiVersion: string;
            /**
             * Hook is the name of the hook.
             */
            hook: string;
        }

    }
}
