apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: sidero-system/caps-serving-cert
    controller-gen.kubebuilder.io/version: v0.13.0
  creationTimestamp: null
  labels:
    app: sidero
    cluster.x-k8s.io/provider: infrastructure-sidero
    cluster.x-k8s.io/v1alpha3: v1alpha3
    cluster.x-k8s.io/v1alpha4: v1alpha3
    cluster.x-k8s.io/v1beta1: v1alpha3
    clusterctl.cluster.x-k8s.io: ""
  name: serverbindings.infrastructure.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: caps-webhook-service
          namespace: sidero-system
          path: /convert
      conversionReviewVersions:
        - v1
        - v1beta1
  group: infrastructure.cluster.x-k8s.io
  names:
    kind: ServerBinding
    listKind: ServerBindingList
    plural: serverbindings
    singular: serverbinding
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - description: ServerBinding ready status
          jsonPath: .status.ready
          name: Ready
          type: string
        - description: Server ID
          jsonPath: .metadata.name
          name: Server
          priority: 1
          type: string
        - description: Server Class
          jsonPath: .spec.serverClassRef.name
          name: ServerClass
          priority: 1
          type: string
        - description: Metal Machine
          jsonPath: .spec.metalMachineRef.name
          name: MetalMachine
          priority: 1
          type: string
        - description: Cluster to which this ServerBinding belongs
          jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
          name: Cluster
          priority: 1
          type: string
        - description: The age of this resource
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha3
      schema:
        openAPIV3Schema:
          description: >-
            ServerBinding defines the binding between the MetalMachine and the
            Server. 
             ServerBinding always has matching ID with the Server object. ServerBinding optionally binds to the ServerClass which Server was picked from.
          properties:
            apiVersion:
              description: "APIVersion defines the versioned schema of this representation of
                an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architectur\
                e/api-conventions.md#resources"
              type: string
            kind:
              description: "Kind is a string value representing the REST resource this object
                represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info:
                https://git.k8s.io/community/contributors/devel/sig-architectur\
                e/api-conventions.md#types-kinds"
              type: string
            metadata:
              type: object
            spec:
              description: ServerBindingSpec defines the spec of the ServerBinding object.
              properties:
                addresses:
                  description: Addresses describes node addresses for the server.
                  items:
                    type: string
                  type: array
                hostname:
                  description: Hostname describes node hostname for the server.
                  type: string
                metalMachineRef:
                  description: >-
                    ObjectReference contains enough information to let you
                    inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its
                    usage when embedded in APIs. 1. Ignored fields.  It includes
                    many fields which are not generally honored.  For instance,
                    ResourceVersion and FieldPath are both very rarely valid in
                    actual usage. 2. Invalid usage help.  It is impossible to
                    add specific help for individual usage.  In most embedded
                    usages, there are particular restrictions like, "must refer
                    only to types A and B" or "UID not honored" or "name must be
                    restricted". Those cannot be well described when embedded.
                    3. Inconsistent validation.  Because the usages are
                    different, the validation rules are different by usage,
                    which makes it hard for users to predict what will happen.
                    4. The fields are both imprecise and overly precise.  Kind
                    is not a precise mapping to a URL. This can produce
                    ambiguity during interpretation and require a REST
                    mapping.  In most cases, the dependency is on the
                    group,resource tuple and the version of the actual struct is
                    irrelevant. 5. We cannot easily change it.  Because this
                    type is embedded in many locations, updates to this type
                    will affect numerous schemas.  Don't make new APIs embed an
                    underspecified API type they do not control. 
                     Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object,
                        this string should contain a valid JSON/Go field access
                        statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container
                        within a pod, this would take on a value like:
                        "spec.containers{name}" (where "name" refers to the name
                        of the container that triggered the event) or if no
                        container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is
                        chosen only to have some well-defined way of referencing
                        a part of an object. TODO: this design is not final and
                        this field is subject to change in the future.'
                      type: string
                    kind:
                      description: "Kind of the referent. More info:
                        https://git.k8s.io/community/contributors/devel/sig-arc\
                        hitecture/api-conventions.md#types-kinds"
                      type: string
                    name:
                      description: "Name of the referent. More info:
                        https://kubernetes.io/docs/concepts/overview/working-wi\
                        th-objects/names/#names"
                      type: string
                    namespace:
                      description: "Namespace of the referent. More info:
                        https://kubernetes.io/docs/concepts/overview/working-wi\
                        th-objects/namespaces/"
                      type: string
                    resourceVersion:
                      description: "Specific resourceVersion to which this reference is made, if any.
                        More info:
                        https://git.k8s.io/community/contributors/devel/sig-arc\
                        hitecture/api-conventions.md#concurrency-control-and-co\
                        nsistency"
                      type: string
                    uid:
                      description: "UID of the referent. More info:
                        https://kubernetes.io/docs/concepts/overview/working-wi\
                        th-objects/names/#uids"
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                serverClassRef:
                  description: >-
                    ObjectReference contains enough information to let you
                    inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its
                    usage when embedded in APIs. 1. Ignored fields.  It includes
                    many fields which are not generally honored.  For instance,
                    ResourceVersion and FieldPath are both very rarely valid in
                    actual usage. 2. Invalid usage help.  It is impossible to
                    add specific help for individual usage.  In most embedded
                    usages, there are particular restrictions like, "must refer
                    only to types A and B" or "UID not honored" or "name must be
                    restricted". Those cannot be well described when embedded.
                    3. Inconsistent validation.  Because the usages are
                    different, the validation rules are different by usage,
                    which makes it hard for users to predict what will happen.
                    4. The fields are both imprecise and overly precise.  Kind
                    is not a precise mapping to a URL. This can produce
                    ambiguity during interpretation and require a REST
                    mapping.  In most cases, the dependency is on the
                    group,resource tuple and the version of the actual struct is
                    irrelevant. 5. We cannot easily change it.  Because this
                    type is embedded in many locations, updates to this type
                    will affect numerous schemas.  Don't make new APIs embed an
                    underspecified API type they do not control. 
                     Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object,
                        this string should contain a valid JSON/Go field access
                        statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container
                        within a pod, this would take on a value like:
                        "spec.containers{name}" (where "name" refers to the name
                        of the container that triggered the event) or if no
                        container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is
                        chosen only to have some well-defined way of referencing
                        a part of an object. TODO: this design is not final and
                        this field is subject to change in the future.'
                      type: string
                    kind:
                      description: "Kind of the referent. More info:
                        https://git.k8s.io/community/contributors/devel/sig-arc\
                        hitecture/api-conventions.md#types-kinds"
                      type: string
                    name:
                      description: "Name of the referent. More info:
                        https://kubernetes.io/docs/concepts/overview/working-wi\
                        th-objects/names/#names"
                      type: string
                    namespace:
                      description: "Namespace of the referent. More info:
                        https://kubernetes.io/docs/concepts/overview/working-wi\
                        th-objects/namespaces/"
                      type: string
                    resourceVersion:
                      description: "Specific resourceVersion to which this reference is made, if any.
                        More info:
                        https://git.k8s.io/community/contributors/devel/sig-arc\
                        hitecture/api-conventions.md#concurrency-control-and-co\
                        nsistency"
                      type: string
                    uid:
                      description: "UID of the referent. More info:
                        https://kubernetes.io/docs/concepts/overview/working-wi\
                        th-objects/names/#uids"
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                siderolink:
                  description: SideroLink describes state of the SideroLink tunnel.
                  properties:
                    address:
                      description: NodeAddress is the tunnel address of the node.
                      type: string
                    publicKey:
                      description: NodePublicKey is the Wireguard public key of the node.
                      type: string
                  required:
                    - address
                    - publicKey
                  type: object
              required:
                - metalMachineRef
              type: object
            status:
              description: ServerBindingState defines the observed state of ServerBinding.
              properties:
                conditions:
                  description: Conditions defines current state of the ServerBinding.
                  items:
                    description: Condition defines an observation of a Cluster API resource
                      operational state.
                    properties:
                      lastTransitionTime:
                        description: Last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.
                          If that is not known, then using the time when the API
                          field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: A human readable message indicating details about the transition.
                          This field may be empty.
                        type: string
                      reason:
                        description: The reason for the condition's last transition in CamelCase. The
                          specific API may choose whether or not this field is
                          considered a guaranteed API. This field may not be
                          empty.
                        type: string
                      severity:
                        description: Severity provides an explicit classification of Reason code, so the
                          users or machines can immediately understand the
                          current situation and act accordingly. The Severity
                          field MUST be set only when Status=False.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                          Many .condition.type values are consistent across
                          resources like Available, but because arbitrary
                          conditions can be useful (see
                          .node.status.conditions), the ability to deconflict is
                          important.
                        type: string
                    required:
                      - lastTransitionTime
                      - status
                      - type
                    type: object
                  type: array
                ready:
                  description: Ready is true when matching server is found.
                  type: boolean
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
