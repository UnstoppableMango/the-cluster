// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TCPRoute provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward connections on the port specified by the listener to a set of backends specified by the TCPRoute.
type TCPRoute struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec defines the desired state of TCPRoute.
	Spec TCPRouteSpecOutput `pulumi:"spec"`
	// Status defines the current state of TCPRoute.
	Status TCPRouteStatusPtrOutput `pulumi:"status"`
}

// NewTCPRoute registers a new resource with the given unique name, arguments, and options.
func NewTCPRoute(ctx *pulumi.Context,
	name string, args *TCPRouteArgs, opts ...pulumi.ResourceOption) (*TCPRoute, error) {
	if args == nil {
		args = &TCPRouteArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("TCPRoute")
	var resource TCPRoute
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TCPRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTCPRoute gets an existing TCPRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTCPRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TCPRouteState, opts ...pulumi.ResourceOption) (*TCPRoute, error) {
	var resource TCPRoute
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TCPRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TCPRoute resources.
type tcprouteState struct {
}

type TCPRouteState struct {
}

func (TCPRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcprouteState)(nil)).Elem()
}

type tcprouteArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of TCPRoute.
	Spec *TCPRouteSpec `pulumi:"spec"`
	// Status defines the current state of TCPRoute.
	Status *TCPRouteStatus `pulumi:"status"`
}

// The set of arguments for constructing a TCPRoute resource.
type TCPRouteArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec defines the desired state of TCPRoute.
	Spec TCPRouteSpecPtrInput
	// Status defines the current state of TCPRoute.
	Status TCPRouteStatusPtrInput
}

func (TCPRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcprouteArgs)(nil)).Elem()
}

type TCPRouteInput interface {
	pulumi.Input

	ToTCPRouteOutput() TCPRouteOutput
	ToTCPRouteOutputWithContext(ctx context.Context) TCPRouteOutput
}

func (*TCPRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPRoute)(nil)).Elem()
}

func (i *TCPRoute) ToTCPRouteOutput() TCPRouteOutput {
	return i.ToTCPRouteOutputWithContext(context.Background())
}

func (i *TCPRoute) ToTCPRouteOutputWithContext(ctx context.Context) TCPRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPRouteOutput)
}

type TCPRouteOutput struct{ *pulumi.OutputState }

func (TCPRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPRoute)(nil)).Elem()
}

func (o TCPRouteOutput) ToTCPRouteOutput() TCPRouteOutput {
	return o
}

func (o TCPRouteOutput) ToTCPRouteOutputWithContext(ctx context.Context) TCPRouteOutput {
	return o
}

func (o TCPRouteOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPRoute) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TCPRouteOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPRoute) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TCPRouteOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *TCPRoute) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired state of TCPRoute.
func (o TCPRouteOutput) Spec() TCPRouteSpecOutput {
	return o.ApplyT(func(v *TCPRoute) TCPRouteSpecOutput { return v.Spec }).(TCPRouteSpecOutput)
}

// Status defines the current state of TCPRoute.
func (o TCPRouteOutput) Status() TCPRouteStatusPtrOutput {
	return o.ApplyT(func(v *TCPRoute) TCPRouteStatusPtrOutput { return v.Status }).(TCPRouteStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TCPRouteInput)(nil)).Elem(), &TCPRoute{})
	pulumi.RegisterOutputType(TCPRouteOutput{})
}
