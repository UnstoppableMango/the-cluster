// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GRPCRoute provides a way to route gRPC requests. This includes the capability to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header. Filters can be used to specify additional processing steps. Backends specify where matching requests will be routed.
//
//	GRPCRoute falls under extended support within the Gateway API. Within the following specification, the word "MUST" indicates that an implementation supporting GRPCRoute must conform to the indicated requirement, but an implementation not supporting this route type need not follow the requirement unless explicitly indicated.
//	Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via ALPN. If the implementation does not support this, then it MUST set the "Accepted" condition to "False" for the affected listener with a reason of "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections with an upgrade from HTTP/1.
//	Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST support HTTP/2 over cleartext TCP (h2c, https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial upgrade from HTTP/1.1, i.e. with prior knowledge (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation does not support this, then it MUST set the "Accepted" condition to "False" for the affected listener with a reason of "UnsupportedProtocol". Implementations MAY also accept HTTP/2 connections with an upgrade from HTTP/1, i.e. without prior knowledge.
type GRPCRoute struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec defines the desired state of GRPCRoute.
	Spec GRPCRouteSpecPtrOutput `pulumi:"spec"`
	// Status defines the current state of GRPCRoute.
	Status GRPCRouteStatusPtrOutput `pulumi:"status"`
}

// NewGRPCRoute registers a new resource with the given unique name, arguments, and options.
func NewGRPCRoute(ctx *pulumi.Context,
	name string, args *GRPCRouteArgs, opts ...pulumi.ResourceOption) (*GRPCRoute, error) {
	if args == nil {
		args = &GRPCRouteArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("GRPCRoute")
	var resource GRPCRoute
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:GRPCRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGRPCRoute gets an existing GRPCRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGRPCRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GRPCRouteState, opts ...pulumi.ResourceOption) (*GRPCRoute, error) {
	var resource GRPCRoute
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:GRPCRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GRPCRoute resources.
type grpcrouteState struct {
}

type GRPCRouteState struct {
}

func (GRPCRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcrouteState)(nil)).Elem()
}

type grpcrouteArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of GRPCRoute.
	Spec *GRPCRouteSpec `pulumi:"spec"`
	// Status defines the current state of GRPCRoute.
	Status *GRPCRouteStatus `pulumi:"status"`
}

// The set of arguments for constructing a GRPCRoute resource.
type GRPCRouteArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec defines the desired state of GRPCRoute.
	Spec GRPCRouteSpecPtrInput
	// Status defines the current state of GRPCRoute.
	Status GRPCRouteStatusPtrInput
}

func (GRPCRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcrouteArgs)(nil)).Elem()
}

type GRPCRouteInput interface {
	pulumi.Input

	ToGRPCRouteOutput() GRPCRouteOutput
	ToGRPCRouteOutputWithContext(ctx context.Context) GRPCRouteOutput
}

func (*GRPCRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRoute)(nil)).Elem()
}

func (i *GRPCRoute) ToGRPCRouteOutput() GRPCRouteOutput {
	return i.ToGRPCRouteOutputWithContext(context.Background())
}

func (i *GRPCRoute) ToGRPCRouteOutputWithContext(ctx context.Context) GRPCRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteOutput)
}

type GRPCRouteOutput struct{ *pulumi.OutputState }

func (GRPCRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRoute)(nil)).Elem()
}

func (o GRPCRouteOutput) ToGRPCRouteOutput() GRPCRouteOutput {
	return o
}

func (o GRPCRouteOutput) ToGRPCRouteOutputWithContext(ctx context.Context) GRPCRouteOutput {
	return o
}

func (o GRPCRouteOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRoute) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GRPCRouteOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRoute) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GRPCRouteOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *GRPCRoute) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired state of GRPCRoute.
func (o GRPCRouteOutput) Spec() GRPCRouteSpecPtrOutput {
	return o.ApplyT(func(v *GRPCRoute) GRPCRouteSpecPtrOutput { return v.Spec }).(GRPCRouteSpecPtrOutput)
}

// Status defines the current state of GRPCRoute.
func (o GRPCRouteOutput) Status() GRPCRouteStatusPtrOutput {
	return o.ApplyT(func(v *GRPCRoute) GRPCRouteStatusPtrOutput { return v.Status }).(GRPCRouteStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteInput)(nil)).Elem(), &GRPCRoute{})
	pulumi.RegisterOutputType(GRPCRouteOutput{})
}
