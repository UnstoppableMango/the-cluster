// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The TLSRoute resource is similar to TCPRoute, but can be configured to match against TLS-specific metadata. This allows more flexibility in matching streams for a given TLS listener.
//
//	If you need to forward traffic to a single target for a TLS listener, you could choose to use a TCPRoute with a TLS listener.
type TLSRoute struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec defines the desired state of TLSRoute.
	Spec TLSRouteSpecOutput `pulumi:"spec"`
	// Status defines the current state of TLSRoute.
	Status TLSRouteStatusPtrOutput `pulumi:"status"`
}

// NewTLSRoute registers a new resource with the given unique name, arguments, and options.
func NewTLSRoute(ctx *pulumi.Context,
	name string, args *TLSRouteArgs, opts ...pulumi.ResourceOption) (*TLSRoute, error) {
	if args == nil {
		args = &TLSRouteArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("TLSRoute")
	var resource TLSRoute
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TLSRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTLSRoute gets an existing TLSRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTLSRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TLSRouteState, opts ...pulumi.ResourceOption) (*TLSRoute, error) {
	var resource TLSRoute
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TLSRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TLSRoute resources.
type tlsrouteState struct {
}

type TLSRouteState struct {
}

func (TLSRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsrouteState)(nil)).Elem()
}

type tlsrouteArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of TLSRoute.
	Spec *TLSRouteSpec `pulumi:"spec"`
	// Status defines the current state of TLSRoute.
	Status *TLSRouteStatus `pulumi:"status"`
}

// The set of arguments for constructing a TLSRoute resource.
type TLSRouteArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec defines the desired state of TLSRoute.
	Spec TLSRouteSpecPtrInput
	// Status defines the current state of TLSRoute.
	Status TLSRouteStatusPtrInput
}

func (TLSRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsrouteArgs)(nil)).Elem()
}

type TLSRouteInput interface {
	pulumi.Input

	ToTLSRouteOutput() TLSRouteOutput
	ToTLSRouteOutputWithContext(ctx context.Context) TLSRouteOutput
}

func (*TLSRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSRoute)(nil)).Elem()
}

func (i *TLSRoute) ToTLSRouteOutput() TLSRouteOutput {
	return i.ToTLSRouteOutputWithContext(context.Background())
}

func (i *TLSRoute) ToTLSRouteOutputWithContext(ctx context.Context) TLSRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSRouteOutput)
}

type TLSRouteOutput struct{ *pulumi.OutputState }

func (TLSRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSRoute)(nil)).Elem()
}

func (o TLSRouteOutput) ToTLSRouteOutput() TLSRouteOutput {
	return o
}

func (o TLSRouteOutput) ToTLSRouteOutputWithContext(ctx context.Context) TLSRouteOutput {
	return o
}

func (o TLSRouteOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSRoute) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TLSRouteOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSRoute) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TLSRouteOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *TLSRoute) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired state of TLSRoute.
func (o TLSRouteOutput) Spec() TLSRouteSpecOutput {
	return o.ApplyT(func(v *TLSRoute) TLSRouteSpecOutput { return v.Spec }).(TLSRouteSpecOutput)
}

// Status defines the current state of TLSRoute.
func (o TLSRouteOutput) Status() TLSRouteStatusPtrOutput {
	return o.ApplyT(func(v *TLSRoute) TLSRouteStatusPtrOutput { return v.Status }).(TLSRouteStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TLSRouteInput)(nil)).Elem(), &TLSRoute{})
	pulumi.RegisterOutputType(TLSRouteOutput{})
}
