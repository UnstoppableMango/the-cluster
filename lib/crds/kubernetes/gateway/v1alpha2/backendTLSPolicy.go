// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BackendTLSPolicy provides a way to configure how a Gateway connects to a Backend via TLS.
type BackendTLSPolicy struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec defines the desired state of BackendTLSPolicy.
	Spec BackendTLSPolicySpecOutput `pulumi:"spec"`
	// Status defines the current state of BackendTLSPolicy.
	Status BackendTLSPolicyStatusPtrOutput `pulumi:"status"`
}

// NewBackendTLSPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackendTLSPolicy(ctx *pulumi.Context,
	name string, args *BackendTLSPolicyArgs, opts ...pulumi.ResourceOption) (*BackendTLSPolicy, error) {
	if args == nil {
		args = &BackendTLSPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("BackendTLSPolicy")
	var resource BackendTLSPolicy
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:BackendTLSPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendTLSPolicy gets an existing BackendTLSPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendTLSPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendTLSPolicyState, opts ...pulumi.ResourceOption) (*BackendTLSPolicy, error) {
	var resource BackendTLSPolicy
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:BackendTLSPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendTLSPolicy resources.
type backendTLSPolicyState struct {
}

type BackendTLSPolicyState struct {
}

func (BackendTLSPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendTLSPolicyState)(nil)).Elem()
}

type backendTLSPolicyArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of BackendTLSPolicy.
	Spec *BackendTLSPolicySpec `pulumi:"spec"`
	// Status defines the current state of BackendTLSPolicy.
	Status *BackendTLSPolicyStatus `pulumi:"status"`
}

// The set of arguments for constructing a BackendTLSPolicy resource.
type BackendTLSPolicyArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec defines the desired state of BackendTLSPolicy.
	Spec BackendTLSPolicySpecPtrInput
	// Status defines the current state of BackendTLSPolicy.
	Status BackendTLSPolicyStatusPtrInput
}

func (BackendTLSPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendTLSPolicyArgs)(nil)).Elem()
}

type BackendTLSPolicyInput interface {
	pulumi.Input

	ToBackendTLSPolicyOutput() BackendTLSPolicyOutput
	ToBackendTLSPolicyOutputWithContext(ctx context.Context) BackendTLSPolicyOutput
}

func (*BackendTLSPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTLSPolicy)(nil)).Elem()
}

func (i *BackendTLSPolicy) ToBackendTLSPolicyOutput() BackendTLSPolicyOutput {
	return i.ToBackendTLSPolicyOutputWithContext(context.Background())
}

func (i *BackendTLSPolicy) ToBackendTLSPolicyOutputWithContext(ctx context.Context) BackendTLSPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTLSPolicyOutput)
}

type BackendTLSPolicyOutput struct{ *pulumi.OutputState }

func (BackendTLSPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTLSPolicy)(nil)).Elem()
}

func (o BackendTLSPolicyOutput) ToBackendTLSPolicyOutput() BackendTLSPolicyOutput {
	return o
}

func (o BackendTLSPolicyOutput) ToBackendTLSPolicyOutputWithContext(ctx context.Context) BackendTLSPolicyOutput {
	return o
}

func (o BackendTLSPolicyOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o BackendTLSPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o BackendTLSPolicyOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired state of BackendTLSPolicy.
func (o BackendTLSPolicyOutput) Spec() BackendTLSPolicySpecOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) BackendTLSPolicySpecOutput { return v.Spec }).(BackendTLSPolicySpecOutput)
}

// Status defines the current state of BackendTLSPolicy.
func (o BackendTLSPolicyOutput) Status() BackendTLSPolicyStatusPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) BackendTLSPolicyStatusPtrOutput { return v.Status }).(BackendTLSPolicyStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendTLSPolicyInput)(nil)).Elem(), &BackendTLSPolicy{})
	pulumi.RegisterOutputType(BackendTLSPolicyOutput{})
}
