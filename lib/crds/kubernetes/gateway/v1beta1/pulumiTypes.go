// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy.
//
//	Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within.
//	All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant.
//	ReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed.
type ReferenceGrantType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of ReferenceGrant.
	Spec *ReferenceGrantSpec `pulumi:"spec"`
}

type ReferenceGrantMetadata struct {
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpec struct {
	// From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR.
	//  Support: Core
	From []ReferenceGrantSpecFrom `pulumi:"from"`
	// To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR.
	//  Support: Core
	To []ReferenceGrantSpecTo `pulumi:"to"`
}

// ReferenceGrantSpecInput is an input type that accepts ReferenceGrantSpecArgs and ReferenceGrantSpecOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecInput` via:
//
//	ReferenceGrantSpecArgs{...}
type ReferenceGrantSpecInput interface {
	pulumi.Input

	ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput
	ToReferenceGrantSpecOutputWithContext(context.Context) ReferenceGrantSpecOutput
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecArgs struct {
	// From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR.
	//  Support: Core
	From ReferenceGrantSpecFromArrayInput `pulumi:"from"`
	// To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR.
	//  Support: Core
	To ReferenceGrantSpecToArrayInput `pulumi:"to"`
}

func (ReferenceGrantSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpec)(nil)).Elem()
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput {
	return i.ToReferenceGrantSpecOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecOutputWithContext(ctx context.Context) ReferenceGrantSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecOutput)
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return i.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecOutput).ToReferenceGrantSpecPtrOutputWithContext(ctx)
}

// ReferenceGrantSpecPtrInput is an input type that accepts ReferenceGrantSpecArgs, ReferenceGrantSpecPtr and ReferenceGrantSpecPtrOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecPtrInput` via:
//
//	        ReferenceGrantSpecArgs{...}
//
//	or:
//
//	        nil
type ReferenceGrantSpecPtrInput interface {
	pulumi.Input

	ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput
	ToReferenceGrantSpecPtrOutputWithContext(context.Context) ReferenceGrantSpecPtrOutput
}

type referenceGrantSpecPtrType ReferenceGrantSpecArgs

func ReferenceGrantSpecPtr(v *ReferenceGrantSpecArgs) ReferenceGrantSpecPtrInput {
	return (*referenceGrantSpecPtrType)(v)
}

func (*referenceGrantSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpec)(nil)).Elem()
}

func (i *referenceGrantSpecPtrType) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return i.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (i *referenceGrantSpecPtrType) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecPtrOutput)
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpec)(nil)).Elem()
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput {
	return o
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecOutputWithContext(ctx context.Context) ReferenceGrantSpecOutput {
	return o
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return o.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceGrantSpec) *ReferenceGrantSpec {
		return &v
	}).(ReferenceGrantSpecPtrOutput)
}

// From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR.
//
//	Support: Core
func (o ReferenceGrantSpecOutput) From() ReferenceGrantSpecFromArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpec) []ReferenceGrantSpecFrom { return v.From }).(ReferenceGrantSpecFromArrayOutput)
}

// To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR.
//
//	Support: Core
func (o ReferenceGrantSpecOutput) To() ReferenceGrantSpecToArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpec) []ReferenceGrantSpecTo { return v.To }).(ReferenceGrantSpecToArrayOutput)
}

type ReferenceGrantSpecPtrOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpec)(nil)).Elem()
}

func (o ReferenceGrantSpecPtrOutput) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return o
}

func (o ReferenceGrantSpecPtrOutput) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return o
}

func (o ReferenceGrantSpecPtrOutput) Elem() ReferenceGrantSpecOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) ReferenceGrantSpec {
		if v != nil {
			return *v
		}
		var ret ReferenceGrantSpec
		return ret
	}).(ReferenceGrantSpecOutput)
}

// From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR.
//
//	Support: Core
func (o ReferenceGrantSpecPtrOutput) From() ReferenceGrantSpecFromArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) []ReferenceGrantSpecFrom {
		if v == nil {
			return nil
		}
		return v.From
	}).(ReferenceGrantSpecFromArrayOutput)
}

// To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR.
//
//	Support: Core
func (o ReferenceGrantSpecPtrOutput) To() ReferenceGrantSpecToArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) []ReferenceGrantSpecTo {
		if v == nil {
			return nil
		}
		return v.To
	}).(ReferenceGrantSpecToArrayOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFrom struct {
	// Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
	//  Support: Core
	Group string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field.
	//  When used to permit a SecretObjectReference:
	//  * Gateway
	//     When used to permit a BackendObjectReference:
	//  * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
	Kind string `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//  Support: Core
	Namespace string `pulumi:"namespace"`
}

// ReferenceGrantSpecFromInput is an input type that accepts ReferenceGrantSpecFromArgs and ReferenceGrantSpecFromOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromInput` via:
//
//	ReferenceGrantSpecFromArgs{...}
type ReferenceGrantSpecFromInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput
	ToReferenceGrantSpecFromOutputWithContext(context.Context) ReferenceGrantSpecFromOutput
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromArgs struct {
	// Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
	//  Support: Core
	Group pulumi.StringInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field.
	//  When used to permit a SecretObjectReference:
	//  * Gateway
	//     When used to permit a BackendObjectReference:
	//  * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
	Kind pulumi.StringInput `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//  Support: Core
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ReferenceGrantSpecFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFrom)(nil)).Elem()
}

func (i ReferenceGrantSpecFromArgs) ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput {
	return i.ToReferenceGrantSpecFromOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromArgs) ToReferenceGrantSpecFromOutputWithContext(ctx context.Context) ReferenceGrantSpecFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromOutput)
}

// ReferenceGrantSpecFromArrayInput is an input type that accepts ReferenceGrantSpecFromArray and ReferenceGrantSpecFromArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromArrayInput` via:
//
//	ReferenceGrantSpecFromArray{ ReferenceGrantSpecFromArgs{...} }
type ReferenceGrantSpecFromArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput
	ToReferenceGrantSpecFromArrayOutputWithContext(context.Context) ReferenceGrantSpecFromArrayOutput
}

type ReferenceGrantSpecFromArray []ReferenceGrantSpecFromInput

func (ReferenceGrantSpecFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFrom)(nil)).Elem()
}

func (i ReferenceGrantSpecFromArray) ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput {
	return i.ToReferenceGrantSpecFromArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromArray) ToReferenceGrantSpecFromArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromArrayOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFrom)(nil)).Elem()
}

func (o ReferenceGrantSpecFromOutput) ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput {
	return o
}

func (o ReferenceGrantSpecFromOutput) ToReferenceGrantSpecFromOutputWithContext(ctx context.Context) ReferenceGrantSpecFromOutput {
	return o
}

// Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
//
//	Support: Core
func (o ReferenceGrantSpecFromOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) string { return v.Group }).(pulumi.StringOutput)
}

// Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field.
//
//	When used to permit a SecretObjectReference:
//	* Gateway
//	   When used to permit a BackendObjectReference:
//	* GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
func (o ReferenceGrantSpecFromOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) string { return v.Kind }).(pulumi.StringOutput)
}

// Namespace is the namespace of the referent.
//
//	Support: Core
func (o ReferenceGrantSpecFromOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) string { return v.Namespace }).(pulumi.StringOutput)
}

type ReferenceGrantSpecFromArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFrom)(nil)).Elem()
}

func (o ReferenceGrantSpecFromArrayOutput) ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromArrayOutput) ToReferenceGrantSpecFromArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecFrom {
		return vs[0].([]ReferenceGrantSpecFrom)[vs[1].(int)]
	}).(ReferenceGrantSpecFromOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the references.
type ReferenceGrantSpecTo struct {
	// Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
	//  Support: Core
	Group string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field:
	//  * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
	Kind string `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
	Name *string `pulumi:"name"`
}

// ReferenceGrantSpecToInput is an input type that accepts ReferenceGrantSpecToArgs and ReferenceGrantSpecToOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToInput` via:
//
//	ReferenceGrantSpecToArgs{...}
type ReferenceGrantSpecToInput interface {
	pulumi.Input

	ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput
	ToReferenceGrantSpecToOutputWithContext(context.Context) ReferenceGrantSpecToOutput
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the references.
type ReferenceGrantSpecToArgs struct {
	// Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
	//  Support: Core
	Group pulumi.StringInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field:
	//  * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ReferenceGrantSpecToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecTo)(nil)).Elem()
}

func (i ReferenceGrantSpecToArgs) ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput {
	return i.ToReferenceGrantSpecToOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToArgs) ToReferenceGrantSpecToOutputWithContext(ctx context.Context) ReferenceGrantSpecToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToOutput)
}

// ReferenceGrantSpecToArrayInput is an input type that accepts ReferenceGrantSpecToArray and ReferenceGrantSpecToArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToArrayInput` via:
//
//	ReferenceGrantSpecToArray{ ReferenceGrantSpecToArgs{...} }
type ReferenceGrantSpecToArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput
	ToReferenceGrantSpecToArrayOutputWithContext(context.Context) ReferenceGrantSpecToArrayOutput
}

type ReferenceGrantSpecToArray []ReferenceGrantSpecToInput

func (ReferenceGrantSpecToArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecTo)(nil)).Elem()
}

func (i ReferenceGrantSpecToArray) ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput {
	return i.ToReferenceGrantSpecToArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToArray) ToReferenceGrantSpecToArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToArrayOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the references.
type ReferenceGrantSpecToOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecTo)(nil)).Elem()
}

func (o ReferenceGrantSpecToOutput) ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput {
	return o
}

func (o ReferenceGrantSpecToOutput) ToReferenceGrantSpecToOutputWithContext(ctx context.Context) ReferenceGrantSpecToOutput {
	return o
}

// Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
//
//	Support: Core
func (o ReferenceGrantSpecToOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) string { return v.Group }).(pulumi.StringOutput)
}

// Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field:
//   - Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
func (o ReferenceGrantSpecToOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
func (o ReferenceGrantSpecToOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ReferenceGrantSpecToArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecTo)(nil)).Elem()
}

func (o ReferenceGrantSpecToArrayOutput) ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput {
	return o
}

func (o ReferenceGrantSpecToArrayOutput) ToReferenceGrantSpecToArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToArrayOutput {
	return o
}

func (o ReferenceGrantSpecToArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecToOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecTo {
		return vs[0].([]ReferenceGrantSpecTo)[vs[1].(int)]
	}).(ReferenceGrantSpecToOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecInput)(nil)).Elem(), ReferenceGrantSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecPtrInput)(nil)).Elem(), ReferenceGrantSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromInput)(nil)).Elem(), ReferenceGrantSpecFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromArrayInput)(nil)).Elem(), ReferenceGrantSpecFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToInput)(nil)).Elem(), ReferenceGrantSpecToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToArrayInput)(nil)).Elem(), ReferenceGrantSpecToArray{})
	pulumi.RegisterOutputType(ReferenceGrantSpecOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecPtrOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromArrayOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToArrayOutput{})
}
