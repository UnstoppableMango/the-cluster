// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ExtensionConfig is the Schema for the ExtensionConfig API.
type ExtensionConfigType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ExtensionConfigSpec is the desired state of the ExtensionConfig
	Spec *ExtensionConfigSpec `pulumi:"spec"`
	// ExtensionConfigStatus is the current state of the ExtensionConfig
	Status *ExtensionConfigStatus `pulumi:"status"`
}

type ExtensionConfigMetadata struct {
}

// ExtensionConfigSpec is the desired state of the ExtensionConfig
type ExtensionConfigSpec struct {
	// ClientConfig defines how to communicate with the Extension server.
	ClientConfig ExtensionConfigSpecClientConfig `pulumi:"clientConfig"`
	// NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
	NamespaceSelector *ExtensionConfigSpecNamespaceSelector `pulumi:"namespaceSelector"`
	// Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
	Settings map[string]string `pulumi:"settings"`
}

// ExtensionConfigSpecInput is an input type that accepts ExtensionConfigSpecArgs and ExtensionConfigSpecOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecInput` via:
//
//	ExtensionConfigSpecArgs{...}
type ExtensionConfigSpecInput interface {
	pulumi.Input

	ToExtensionConfigSpecOutput() ExtensionConfigSpecOutput
	ToExtensionConfigSpecOutputWithContext(context.Context) ExtensionConfigSpecOutput
}

// ExtensionConfigSpec is the desired state of the ExtensionConfig
type ExtensionConfigSpecArgs struct {
	// ClientConfig defines how to communicate with the Extension server.
	ClientConfig ExtensionConfigSpecClientConfigInput `pulumi:"clientConfig"`
	// NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
	NamespaceSelector ExtensionConfigSpecNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
	Settings pulumi.StringMapInput `pulumi:"settings"`
}

func (ExtensionConfigSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpec)(nil)).Elem()
}

func (i ExtensionConfigSpecArgs) ToExtensionConfigSpecOutput() ExtensionConfigSpecOutput {
	return i.ToExtensionConfigSpecOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecArgs) ToExtensionConfigSpecOutputWithContext(ctx context.Context) ExtensionConfigSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecOutput)
}

func (i ExtensionConfigSpecArgs) ToExtensionConfigSpecPtrOutput() ExtensionConfigSpecPtrOutput {
	return i.ToExtensionConfigSpecPtrOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecArgs) ToExtensionConfigSpecPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecOutput).ToExtensionConfigSpecPtrOutputWithContext(ctx)
}

// ExtensionConfigSpecPtrInput is an input type that accepts ExtensionConfigSpecArgs, ExtensionConfigSpecPtr and ExtensionConfigSpecPtrOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecPtrInput` via:
//
//	        ExtensionConfigSpecArgs{...}
//
//	or:
//
//	        nil
type ExtensionConfigSpecPtrInput interface {
	pulumi.Input

	ToExtensionConfigSpecPtrOutput() ExtensionConfigSpecPtrOutput
	ToExtensionConfigSpecPtrOutputWithContext(context.Context) ExtensionConfigSpecPtrOutput
}

type extensionConfigSpecPtrType ExtensionConfigSpecArgs

func ExtensionConfigSpecPtr(v *ExtensionConfigSpecArgs) ExtensionConfigSpecPtrInput {
	return (*extensionConfigSpecPtrType)(v)
}

func (*extensionConfigSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpec)(nil)).Elem()
}

func (i *extensionConfigSpecPtrType) ToExtensionConfigSpecPtrOutput() ExtensionConfigSpecPtrOutput {
	return i.ToExtensionConfigSpecPtrOutputWithContext(context.Background())
}

func (i *extensionConfigSpecPtrType) ToExtensionConfigSpecPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecPtrOutput)
}

// ExtensionConfigSpec is the desired state of the ExtensionConfig
type ExtensionConfigSpecOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpec)(nil)).Elem()
}

func (o ExtensionConfigSpecOutput) ToExtensionConfigSpecOutput() ExtensionConfigSpecOutput {
	return o
}

func (o ExtensionConfigSpecOutput) ToExtensionConfigSpecOutputWithContext(ctx context.Context) ExtensionConfigSpecOutput {
	return o
}

func (o ExtensionConfigSpecOutput) ToExtensionConfigSpecPtrOutput() ExtensionConfigSpecPtrOutput {
	return o.ToExtensionConfigSpecPtrOutputWithContext(context.Background())
}

func (o ExtensionConfigSpecOutput) ToExtensionConfigSpecPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtensionConfigSpec) *ExtensionConfigSpec {
		return &v
	}).(ExtensionConfigSpecPtrOutput)
}

// ClientConfig defines how to communicate with the Extension server.
func (o ExtensionConfigSpecOutput) ClientConfig() ExtensionConfigSpecClientConfigOutput {
	return o.ApplyT(func(v ExtensionConfigSpec) ExtensionConfigSpecClientConfig { return v.ClientConfig }).(ExtensionConfigSpecClientConfigOutput)
}

// NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
func (o ExtensionConfigSpecOutput) NamespaceSelector() ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v ExtensionConfigSpec) *ExtensionConfigSpecNamespaceSelector { return v.NamespaceSelector }).(ExtensionConfigSpecNamespaceSelectorPtrOutput)
}

// Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
func (o ExtensionConfigSpecOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExtensionConfigSpec) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

type ExtensionConfigSpecPtrOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpec)(nil)).Elem()
}

func (o ExtensionConfigSpecPtrOutput) ToExtensionConfigSpecPtrOutput() ExtensionConfigSpecPtrOutput {
	return o
}

func (o ExtensionConfigSpecPtrOutput) ToExtensionConfigSpecPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecPtrOutput {
	return o
}

func (o ExtensionConfigSpecPtrOutput) Elem() ExtensionConfigSpecOutput {
	return o.ApplyT(func(v *ExtensionConfigSpec) ExtensionConfigSpec {
		if v != nil {
			return *v
		}
		var ret ExtensionConfigSpec
		return ret
	}).(ExtensionConfigSpecOutput)
}

// ClientConfig defines how to communicate with the Extension server.
func (o ExtensionConfigSpecPtrOutput) ClientConfig() ExtensionConfigSpecClientConfigPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpec) *ExtensionConfigSpecClientConfig {
		if v == nil {
			return nil
		}
		return &v.ClientConfig
	}).(ExtensionConfigSpecClientConfigPtrOutput)
}

// NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
func (o ExtensionConfigSpecPtrOutput) NamespaceSelector() ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpec) *ExtensionConfigSpecNamespaceSelector {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(ExtensionConfigSpecNamespaceSelectorPtrOutput)
}

// Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
func (o ExtensionConfigSpecPtrOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExtensionConfigSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.StringMapOutput)
}

// ClientConfig defines how to communicate with the Extension server.
type ExtensionConfigSpecClientConfig struct {
	// CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
	CaBundle *string `pulumi:"caBundle"`
	// Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified.
	//  If the Extension server is running within a cluster, then you should use `service`.
	Service *ExtensionConfigSpecClientConfigService `pulumi:"service"`
	// URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified.
	//  The scheme must be "https".
	//  The `host` should not refer to a service running in the cluster; use the `service` field instead.
	//  A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
	//  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
	Url *string `pulumi:"url"`
}

// ExtensionConfigSpecClientConfigInput is an input type that accepts ExtensionConfigSpecClientConfigArgs and ExtensionConfigSpecClientConfigOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecClientConfigInput` via:
//
//	ExtensionConfigSpecClientConfigArgs{...}
type ExtensionConfigSpecClientConfigInput interface {
	pulumi.Input

	ToExtensionConfigSpecClientConfigOutput() ExtensionConfigSpecClientConfigOutput
	ToExtensionConfigSpecClientConfigOutputWithContext(context.Context) ExtensionConfigSpecClientConfigOutput
}

// ClientConfig defines how to communicate with the Extension server.
type ExtensionConfigSpecClientConfigArgs struct {
	// CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
	CaBundle pulumi.StringPtrInput `pulumi:"caBundle"`
	// Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified.
	//  If the Extension server is running within a cluster, then you should use `service`.
	Service ExtensionConfigSpecClientConfigServicePtrInput `pulumi:"service"`
	// URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified.
	//  The scheme must be "https".
	//  The `host` should not refer to a service running in the cluster; use the `service` field instead.
	//  A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
	//  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ExtensionConfigSpecClientConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecClientConfig)(nil)).Elem()
}

func (i ExtensionConfigSpecClientConfigArgs) ToExtensionConfigSpecClientConfigOutput() ExtensionConfigSpecClientConfigOutput {
	return i.ToExtensionConfigSpecClientConfigOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecClientConfigArgs) ToExtensionConfigSpecClientConfigOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecClientConfigOutput)
}

func (i ExtensionConfigSpecClientConfigArgs) ToExtensionConfigSpecClientConfigPtrOutput() ExtensionConfigSpecClientConfigPtrOutput {
	return i.ToExtensionConfigSpecClientConfigPtrOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecClientConfigArgs) ToExtensionConfigSpecClientConfigPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecClientConfigOutput).ToExtensionConfigSpecClientConfigPtrOutputWithContext(ctx)
}

// ExtensionConfigSpecClientConfigPtrInput is an input type that accepts ExtensionConfigSpecClientConfigArgs, ExtensionConfigSpecClientConfigPtr and ExtensionConfigSpecClientConfigPtrOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecClientConfigPtrInput` via:
//
//	        ExtensionConfigSpecClientConfigArgs{...}
//
//	or:
//
//	        nil
type ExtensionConfigSpecClientConfigPtrInput interface {
	pulumi.Input

	ToExtensionConfigSpecClientConfigPtrOutput() ExtensionConfigSpecClientConfigPtrOutput
	ToExtensionConfigSpecClientConfigPtrOutputWithContext(context.Context) ExtensionConfigSpecClientConfigPtrOutput
}

type extensionConfigSpecClientConfigPtrType ExtensionConfigSpecClientConfigArgs

func ExtensionConfigSpecClientConfigPtr(v *ExtensionConfigSpecClientConfigArgs) ExtensionConfigSpecClientConfigPtrInput {
	return (*extensionConfigSpecClientConfigPtrType)(v)
}

func (*extensionConfigSpecClientConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpecClientConfig)(nil)).Elem()
}

func (i *extensionConfigSpecClientConfigPtrType) ToExtensionConfigSpecClientConfigPtrOutput() ExtensionConfigSpecClientConfigPtrOutput {
	return i.ToExtensionConfigSpecClientConfigPtrOutputWithContext(context.Background())
}

func (i *extensionConfigSpecClientConfigPtrType) ToExtensionConfigSpecClientConfigPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecClientConfigPtrOutput)
}

// ClientConfig defines how to communicate with the Extension server.
type ExtensionConfigSpecClientConfigOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecClientConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecClientConfig)(nil)).Elem()
}

func (o ExtensionConfigSpecClientConfigOutput) ToExtensionConfigSpecClientConfigOutput() ExtensionConfigSpecClientConfigOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigOutput) ToExtensionConfigSpecClientConfigOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigOutput) ToExtensionConfigSpecClientConfigPtrOutput() ExtensionConfigSpecClientConfigPtrOutput {
	return o.ToExtensionConfigSpecClientConfigPtrOutputWithContext(context.Background())
}

func (o ExtensionConfigSpecClientConfigOutput) ToExtensionConfigSpecClientConfigPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtensionConfigSpecClientConfig) *ExtensionConfigSpecClientConfig {
		return &v
	}).(ExtensionConfigSpecClientConfigPtrOutput)
}

// CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
func (o ExtensionConfigSpecClientConfigOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionConfigSpecClientConfig) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

// Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified.
//
//	If the Extension server is running within a cluster, then you should use `service`.
func (o ExtensionConfigSpecClientConfigOutput) Service() ExtensionConfigSpecClientConfigServicePtrOutput {
	return o.ApplyT(func(v ExtensionConfigSpecClientConfig) *ExtensionConfigSpecClientConfigService { return v.Service }).(ExtensionConfigSpecClientConfigServicePtrOutput)
}

// URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified.
//
//	The scheme must be "https".
//	The `host` should not refer to a service running in the cluster; use the `service` field instead.
//	A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
//	Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
func (o ExtensionConfigSpecClientConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionConfigSpecClientConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ExtensionConfigSpecClientConfigPtrOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecClientConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpecClientConfig)(nil)).Elem()
}

func (o ExtensionConfigSpecClientConfigPtrOutput) ToExtensionConfigSpecClientConfigPtrOutput() ExtensionConfigSpecClientConfigPtrOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigPtrOutput) ToExtensionConfigSpecClientConfigPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigPtrOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigPtrOutput) Elem() ExtensionConfigSpecClientConfigOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfig) ExtensionConfigSpecClientConfig {
		if v != nil {
			return *v
		}
		var ret ExtensionConfigSpecClientConfig
		return ret
	}).(ExtensionConfigSpecClientConfigOutput)
}

// CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
func (o ExtensionConfigSpecClientConfigPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

// Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified.
//
//	If the Extension server is running within a cluster, then you should use `service`.
func (o ExtensionConfigSpecClientConfigPtrOutput) Service() ExtensionConfigSpecClientConfigServicePtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfig) *ExtensionConfigSpecClientConfigService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ExtensionConfigSpecClientConfigServicePtrOutput)
}

// URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified.
//
//	The scheme must be "https".
//	The `host` should not refer to a service running in the cluster; use the `service` field instead.
//	A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
//	Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
func (o ExtensionConfigSpecClientConfigPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfig) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified.
//
//	If the Extension server is running within a cluster, then you should use `service`.
type ExtensionConfigSpecClientConfigService struct {
	// Name is the name of the service.
	Name string `pulumi:"name"`
	// Namespace is the namespace of the service.
	Namespace string `pulumi:"namespace"`
	// Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
	Path *string `pulumi:"path"`
	// Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
	Port *int `pulumi:"port"`
}

// ExtensionConfigSpecClientConfigServiceInput is an input type that accepts ExtensionConfigSpecClientConfigServiceArgs and ExtensionConfigSpecClientConfigServiceOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecClientConfigServiceInput` via:
//
//	ExtensionConfigSpecClientConfigServiceArgs{...}
type ExtensionConfigSpecClientConfigServiceInput interface {
	pulumi.Input

	ToExtensionConfigSpecClientConfigServiceOutput() ExtensionConfigSpecClientConfigServiceOutput
	ToExtensionConfigSpecClientConfigServiceOutputWithContext(context.Context) ExtensionConfigSpecClientConfigServiceOutput
}

// Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified.
//
//	If the Extension server is running within a cluster, then you should use `service`.
type ExtensionConfigSpecClientConfigServiceArgs struct {
	// Name is the name of the service.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of the service.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ExtensionConfigSpecClientConfigServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecClientConfigService)(nil)).Elem()
}

func (i ExtensionConfigSpecClientConfigServiceArgs) ToExtensionConfigSpecClientConfigServiceOutput() ExtensionConfigSpecClientConfigServiceOutput {
	return i.ToExtensionConfigSpecClientConfigServiceOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecClientConfigServiceArgs) ToExtensionConfigSpecClientConfigServiceOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecClientConfigServiceOutput)
}

func (i ExtensionConfigSpecClientConfigServiceArgs) ToExtensionConfigSpecClientConfigServicePtrOutput() ExtensionConfigSpecClientConfigServicePtrOutput {
	return i.ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecClientConfigServiceArgs) ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecClientConfigServiceOutput).ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(ctx)
}

// ExtensionConfigSpecClientConfigServicePtrInput is an input type that accepts ExtensionConfigSpecClientConfigServiceArgs, ExtensionConfigSpecClientConfigServicePtr and ExtensionConfigSpecClientConfigServicePtrOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecClientConfigServicePtrInput` via:
//
//	        ExtensionConfigSpecClientConfigServiceArgs{...}
//
//	or:
//
//	        nil
type ExtensionConfigSpecClientConfigServicePtrInput interface {
	pulumi.Input

	ToExtensionConfigSpecClientConfigServicePtrOutput() ExtensionConfigSpecClientConfigServicePtrOutput
	ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(context.Context) ExtensionConfigSpecClientConfigServicePtrOutput
}

type extensionConfigSpecClientConfigServicePtrType ExtensionConfigSpecClientConfigServiceArgs

func ExtensionConfigSpecClientConfigServicePtr(v *ExtensionConfigSpecClientConfigServiceArgs) ExtensionConfigSpecClientConfigServicePtrInput {
	return (*extensionConfigSpecClientConfigServicePtrType)(v)
}

func (*extensionConfigSpecClientConfigServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpecClientConfigService)(nil)).Elem()
}

func (i *extensionConfigSpecClientConfigServicePtrType) ToExtensionConfigSpecClientConfigServicePtrOutput() ExtensionConfigSpecClientConfigServicePtrOutput {
	return i.ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(context.Background())
}

func (i *extensionConfigSpecClientConfigServicePtrType) ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecClientConfigServicePtrOutput)
}

// Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified.
//
//	If the Extension server is running within a cluster, then you should use `service`.
type ExtensionConfigSpecClientConfigServiceOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecClientConfigServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecClientConfigService)(nil)).Elem()
}

func (o ExtensionConfigSpecClientConfigServiceOutput) ToExtensionConfigSpecClientConfigServiceOutput() ExtensionConfigSpecClientConfigServiceOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigServiceOutput) ToExtensionConfigSpecClientConfigServiceOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigServiceOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigServiceOutput) ToExtensionConfigSpecClientConfigServicePtrOutput() ExtensionConfigSpecClientConfigServicePtrOutput {
	return o.ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(context.Background())
}

func (o ExtensionConfigSpecClientConfigServiceOutput) ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtensionConfigSpecClientConfigService) *ExtensionConfigSpecClientConfigService {
		return &v
	}).(ExtensionConfigSpecClientConfigServicePtrOutput)
}

// Name is the name of the service.
func (o ExtensionConfigSpecClientConfigServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigSpecClientConfigService) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of the service.
func (o ExtensionConfigSpecClientConfigServiceOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigSpecClientConfigService) string { return v.Namespace }).(pulumi.StringOutput)
}

// Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
func (o ExtensionConfigSpecClientConfigServiceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionConfigSpecClientConfigService) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
func (o ExtensionConfigSpecClientConfigServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExtensionConfigSpecClientConfigService) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ExtensionConfigSpecClientConfigServicePtrOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecClientConfigServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpecClientConfigService)(nil)).Elem()
}

func (o ExtensionConfigSpecClientConfigServicePtrOutput) ToExtensionConfigSpecClientConfigServicePtrOutput() ExtensionConfigSpecClientConfigServicePtrOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigServicePtrOutput) ToExtensionConfigSpecClientConfigServicePtrOutputWithContext(ctx context.Context) ExtensionConfigSpecClientConfigServicePtrOutput {
	return o
}

func (o ExtensionConfigSpecClientConfigServicePtrOutput) Elem() ExtensionConfigSpecClientConfigServiceOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfigService) ExtensionConfigSpecClientConfigService {
		if v != nil {
			return *v
		}
		var ret ExtensionConfigSpecClientConfigService
		return ret
	}).(ExtensionConfigSpecClientConfigServiceOutput)
}

// Name is the name of the service.
func (o ExtensionConfigSpecClientConfigServicePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfigService) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the service.
func (o ExtensionConfigSpecClientConfigServicePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfigService) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
func (o ExtensionConfigSpecClientConfigServicePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfigService) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
func (o ExtensionConfigSpecClientConfigServicePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecClientConfigService) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
type ExtensionConfigSpecNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ExtensionConfigSpecNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ExtensionConfigSpecNamespaceSelectorInput is an input type that accepts ExtensionConfigSpecNamespaceSelectorArgs and ExtensionConfigSpecNamespaceSelectorOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecNamespaceSelectorInput` via:
//
//	ExtensionConfigSpecNamespaceSelectorArgs{...}
type ExtensionConfigSpecNamespaceSelectorInput interface {
	pulumi.Input

	ToExtensionConfigSpecNamespaceSelectorOutput() ExtensionConfigSpecNamespaceSelectorOutput
	ToExtensionConfigSpecNamespaceSelectorOutputWithContext(context.Context) ExtensionConfigSpecNamespaceSelectorOutput
}

// NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
type ExtensionConfigSpecNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ExtensionConfigSpecNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecNamespaceSelector)(nil)).Elem()
}

func (i ExtensionConfigSpecNamespaceSelectorArgs) ToExtensionConfigSpecNamespaceSelectorOutput() ExtensionConfigSpecNamespaceSelectorOutput {
	return i.ToExtensionConfigSpecNamespaceSelectorOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecNamespaceSelectorArgs) ToExtensionConfigSpecNamespaceSelectorOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecNamespaceSelectorOutput)
}

func (i ExtensionConfigSpecNamespaceSelectorArgs) ToExtensionConfigSpecNamespaceSelectorPtrOutput() ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return i.ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecNamespaceSelectorArgs) ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecNamespaceSelectorOutput).ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(ctx)
}

// ExtensionConfigSpecNamespaceSelectorPtrInput is an input type that accepts ExtensionConfigSpecNamespaceSelectorArgs, ExtensionConfigSpecNamespaceSelectorPtr and ExtensionConfigSpecNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecNamespaceSelectorPtrInput` via:
//
//	        ExtensionConfigSpecNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type ExtensionConfigSpecNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToExtensionConfigSpecNamespaceSelectorPtrOutput() ExtensionConfigSpecNamespaceSelectorPtrOutput
	ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(context.Context) ExtensionConfigSpecNamespaceSelectorPtrOutput
}

type extensionConfigSpecNamespaceSelectorPtrType ExtensionConfigSpecNamespaceSelectorArgs

func ExtensionConfigSpecNamespaceSelectorPtr(v *ExtensionConfigSpecNamespaceSelectorArgs) ExtensionConfigSpecNamespaceSelectorPtrInput {
	return (*extensionConfigSpecNamespaceSelectorPtrType)(v)
}

func (*extensionConfigSpecNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpecNamespaceSelector)(nil)).Elem()
}

func (i *extensionConfigSpecNamespaceSelectorPtrType) ToExtensionConfigSpecNamespaceSelectorPtrOutput() ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return i.ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *extensionConfigSpecNamespaceSelectorPtrType) ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecNamespaceSelectorPtrOutput)
}

// NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
type ExtensionConfigSpecNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecNamespaceSelector)(nil)).Elem()
}

func (o ExtensionConfigSpecNamespaceSelectorOutput) ToExtensionConfigSpecNamespaceSelectorOutput() ExtensionConfigSpecNamespaceSelectorOutput {
	return o
}

func (o ExtensionConfigSpecNamespaceSelectorOutput) ToExtensionConfigSpecNamespaceSelectorOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorOutput {
	return o
}

func (o ExtensionConfigSpecNamespaceSelectorOutput) ToExtensionConfigSpecNamespaceSelectorPtrOutput() ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return o.ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o ExtensionConfigSpecNamespaceSelectorOutput) ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtensionConfigSpecNamespaceSelector) *ExtensionConfigSpecNamespaceSelector {
		return &v
	}).(ExtensionConfigSpecNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ExtensionConfigSpecNamespaceSelectorOutput) MatchExpressions() ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ExtensionConfigSpecNamespaceSelector) []ExtensionConfigSpecNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ExtensionConfigSpecNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExtensionConfigSpecNamespaceSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ExtensionConfigSpecNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigSpecNamespaceSelector)(nil)).Elem()
}

func (o ExtensionConfigSpecNamespaceSelectorPtrOutput) ToExtensionConfigSpecNamespaceSelectorPtrOutput() ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return o
}

func (o ExtensionConfigSpecNamespaceSelectorPtrOutput) ToExtensionConfigSpecNamespaceSelectorPtrOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorPtrOutput {
	return o
}

func (o ExtensionConfigSpecNamespaceSelectorPtrOutput) Elem() ExtensionConfigSpecNamespaceSelectorOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecNamespaceSelector) ExtensionConfigSpecNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret ExtensionConfigSpecNamespaceSelector
		return ret
	}).(ExtensionConfigSpecNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ExtensionConfigSpecNamespaceSelectorPtrOutput) MatchExpressions() ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecNamespaceSelector) []ExtensionConfigSpecNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ExtensionConfigSpecNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExtensionConfigSpecNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ExtensionConfigSpecNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ExtensionConfigSpecNamespaceSelectorMatchExpressionsInput is an input type that accepts ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs and ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecNamespaceSelectorMatchExpressionsInput` via:
//
//	ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs{...}
type ExtensionConfigSpecNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput() ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput
	ToExtensionConfigSpecNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput() ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput {
	return i.ToExtensionConfigSpecNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput)
}

// ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts ExtensionConfigSpecNamespaceSelectorMatchExpressionsArray and ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	ExtensionConfigSpecNamespaceSelectorMatchExpressionsArray{ ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs{...} }
type ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput() ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput
	ToExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput
}

type ExtensionConfigSpecNamespaceSelectorMatchExpressionsArray []ExtensionConfigSpecNamespaceSelectorMatchExpressionsInput

func (ExtensionConfigSpecNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionConfigSpecNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i ExtensionConfigSpecNamespaceSelectorMatchExpressionsArray) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput() ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ExtensionConfigSpecNamespaceSelectorMatchExpressionsArray) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigSpecNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput() ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigSpecNamespaceSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigSpecNamespaceSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionConfigSpecNamespaceSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionConfigSpecNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput() ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput) ToExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionConfigSpecNamespaceSelectorMatchExpressions {
		return vs[0].([]ExtensionConfigSpecNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ExtensionConfigSpecNamespaceSelectorMatchLabels struct {
}

// Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
type ExtensionConfigSpecSettings struct {
}

// ExtensionConfigStatus is the current state of the ExtensionConfig
type ExtensionConfigStatus struct {
	// Conditions define the current service state of the ExtensionConfig.
	Conditions []ExtensionConfigStatusConditions `pulumi:"conditions"`
	// Handlers defines the current ExtensionHandlers supported by an Extension.
	Handlers []ExtensionConfigStatusHandlers `pulumi:"handlers"`
}

// ExtensionConfigStatusInput is an input type that accepts ExtensionConfigStatusArgs and ExtensionConfigStatusOutput values.
// You can construct a concrete instance of `ExtensionConfigStatusInput` via:
//
//	ExtensionConfigStatusArgs{...}
type ExtensionConfigStatusInput interface {
	pulumi.Input

	ToExtensionConfigStatusOutput() ExtensionConfigStatusOutput
	ToExtensionConfigStatusOutputWithContext(context.Context) ExtensionConfigStatusOutput
}

// ExtensionConfigStatus is the current state of the ExtensionConfig
type ExtensionConfigStatusArgs struct {
	// Conditions define the current service state of the ExtensionConfig.
	Conditions ExtensionConfigStatusConditionsArrayInput `pulumi:"conditions"`
	// Handlers defines the current ExtensionHandlers supported by an Extension.
	Handlers ExtensionConfigStatusHandlersArrayInput `pulumi:"handlers"`
}

func (ExtensionConfigStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatus)(nil)).Elem()
}

func (i ExtensionConfigStatusArgs) ToExtensionConfigStatusOutput() ExtensionConfigStatusOutput {
	return i.ToExtensionConfigStatusOutputWithContext(context.Background())
}

func (i ExtensionConfigStatusArgs) ToExtensionConfigStatusOutputWithContext(ctx context.Context) ExtensionConfigStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusOutput)
}

func (i ExtensionConfigStatusArgs) ToExtensionConfigStatusPtrOutput() ExtensionConfigStatusPtrOutput {
	return i.ToExtensionConfigStatusPtrOutputWithContext(context.Background())
}

func (i ExtensionConfigStatusArgs) ToExtensionConfigStatusPtrOutputWithContext(ctx context.Context) ExtensionConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusOutput).ToExtensionConfigStatusPtrOutputWithContext(ctx)
}

// ExtensionConfigStatusPtrInput is an input type that accepts ExtensionConfigStatusArgs, ExtensionConfigStatusPtr and ExtensionConfigStatusPtrOutput values.
// You can construct a concrete instance of `ExtensionConfigStatusPtrInput` via:
//
//	        ExtensionConfigStatusArgs{...}
//
//	or:
//
//	        nil
type ExtensionConfigStatusPtrInput interface {
	pulumi.Input

	ToExtensionConfigStatusPtrOutput() ExtensionConfigStatusPtrOutput
	ToExtensionConfigStatusPtrOutputWithContext(context.Context) ExtensionConfigStatusPtrOutput
}

type extensionConfigStatusPtrType ExtensionConfigStatusArgs

func ExtensionConfigStatusPtr(v *ExtensionConfigStatusArgs) ExtensionConfigStatusPtrInput {
	return (*extensionConfigStatusPtrType)(v)
}

func (*extensionConfigStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigStatus)(nil)).Elem()
}

func (i *extensionConfigStatusPtrType) ToExtensionConfigStatusPtrOutput() ExtensionConfigStatusPtrOutput {
	return i.ToExtensionConfigStatusPtrOutputWithContext(context.Background())
}

func (i *extensionConfigStatusPtrType) ToExtensionConfigStatusPtrOutputWithContext(ctx context.Context) ExtensionConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusPtrOutput)
}

// ExtensionConfigStatus is the current state of the ExtensionConfig
type ExtensionConfigStatusOutput struct{ *pulumi.OutputState }

func (ExtensionConfigStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatus)(nil)).Elem()
}

func (o ExtensionConfigStatusOutput) ToExtensionConfigStatusOutput() ExtensionConfigStatusOutput {
	return o
}

func (o ExtensionConfigStatusOutput) ToExtensionConfigStatusOutputWithContext(ctx context.Context) ExtensionConfigStatusOutput {
	return o
}

func (o ExtensionConfigStatusOutput) ToExtensionConfigStatusPtrOutput() ExtensionConfigStatusPtrOutput {
	return o.ToExtensionConfigStatusPtrOutputWithContext(context.Background())
}

func (o ExtensionConfigStatusOutput) ToExtensionConfigStatusPtrOutputWithContext(ctx context.Context) ExtensionConfigStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtensionConfigStatus) *ExtensionConfigStatus {
		return &v
	}).(ExtensionConfigStatusPtrOutput)
}

// Conditions define the current service state of the ExtensionConfig.
func (o ExtensionConfigStatusOutput) Conditions() ExtensionConfigStatusConditionsArrayOutput {
	return o.ApplyT(func(v ExtensionConfigStatus) []ExtensionConfigStatusConditions { return v.Conditions }).(ExtensionConfigStatusConditionsArrayOutput)
}

// Handlers defines the current ExtensionHandlers supported by an Extension.
func (o ExtensionConfigStatusOutput) Handlers() ExtensionConfigStatusHandlersArrayOutput {
	return o.ApplyT(func(v ExtensionConfigStatus) []ExtensionConfigStatusHandlers { return v.Handlers }).(ExtensionConfigStatusHandlersArrayOutput)
}

type ExtensionConfigStatusPtrOutput struct{ *pulumi.OutputState }

func (ExtensionConfigStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionConfigStatus)(nil)).Elem()
}

func (o ExtensionConfigStatusPtrOutput) ToExtensionConfigStatusPtrOutput() ExtensionConfigStatusPtrOutput {
	return o
}

func (o ExtensionConfigStatusPtrOutput) ToExtensionConfigStatusPtrOutputWithContext(ctx context.Context) ExtensionConfigStatusPtrOutput {
	return o
}

func (o ExtensionConfigStatusPtrOutput) Elem() ExtensionConfigStatusOutput {
	return o.ApplyT(func(v *ExtensionConfigStatus) ExtensionConfigStatus {
		if v != nil {
			return *v
		}
		var ret ExtensionConfigStatus
		return ret
	}).(ExtensionConfigStatusOutput)
}

// Conditions define the current service state of the ExtensionConfig.
func (o ExtensionConfigStatusPtrOutput) Conditions() ExtensionConfigStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ExtensionConfigStatus) []ExtensionConfigStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ExtensionConfigStatusConditionsArrayOutput)
}

// Handlers defines the current ExtensionHandlers supported by an Extension.
func (o ExtensionConfigStatusPtrOutput) Handlers() ExtensionConfigStatusHandlersArrayOutput {
	return o.ApplyT(func(v *ExtensionConfigStatus) []ExtensionConfigStatusHandlers {
		if v == nil {
			return nil
		}
		return v.Handlers
	}).(ExtensionConfigStatusHandlersArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type ExtensionConfigStatusConditions struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type string `pulumi:"type"`
}

// ExtensionConfigStatusConditionsInput is an input type that accepts ExtensionConfigStatusConditionsArgs and ExtensionConfigStatusConditionsOutput values.
// You can construct a concrete instance of `ExtensionConfigStatusConditionsInput` via:
//
//	ExtensionConfigStatusConditionsArgs{...}
type ExtensionConfigStatusConditionsInput interface {
	pulumi.Input

	ToExtensionConfigStatusConditionsOutput() ExtensionConfigStatusConditionsOutput
	ToExtensionConfigStatusConditionsOutputWithContext(context.Context) ExtensionConfigStatusConditionsOutput
}

// Condition defines an observation of a Cluster API resource operational state.
type ExtensionConfigStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtensionConfigStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatusConditions)(nil)).Elem()
}

func (i ExtensionConfigStatusConditionsArgs) ToExtensionConfigStatusConditionsOutput() ExtensionConfigStatusConditionsOutput {
	return i.ToExtensionConfigStatusConditionsOutputWithContext(context.Background())
}

func (i ExtensionConfigStatusConditionsArgs) ToExtensionConfigStatusConditionsOutputWithContext(ctx context.Context) ExtensionConfigStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusConditionsOutput)
}

// ExtensionConfigStatusConditionsArrayInput is an input type that accepts ExtensionConfigStatusConditionsArray and ExtensionConfigStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ExtensionConfigStatusConditionsArrayInput` via:
//
//	ExtensionConfigStatusConditionsArray{ ExtensionConfigStatusConditionsArgs{...} }
type ExtensionConfigStatusConditionsArrayInput interface {
	pulumi.Input

	ToExtensionConfigStatusConditionsArrayOutput() ExtensionConfigStatusConditionsArrayOutput
	ToExtensionConfigStatusConditionsArrayOutputWithContext(context.Context) ExtensionConfigStatusConditionsArrayOutput
}

type ExtensionConfigStatusConditionsArray []ExtensionConfigStatusConditionsInput

func (ExtensionConfigStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionConfigStatusConditions)(nil)).Elem()
}

func (i ExtensionConfigStatusConditionsArray) ToExtensionConfigStatusConditionsArrayOutput() ExtensionConfigStatusConditionsArrayOutput {
	return i.ToExtensionConfigStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ExtensionConfigStatusConditionsArray) ToExtensionConfigStatusConditionsArrayOutputWithContext(ctx context.Context) ExtensionConfigStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusConditionsArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type ExtensionConfigStatusConditionsOutput struct{ *pulumi.OutputState }

func (ExtensionConfigStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatusConditions)(nil)).Elem()
}

func (o ExtensionConfigStatusConditionsOutput) ToExtensionConfigStatusConditionsOutput() ExtensionConfigStatusConditionsOutput {
	return o
}

func (o ExtensionConfigStatusConditionsOutput) ToExtensionConfigStatusConditionsOutputWithContext(ctx context.Context) ExtensionConfigStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
func (o ExtensionConfigStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A human readable message indicating details about the transition. This field may be empty.
func (o ExtensionConfigStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionConfigStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
func (o ExtensionConfigStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionConfigStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
func (o ExtensionConfigStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionConfigStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ExtensionConfigStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
func (o ExtensionConfigStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ExtensionConfigStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ExtensionConfigStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionConfigStatusConditions)(nil)).Elem()
}

func (o ExtensionConfigStatusConditionsArrayOutput) ToExtensionConfigStatusConditionsArrayOutput() ExtensionConfigStatusConditionsArrayOutput {
	return o
}

func (o ExtensionConfigStatusConditionsArrayOutput) ToExtensionConfigStatusConditionsArrayOutputWithContext(ctx context.Context) ExtensionConfigStatusConditionsArrayOutput {
	return o
}

func (o ExtensionConfigStatusConditionsArrayOutput) Index(i pulumi.IntInput) ExtensionConfigStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionConfigStatusConditions {
		return vs[0].([]ExtensionConfigStatusConditions)[vs[1].(int)]
	}).(ExtensionConfigStatusConditionsOutput)
}

// ExtensionHandler specifies the details of a handler for a particular runtime hook registered by an Extension server.
type ExtensionConfigStatusHandlers struct {
	// FailurePolicy defines how failures in calls to the ExtensionHandler should be handled by a client. Defaults to Fail if not set.
	FailurePolicy *string `pulumi:"failurePolicy"`
	// Name is the unique name of the ExtensionHandler.
	Name string `pulumi:"name"`
	// RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
	RequestHook ExtensionConfigStatusHandlersRequestHook `pulumi:"requestHook"`
	// TimeoutSeconds defines the timeout duration for client calls to the ExtensionHandler. Defaults to 10 is not set.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ExtensionConfigStatusHandlersInput is an input type that accepts ExtensionConfigStatusHandlersArgs and ExtensionConfigStatusHandlersOutput values.
// You can construct a concrete instance of `ExtensionConfigStatusHandlersInput` via:
//
//	ExtensionConfigStatusHandlersArgs{...}
type ExtensionConfigStatusHandlersInput interface {
	pulumi.Input

	ToExtensionConfigStatusHandlersOutput() ExtensionConfigStatusHandlersOutput
	ToExtensionConfigStatusHandlersOutputWithContext(context.Context) ExtensionConfigStatusHandlersOutput
}

// ExtensionHandler specifies the details of a handler for a particular runtime hook registered by an Extension server.
type ExtensionConfigStatusHandlersArgs struct {
	// FailurePolicy defines how failures in calls to the ExtensionHandler should be handled by a client. Defaults to Fail if not set.
	FailurePolicy pulumi.StringPtrInput `pulumi:"failurePolicy"`
	// Name is the unique name of the ExtensionHandler.
	Name pulumi.StringInput `pulumi:"name"`
	// RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
	RequestHook ExtensionConfigStatusHandlersRequestHookInput `pulumi:"requestHook"`
	// TimeoutSeconds defines the timeout duration for client calls to the ExtensionHandler. Defaults to 10 is not set.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ExtensionConfigStatusHandlersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatusHandlers)(nil)).Elem()
}

func (i ExtensionConfigStatusHandlersArgs) ToExtensionConfigStatusHandlersOutput() ExtensionConfigStatusHandlersOutput {
	return i.ToExtensionConfigStatusHandlersOutputWithContext(context.Background())
}

func (i ExtensionConfigStatusHandlersArgs) ToExtensionConfigStatusHandlersOutputWithContext(ctx context.Context) ExtensionConfigStatusHandlersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusHandlersOutput)
}

// ExtensionConfigStatusHandlersArrayInput is an input type that accepts ExtensionConfigStatusHandlersArray and ExtensionConfigStatusHandlersArrayOutput values.
// You can construct a concrete instance of `ExtensionConfigStatusHandlersArrayInput` via:
//
//	ExtensionConfigStatusHandlersArray{ ExtensionConfigStatusHandlersArgs{...} }
type ExtensionConfigStatusHandlersArrayInput interface {
	pulumi.Input

	ToExtensionConfigStatusHandlersArrayOutput() ExtensionConfigStatusHandlersArrayOutput
	ToExtensionConfigStatusHandlersArrayOutputWithContext(context.Context) ExtensionConfigStatusHandlersArrayOutput
}

type ExtensionConfigStatusHandlersArray []ExtensionConfigStatusHandlersInput

func (ExtensionConfigStatusHandlersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionConfigStatusHandlers)(nil)).Elem()
}

func (i ExtensionConfigStatusHandlersArray) ToExtensionConfigStatusHandlersArrayOutput() ExtensionConfigStatusHandlersArrayOutput {
	return i.ToExtensionConfigStatusHandlersArrayOutputWithContext(context.Background())
}

func (i ExtensionConfigStatusHandlersArray) ToExtensionConfigStatusHandlersArrayOutputWithContext(ctx context.Context) ExtensionConfigStatusHandlersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusHandlersArrayOutput)
}

// ExtensionHandler specifies the details of a handler for a particular runtime hook registered by an Extension server.
type ExtensionConfigStatusHandlersOutput struct{ *pulumi.OutputState }

func (ExtensionConfigStatusHandlersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatusHandlers)(nil)).Elem()
}

func (o ExtensionConfigStatusHandlersOutput) ToExtensionConfigStatusHandlersOutput() ExtensionConfigStatusHandlersOutput {
	return o
}

func (o ExtensionConfigStatusHandlersOutput) ToExtensionConfigStatusHandlersOutputWithContext(ctx context.Context) ExtensionConfigStatusHandlersOutput {
	return o
}

// FailurePolicy defines how failures in calls to the ExtensionHandler should be handled by a client. Defaults to Fail if not set.
func (o ExtensionConfigStatusHandlersOutput) FailurePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionConfigStatusHandlers) *string { return v.FailurePolicy }).(pulumi.StringPtrOutput)
}

// Name is the unique name of the ExtensionHandler.
func (o ExtensionConfigStatusHandlersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigStatusHandlers) string { return v.Name }).(pulumi.StringOutput)
}

// RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
func (o ExtensionConfigStatusHandlersOutput) RequestHook() ExtensionConfigStatusHandlersRequestHookOutput {
	return o.ApplyT(func(v ExtensionConfigStatusHandlers) ExtensionConfigStatusHandlersRequestHook { return v.RequestHook }).(ExtensionConfigStatusHandlersRequestHookOutput)
}

// TimeoutSeconds defines the timeout duration for client calls to the ExtensionHandler. Defaults to 10 is not set.
func (o ExtensionConfigStatusHandlersOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExtensionConfigStatusHandlers) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ExtensionConfigStatusHandlersArrayOutput struct{ *pulumi.OutputState }

func (ExtensionConfigStatusHandlersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionConfigStatusHandlers)(nil)).Elem()
}

func (o ExtensionConfigStatusHandlersArrayOutput) ToExtensionConfigStatusHandlersArrayOutput() ExtensionConfigStatusHandlersArrayOutput {
	return o
}

func (o ExtensionConfigStatusHandlersArrayOutput) ToExtensionConfigStatusHandlersArrayOutputWithContext(ctx context.Context) ExtensionConfigStatusHandlersArrayOutput {
	return o
}

func (o ExtensionConfigStatusHandlersArrayOutput) Index(i pulumi.IntInput) ExtensionConfigStatusHandlersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionConfigStatusHandlers {
		return vs[0].([]ExtensionConfigStatusHandlers)[vs[1].(int)]
	}).(ExtensionConfigStatusHandlersOutput)
}

// RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
type ExtensionConfigStatusHandlersRequestHook struct {
	// APIVersion is the group and version of the Hook.
	ApiVersion string `pulumi:"apiVersion"`
	// Hook is the name of the hook.
	Hook string `pulumi:"hook"`
}

// ExtensionConfigStatusHandlersRequestHookInput is an input type that accepts ExtensionConfigStatusHandlersRequestHookArgs and ExtensionConfigStatusHandlersRequestHookOutput values.
// You can construct a concrete instance of `ExtensionConfigStatusHandlersRequestHookInput` via:
//
//	ExtensionConfigStatusHandlersRequestHookArgs{...}
type ExtensionConfigStatusHandlersRequestHookInput interface {
	pulumi.Input

	ToExtensionConfigStatusHandlersRequestHookOutput() ExtensionConfigStatusHandlersRequestHookOutput
	ToExtensionConfigStatusHandlersRequestHookOutputWithContext(context.Context) ExtensionConfigStatusHandlersRequestHookOutput
}

// RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
type ExtensionConfigStatusHandlersRequestHookArgs struct {
	// APIVersion is the group and version of the Hook.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Hook is the name of the hook.
	Hook pulumi.StringInput `pulumi:"hook"`
}

func (ExtensionConfigStatusHandlersRequestHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatusHandlersRequestHook)(nil)).Elem()
}

func (i ExtensionConfigStatusHandlersRequestHookArgs) ToExtensionConfigStatusHandlersRequestHookOutput() ExtensionConfigStatusHandlersRequestHookOutput {
	return i.ToExtensionConfigStatusHandlersRequestHookOutputWithContext(context.Background())
}

func (i ExtensionConfigStatusHandlersRequestHookArgs) ToExtensionConfigStatusHandlersRequestHookOutputWithContext(ctx context.Context) ExtensionConfigStatusHandlersRequestHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionConfigStatusHandlersRequestHookOutput)
}

// RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
type ExtensionConfigStatusHandlersRequestHookOutput struct{ *pulumi.OutputState }

func (ExtensionConfigStatusHandlersRequestHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionConfigStatusHandlersRequestHook)(nil)).Elem()
}

func (o ExtensionConfigStatusHandlersRequestHookOutput) ToExtensionConfigStatusHandlersRequestHookOutput() ExtensionConfigStatusHandlersRequestHookOutput {
	return o
}

func (o ExtensionConfigStatusHandlersRequestHookOutput) ToExtensionConfigStatusHandlersRequestHookOutputWithContext(ctx context.Context) ExtensionConfigStatusHandlersRequestHookOutput {
	return o
}

// APIVersion is the group and version of the Hook.
func (o ExtensionConfigStatusHandlersRequestHookOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigStatusHandlersRequestHook) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Hook is the name of the hook.
func (o ExtensionConfigStatusHandlersRequestHookOutput) Hook() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionConfigStatusHandlersRequestHook) string { return v.Hook }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecInput)(nil)).Elem(), ExtensionConfigSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecPtrInput)(nil)).Elem(), ExtensionConfigSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecClientConfigInput)(nil)).Elem(), ExtensionConfigSpecClientConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecClientConfigPtrInput)(nil)).Elem(), ExtensionConfigSpecClientConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecClientConfigServiceInput)(nil)).Elem(), ExtensionConfigSpecClientConfigServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecClientConfigServicePtrInput)(nil)).Elem(), ExtensionConfigSpecClientConfigServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecNamespaceSelectorInput)(nil)).Elem(), ExtensionConfigSpecNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecNamespaceSelectorPtrInput)(nil)).Elem(), ExtensionConfigSpecNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), ExtensionConfigSpecNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigStatusInput)(nil)).Elem(), ExtensionConfigStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigStatusPtrInput)(nil)).Elem(), ExtensionConfigStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigStatusConditionsInput)(nil)).Elem(), ExtensionConfigStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigStatusConditionsArrayInput)(nil)).Elem(), ExtensionConfigStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigStatusHandlersInput)(nil)).Elem(), ExtensionConfigStatusHandlersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigStatusHandlersArrayInput)(nil)).Elem(), ExtensionConfigStatusHandlersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionConfigStatusHandlersRequestHookInput)(nil)).Elem(), ExtensionConfigStatusHandlersRequestHookArgs{})
	pulumi.RegisterOutputType(ExtensionConfigSpecOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecPtrOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecClientConfigOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecClientConfigPtrOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecClientConfigServiceOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecClientConfigServicePtrOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ExtensionConfigSpecNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ExtensionConfigStatusOutput{})
	pulumi.RegisterOutputType(ExtensionConfigStatusPtrOutput{})
	pulumi.RegisterOutputType(ExtensionConfigStatusConditionsOutput{})
	pulumi.RegisterOutputType(ExtensionConfigStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ExtensionConfigStatusHandlersOutput{})
	pulumi.RegisterOutputType(ExtensionConfigStatusHandlersArrayOutput{})
	pulumi.RegisterOutputType(ExtensionConfigStatusHandlersRequestHookOutput{})
}
