// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterResourceSet is the Schema for the clusterresourcesets API.
type ClusterResourceSet struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
	Spec ClusterResourceSetSpecPtrOutput `pulumi:"spec"`
	// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
	Status ClusterResourceSetStatusPtrOutput `pulumi:"status"`
}

// NewClusterResourceSet registers a new resource with the given unique name, arguments, and options.
func NewClusterResourceSet(ctx *pulumi.Context,
	name string, args *ClusterResourceSetArgs, opts ...pulumi.ResourceOption) (*ClusterResourceSet, error) {
	if args == nil {
		args = &ClusterResourceSetArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("addons.cluster.x-k8s.io/v1beta1")
	args.Kind = pulumi.StringPtr("ClusterResourceSet")
	var resource ClusterResourceSet
	err := ctx.RegisterResource("kubernetes:addons.cluster.x-k8s.io/v1beta1:ClusterResourceSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterResourceSet gets an existing ClusterResourceSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterResourceSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterResourceSetState, opts ...pulumi.ResourceOption) (*ClusterResourceSet, error) {
	var resource ClusterResourceSet
	err := ctx.ReadResource("kubernetes:addons.cluster.x-k8s.io/v1beta1:ClusterResourceSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterResourceSet resources.
type clusterResourceSetState struct {
}

type ClusterResourceSetState struct {
}

func (ClusterResourceSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterResourceSetState)(nil)).Elem()
}

type clusterResourceSetArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
	Spec *ClusterResourceSetSpec `pulumi:"spec"`
	// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
	Status *ClusterResourceSetStatus `pulumi:"status"`
}

// The set of arguments for constructing a ClusterResourceSet resource.
type ClusterResourceSetArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
	Spec ClusterResourceSetSpecPtrInput
	// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
	Status ClusterResourceSetStatusPtrInput
}

func (ClusterResourceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterResourceSetArgs)(nil)).Elem()
}

type ClusterResourceSetInput interface {
	pulumi.Input

	ToClusterResourceSetOutput() ClusterResourceSetOutput
	ToClusterResourceSetOutputWithContext(ctx context.Context) ClusterResourceSetOutput
}

func (*ClusterResourceSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSet)(nil)).Elem()
}

func (i *ClusterResourceSet) ToClusterResourceSetOutput() ClusterResourceSetOutput {
	return i.ToClusterResourceSetOutputWithContext(context.Background())
}

func (i *ClusterResourceSet) ToClusterResourceSetOutputWithContext(ctx context.Context) ClusterResourceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetOutput)
}

type ClusterResourceSetOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSet)(nil)).Elem()
}

func (o ClusterResourceSetOutput) ToClusterResourceSetOutput() ClusterResourceSetOutput {
	return o
}

func (o ClusterResourceSetOutput) ToClusterResourceSetOutputWithContext(ctx context.Context) ClusterResourceSetOutput {
	return o
}

func (o ClusterResourceSetOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSet) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ClusterResourceSetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSet) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ClusterResourceSetOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSet) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
func (o ClusterResourceSetOutput) Spec() ClusterResourceSetSpecPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSet) ClusterResourceSetSpecPtrOutput { return v.Spec }).(ClusterResourceSetSpecPtrOutput)
}

// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
func (o ClusterResourceSetOutput) Status() ClusterResourceSetStatusPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSet) ClusterResourceSetStatusPtrOutput { return v.Status }).(ClusterResourceSetStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetInput)(nil)).Elem(), &ClusterResourceSet{})
	pulumi.RegisterOutputType(ClusterResourceSetOutput{})
}
