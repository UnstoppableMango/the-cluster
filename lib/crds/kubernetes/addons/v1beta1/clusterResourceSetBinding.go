// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterResourceSetBinding lists all matching ClusterResourceSets with the cluster it belongs to.
type ClusterResourceSetBinding struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
	Spec ClusterResourceSetBindingSpecPtrOutput `pulumi:"spec"`
}

// NewClusterResourceSetBinding registers a new resource with the given unique name, arguments, and options.
func NewClusterResourceSetBinding(ctx *pulumi.Context,
	name string, args *ClusterResourceSetBindingArgs, opts ...pulumi.ResourceOption) (*ClusterResourceSetBinding, error) {
	if args == nil {
		args = &ClusterResourceSetBindingArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("addons.cluster.x-k8s.io/v1beta1")
	args.Kind = pulumi.StringPtr("ClusterResourceSetBinding")
	var resource ClusterResourceSetBinding
	err := ctx.RegisterResource("kubernetes:addons.cluster.x-k8s.io/v1beta1:ClusterResourceSetBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterResourceSetBinding gets an existing ClusterResourceSetBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterResourceSetBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterResourceSetBindingState, opts ...pulumi.ResourceOption) (*ClusterResourceSetBinding, error) {
	var resource ClusterResourceSetBinding
	err := ctx.ReadResource("kubernetes:addons.cluster.x-k8s.io/v1beta1:ClusterResourceSetBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterResourceSetBinding resources.
type clusterResourceSetBindingState struct {
}

type ClusterResourceSetBindingState struct {
}

func (ClusterResourceSetBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterResourceSetBindingState)(nil)).Elem()
}

type clusterResourceSetBindingArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
	Spec *ClusterResourceSetBindingSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ClusterResourceSetBinding resource.
type ClusterResourceSetBindingArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
	Spec ClusterResourceSetBindingSpecPtrInput
}

func (ClusterResourceSetBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterResourceSetBindingArgs)(nil)).Elem()
}

type ClusterResourceSetBindingInput interface {
	pulumi.Input

	ToClusterResourceSetBindingOutput() ClusterResourceSetBindingOutput
	ToClusterResourceSetBindingOutputWithContext(ctx context.Context) ClusterResourceSetBindingOutput
}

func (*ClusterResourceSetBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetBinding)(nil)).Elem()
}

func (i *ClusterResourceSetBinding) ToClusterResourceSetBindingOutput() ClusterResourceSetBindingOutput {
	return i.ToClusterResourceSetBindingOutputWithContext(context.Background())
}

func (i *ClusterResourceSetBinding) ToClusterResourceSetBindingOutputWithContext(ctx context.Context) ClusterResourceSetBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingOutput)
}

type ClusterResourceSetBindingOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetBinding)(nil)).Elem()
}

func (o ClusterResourceSetBindingOutput) ToClusterResourceSetBindingOutput() ClusterResourceSetBindingOutput {
	return o
}

func (o ClusterResourceSetBindingOutput) ToClusterResourceSetBindingOutputWithContext(ctx context.Context) ClusterResourceSetBindingOutput {
	return o
}

func (o ClusterResourceSetBindingOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetBinding) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ClusterResourceSetBindingOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetBinding) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ClusterResourceSetBindingOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetBinding) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
func (o ClusterResourceSetBindingOutput) Spec() ClusterResourceSetBindingSpecPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetBinding) ClusterResourceSetBindingSpecPtrOutput { return v.Spec }).(ClusterResourceSetBindingSpecPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetBindingInput)(nil)).Elem(), &ClusterResourceSetBinding{})
	pulumi.RegisterOutputType(ClusterResourceSetBindingOutput{})
}
