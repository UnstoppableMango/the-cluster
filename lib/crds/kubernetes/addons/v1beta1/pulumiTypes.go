// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterResourceSet is the Schema for the clusterresourcesets API.
type ClusterResourceSetType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
	Spec *ClusterResourceSetSpec `pulumi:"spec"`
	// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
	Status *ClusterResourceSetStatus `pulumi:"status"`
}

// ClusterResourceSetBinding lists all matching ClusterResourceSets with the cluster it belongs to.
type ClusterResourceSetBindingType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
	Spec *ClusterResourceSetBindingSpec `pulumi:"spec"`
}

type ClusterResourceSetBindingMetadata struct {
}

// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
type ClusterResourceSetBindingSpec struct {
	// Bindings is a list of ClusterResourceSets and their resources.
	Bindings []ClusterResourceSetBindingSpecBindings `pulumi:"bindings"`
	// ClusterName is the name of the Cluster this binding applies to. Note: this field mandatory in v1beta2.
	ClusterName *string `pulumi:"clusterName"`
}

// ClusterResourceSetBindingSpecInput is an input type that accepts ClusterResourceSetBindingSpecArgs and ClusterResourceSetBindingSpecOutput values.
// You can construct a concrete instance of `ClusterResourceSetBindingSpecInput` via:
//
//	ClusterResourceSetBindingSpecArgs{...}
type ClusterResourceSetBindingSpecInput interface {
	pulumi.Input

	ToClusterResourceSetBindingSpecOutput() ClusterResourceSetBindingSpecOutput
	ToClusterResourceSetBindingSpecOutputWithContext(context.Context) ClusterResourceSetBindingSpecOutput
}

// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
type ClusterResourceSetBindingSpecArgs struct {
	// Bindings is a list of ClusterResourceSets and their resources.
	Bindings ClusterResourceSetBindingSpecBindingsArrayInput `pulumi:"bindings"`
	// ClusterName is the name of the Cluster this binding applies to. Note: this field mandatory in v1beta2.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
}

func (ClusterResourceSetBindingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetBindingSpec)(nil)).Elem()
}

func (i ClusterResourceSetBindingSpecArgs) ToClusterResourceSetBindingSpecOutput() ClusterResourceSetBindingSpecOutput {
	return i.ToClusterResourceSetBindingSpecOutputWithContext(context.Background())
}

func (i ClusterResourceSetBindingSpecArgs) ToClusterResourceSetBindingSpecOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingSpecOutput)
}

func (i ClusterResourceSetBindingSpecArgs) ToClusterResourceSetBindingSpecPtrOutput() ClusterResourceSetBindingSpecPtrOutput {
	return i.ToClusterResourceSetBindingSpecPtrOutputWithContext(context.Background())
}

func (i ClusterResourceSetBindingSpecArgs) ToClusterResourceSetBindingSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingSpecOutput).ToClusterResourceSetBindingSpecPtrOutputWithContext(ctx)
}

// ClusterResourceSetBindingSpecPtrInput is an input type that accepts ClusterResourceSetBindingSpecArgs, ClusterResourceSetBindingSpecPtr and ClusterResourceSetBindingSpecPtrOutput values.
// You can construct a concrete instance of `ClusterResourceSetBindingSpecPtrInput` via:
//
//	        ClusterResourceSetBindingSpecArgs{...}
//
//	or:
//
//	        nil
type ClusterResourceSetBindingSpecPtrInput interface {
	pulumi.Input

	ToClusterResourceSetBindingSpecPtrOutput() ClusterResourceSetBindingSpecPtrOutput
	ToClusterResourceSetBindingSpecPtrOutputWithContext(context.Context) ClusterResourceSetBindingSpecPtrOutput
}

type clusterResourceSetBindingSpecPtrType ClusterResourceSetBindingSpecArgs

func ClusterResourceSetBindingSpecPtr(v *ClusterResourceSetBindingSpecArgs) ClusterResourceSetBindingSpecPtrInput {
	return (*clusterResourceSetBindingSpecPtrType)(v)
}

func (*clusterResourceSetBindingSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetBindingSpec)(nil)).Elem()
}

func (i *clusterResourceSetBindingSpecPtrType) ToClusterResourceSetBindingSpecPtrOutput() ClusterResourceSetBindingSpecPtrOutput {
	return i.ToClusterResourceSetBindingSpecPtrOutputWithContext(context.Background())
}

func (i *clusterResourceSetBindingSpecPtrType) ToClusterResourceSetBindingSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingSpecPtrOutput)
}

// ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
type ClusterResourceSetBindingSpecOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetBindingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetBindingSpec)(nil)).Elem()
}

func (o ClusterResourceSetBindingSpecOutput) ToClusterResourceSetBindingSpecOutput() ClusterResourceSetBindingSpecOutput {
	return o
}

func (o ClusterResourceSetBindingSpecOutput) ToClusterResourceSetBindingSpecOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecOutput {
	return o
}

func (o ClusterResourceSetBindingSpecOutput) ToClusterResourceSetBindingSpecPtrOutput() ClusterResourceSetBindingSpecPtrOutput {
	return o.ToClusterResourceSetBindingSpecPtrOutputWithContext(context.Background())
}

func (o ClusterResourceSetBindingSpecOutput) ToClusterResourceSetBindingSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterResourceSetBindingSpec) *ClusterResourceSetBindingSpec {
		return &v
	}).(ClusterResourceSetBindingSpecPtrOutput)
}

// Bindings is a list of ClusterResourceSets and their resources.
func (o ClusterResourceSetBindingSpecOutput) Bindings() ClusterResourceSetBindingSpecBindingsArrayOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpec) []ClusterResourceSetBindingSpecBindings { return v.Bindings }).(ClusterResourceSetBindingSpecBindingsArrayOutput)
}

// ClusterName is the name of the Cluster this binding applies to. Note: this field mandatory in v1beta2.
func (o ClusterResourceSetBindingSpecOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpec) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

type ClusterResourceSetBindingSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetBindingSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetBindingSpec)(nil)).Elem()
}

func (o ClusterResourceSetBindingSpecPtrOutput) ToClusterResourceSetBindingSpecPtrOutput() ClusterResourceSetBindingSpecPtrOutput {
	return o
}

func (o ClusterResourceSetBindingSpecPtrOutput) ToClusterResourceSetBindingSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecPtrOutput {
	return o
}

func (o ClusterResourceSetBindingSpecPtrOutput) Elem() ClusterResourceSetBindingSpecOutput {
	return o.ApplyT(func(v *ClusterResourceSetBindingSpec) ClusterResourceSetBindingSpec {
		if v != nil {
			return *v
		}
		var ret ClusterResourceSetBindingSpec
		return ret
	}).(ClusterResourceSetBindingSpecOutput)
}

// Bindings is a list of ClusterResourceSets and their resources.
func (o ClusterResourceSetBindingSpecPtrOutput) Bindings() ClusterResourceSetBindingSpecBindingsArrayOutput {
	return o.ApplyT(func(v *ClusterResourceSetBindingSpec) []ClusterResourceSetBindingSpecBindings {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(ClusterResourceSetBindingSpecBindingsArrayOutput)
}

// ClusterName is the name of the Cluster this binding applies to. Note: this field mandatory in v1beta2.
func (o ClusterResourceSetBindingSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetBindingSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
type ClusterResourceSetBindingSpecBindings struct {
	// ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
	ClusterResourceSetName string `pulumi:"clusterResourceSetName"`
	// Resources is a list of resources that the ClusterResourceSet has.
	Resources []ClusterResourceSetBindingSpecBindingsResources `pulumi:"resources"`
}

// ClusterResourceSetBindingSpecBindingsInput is an input type that accepts ClusterResourceSetBindingSpecBindingsArgs and ClusterResourceSetBindingSpecBindingsOutput values.
// You can construct a concrete instance of `ClusterResourceSetBindingSpecBindingsInput` via:
//
//	ClusterResourceSetBindingSpecBindingsArgs{...}
type ClusterResourceSetBindingSpecBindingsInput interface {
	pulumi.Input

	ToClusterResourceSetBindingSpecBindingsOutput() ClusterResourceSetBindingSpecBindingsOutput
	ToClusterResourceSetBindingSpecBindingsOutputWithContext(context.Context) ClusterResourceSetBindingSpecBindingsOutput
}

// ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
type ClusterResourceSetBindingSpecBindingsArgs struct {
	// ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
	ClusterResourceSetName pulumi.StringInput `pulumi:"clusterResourceSetName"`
	// Resources is a list of resources that the ClusterResourceSet has.
	Resources ClusterResourceSetBindingSpecBindingsResourcesArrayInput `pulumi:"resources"`
}

func (ClusterResourceSetBindingSpecBindingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetBindingSpecBindings)(nil)).Elem()
}

func (i ClusterResourceSetBindingSpecBindingsArgs) ToClusterResourceSetBindingSpecBindingsOutput() ClusterResourceSetBindingSpecBindingsOutput {
	return i.ToClusterResourceSetBindingSpecBindingsOutputWithContext(context.Background())
}

func (i ClusterResourceSetBindingSpecBindingsArgs) ToClusterResourceSetBindingSpecBindingsOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingSpecBindingsOutput)
}

// ClusterResourceSetBindingSpecBindingsArrayInput is an input type that accepts ClusterResourceSetBindingSpecBindingsArray and ClusterResourceSetBindingSpecBindingsArrayOutput values.
// You can construct a concrete instance of `ClusterResourceSetBindingSpecBindingsArrayInput` via:
//
//	ClusterResourceSetBindingSpecBindingsArray{ ClusterResourceSetBindingSpecBindingsArgs{...} }
type ClusterResourceSetBindingSpecBindingsArrayInput interface {
	pulumi.Input

	ToClusterResourceSetBindingSpecBindingsArrayOutput() ClusterResourceSetBindingSpecBindingsArrayOutput
	ToClusterResourceSetBindingSpecBindingsArrayOutputWithContext(context.Context) ClusterResourceSetBindingSpecBindingsArrayOutput
}

type ClusterResourceSetBindingSpecBindingsArray []ClusterResourceSetBindingSpecBindingsInput

func (ClusterResourceSetBindingSpecBindingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetBindingSpecBindings)(nil)).Elem()
}

func (i ClusterResourceSetBindingSpecBindingsArray) ToClusterResourceSetBindingSpecBindingsArrayOutput() ClusterResourceSetBindingSpecBindingsArrayOutput {
	return i.ToClusterResourceSetBindingSpecBindingsArrayOutputWithContext(context.Background())
}

func (i ClusterResourceSetBindingSpecBindingsArray) ToClusterResourceSetBindingSpecBindingsArrayOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingSpecBindingsArrayOutput)
}

// ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
type ClusterResourceSetBindingSpecBindingsOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetBindingSpecBindingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetBindingSpecBindings)(nil)).Elem()
}

func (o ClusterResourceSetBindingSpecBindingsOutput) ToClusterResourceSetBindingSpecBindingsOutput() ClusterResourceSetBindingSpecBindingsOutput {
	return o
}

func (o ClusterResourceSetBindingSpecBindingsOutput) ToClusterResourceSetBindingSpecBindingsOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsOutput {
	return o
}

// ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
func (o ClusterResourceSetBindingSpecBindingsOutput) ClusterResourceSetName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpecBindings) string { return v.ClusterResourceSetName }).(pulumi.StringOutput)
}

// Resources is a list of resources that the ClusterResourceSet has.
func (o ClusterResourceSetBindingSpecBindingsOutput) Resources() ClusterResourceSetBindingSpecBindingsResourcesArrayOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpecBindings) []ClusterResourceSetBindingSpecBindingsResources {
		return v.Resources
	}).(ClusterResourceSetBindingSpecBindingsResourcesArrayOutput)
}

type ClusterResourceSetBindingSpecBindingsArrayOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetBindingSpecBindingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetBindingSpecBindings)(nil)).Elem()
}

func (o ClusterResourceSetBindingSpecBindingsArrayOutput) ToClusterResourceSetBindingSpecBindingsArrayOutput() ClusterResourceSetBindingSpecBindingsArrayOutput {
	return o
}

func (o ClusterResourceSetBindingSpecBindingsArrayOutput) ToClusterResourceSetBindingSpecBindingsArrayOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsArrayOutput {
	return o
}

func (o ClusterResourceSetBindingSpecBindingsArrayOutput) Index(i pulumi.IntInput) ClusterResourceSetBindingSpecBindingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterResourceSetBindingSpecBindings {
		return vs[0].([]ClusterResourceSetBindingSpecBindings)[vs[1].(int)]
	}).(ClusterResourceSetBindingSpecBindingsOutput)
}

// ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
type ClusterResourceSetBindingSpecBindingsResources struct {
	// Applied is to track if a resource is applied to the cluster or not.
	Applied bool `pulumi:"applied"`
	// Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
	Hash *string `pulumi:"hash"`
	// Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
	Kind string `pulumi:"kind"`
	// LastAppliedTime identifies when this resource was last applied to the cluster.
	LastAppliedTime *string `pulumi:"lastAppliedTime"`
	// Name of the resource that is in the same namespace with ClusterResourceSet object.
	Name string `pulumi:"name"`
}

// ClusterResourceSetBindingSpecBindingsResourcesInput is an input type that accepts ClusterResourceSetBindingSpecBindingsResourcesArgs and ClusterResourceSetBindingSpecBindingsResourcesOutput values.
// You can construct a concrete instance of `ClusterResourceSetBindingSpecBindingsResourcesInput` via:
//
//	ClusterResourceSetBindingSpecBindingsResourcesArgs{...}
type ClusterResourceSetBindingSpecBindingsResourcesInput interface {
	pulumi.Input

	ToClusterResourceSetBindingSpecBindingsResourcesOutput() ClusterResourceSetBindingSpecBindingsResourcesOutput
	ToClusterResourceSetBindingSpecBindingsResourcesOutputWithContext(context.Context) ClusterResourceSetBindingSpecBindingsResourcesOutput
}

// ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
type ClusterResourceSetBindingSpecBindingsResourcesArgs struct {
	// Applied is to track if a resource is applied to the cluster or not.
	Applied pulumi.BoolInput `pulumi:"applied"`
	// Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
	Hash pulumi.StringPtrInput `pulumi:"hash"`
	// Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
	Kind pulumi.StringInput `pulumi:"kind"`
	// LastAppliedTime identifies when this resource was last applied to the cluster.
	LastAppliedTime pulumi.StringPtrInput `pulumi:"lastAppliedTime"`
	// Name of the resource that is in the same namespace with ClusterResourceSet object.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ClusterResourceSetBindingSpecBindingsResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetBindingSpecBindingsResources)(nil)).Elem()
}

func (i ClusterResourceSetBindingSpecBindingsResourcesArgs) ToClusterResourceSetBindingSpecBindingsResourcesOutput() ClusterResourceSetBindingSpecBindingsResourcesOutput {
	return i.ToClusterResourceSetBindingSpecBindingsResourcesOutputWithContext(context.Background())
}

func (i ClusterResourceSetBindingSpecBindingsResourcesArgs) ToClusterResourceSetBindingSpecBindingsResourcesOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingSpecBindingsResourcesOutput)
}

// ClusterResourceSetBindingSpecBindingsResourcesArrayInput is an input type that accepts ClusterResourceSetBindingSpecBindingsResourcesArray and ClusterResourceSetBindingSpecBindingsResourcesArrayOutput values.
// You can construct a concrete instance of `ClusterResourceSetBindingSpecBindingsResourcesArrayInput` via:
//
//	ClusterResourceSetBindingSpecBindingsResourcesArray{ ClusterResourceSetBindingSpecBindingsResourcesArgs{...} }
type ClusterResourceSetBindingSpecBindingsResourcesArrayInput interface {
	pulumi.Input

	ToClusterResourceSetBindingSpecBindingsResourcesArrayOutput() ClusterResourceSetBindingSpecBindingsResourcesArrayOutput
	ToClusterResourceSetBindingSpecBindingsResourcesArrayOutputWithContext(context.Context) ClusterResourceSetBindingSpecBindingsResourcesArrayOutput
}

type ClusterResourceSetBindingSpecBindingsResourcesArray []ClusterResourceSetBindingSpecBindingsResourcesInput

func (ClusterResourceSetBindingSpecBindingsResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetBindingSpecBindingsResources)(nil)).Elem()
}

func (i ClusterResourceSetBindingSpecBindingsResourcesArray) ToClusterResourceSetBindingSpecBindingsResourcesArrayOutput() ClusterResourceSetBindingSpecBindingsResourcesArrayOutput {
	return i.ToClusterResourceSetBindingSpecBindingsResourcesArrayOutputWithContext(context.Background())
}

func (i ClusterResourceSetBindingSpecBindingsResourcesArray) ToClusterResourceSetBindingSpecBindingsResourcesArrayOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetBindingSpecBindingsResourcesArrayOutput)
}

// ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
type ClusterResourceSetBindingSpecBindingsResourcesOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetBindingSpecBindingsResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetBindingSpecBindingsResources)(nil)).Elem()
}

func (o ClusterResourceSetBindingSpecBindingsResourcesOutput) ToClusterResourceSetBindingSpecBindingsResourcesOutput() ClusterResourceSetBindingSpecBindingsResourcesOutput {
	return o
}

func (o ClusterResourceSetBindingSpecBindingsResourcesOutput) ToClusterResourceSetBindingSpecBindingsResourcesOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsResourcesOutput {
	return o
}

// Applied is to track if a resource is applied to the cluster or not.
func (o ClusterResourceSetBindingSpecBindingsResourcesOutput) Applied() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpecBindingsResources) bool { return v.Applied }).(pulumi.BoolOutput)
}

// Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
func (o ClusterResourceSetBindingSpecBindingsResourcesOutput) Hash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpecBindingsResources) *string { return v.Hash }).(pulumi.StringPtrOutput)
}

// Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
func (o ClusterResourceSetBindingSpecBindingsResourcesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpecBindingsResources) string { return v.Kind }).(pulumi.StringOutput)
}

// LastAppliedTime identifies when this resource was last applied to the cluster.
func (o ClusterResourceSetBindingSpecBindingsResourcesOutput) LastAppliedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpecBindingsResources) *string { return v.LastAppliedTime }).(pulumi.StringPtrOutput)
}

// Name of the resource that is in the same namespace with ClusterResourceSet object.
func (o ClusterResourceSetBindingSpecBindingsResourcesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetBindingSpecBindingsResources) string { return v.Name }).(pulumi.StringOutput)
}

type ClusterResourceSetBindingSpecBindingsResourcesArrayOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetBindingSpecBindingsResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetBindingSpecBindingsResources)(nil)).Elem()
}

func (o ClusterResourceSetBindingSpecBindingsResourcesArrayOutput) ToClusterResourceSetBindingSpecBindingsResourcesArrayOutput() ClusterResourceSetBindingSpecBindingsResourcesArrayOutput {
	return o
}

func (o ClusterResourceSetBindingSpecBindingsResourcesArrayOutput) ToClusterResourceSetBindingSpecBindingsResourcesArrayOutputWithContext(ctx context.Context) ClusterResourceSetBindingSpecBindingsResourcesArrayOutput {
	return o
}

func (o ClusterResourceSetBindingSpecBindingsResourcesArrayOutput) Index(i pulumi.IntInput) ClusterResourceSetBindingSpecBindingsResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterResourceSetBindingSpecBindingsResources {
		return vs[0].([]ClusterResourceSetBindingSpecBindingsResources)[vs[1].(int)]
	}).(ClusterResourceSetBindingSpecBindingsResourcesOutput)
}

type ClusterResourceSetMetadata struct {
}

// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
type ClusterResourceSetSpec struct {
	// Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
	ClusterSelector ClusterResourceSetSpecClusterSelector `pulumi:"clusterSelector"`
	// Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
	Resources []ClusterResourceSetSpecResources `pulumi:"resources"`
	// Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
	Strategy *string `pulumi:"strategy"`
}

// ClusterResourceSetSpecInput is an input type that accepts ClusterResourceSetSpecArgs and ClusterResourceSetSpecOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecInput` via:
//
//	ClusterResourceSetSpecArgs{...}
type ClusterResourceSetSpecInput interface {
	pulumi.Input

	ToClusterResourceSetSpecOutput() ClusterResourceSetSpecOutput
	ToClusterResourceSetSpecOutputWithContext(context.Context) ClusterResourceSetSpecOutput
}

// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
type ClusterResourceSetSpecArgs struct {
	// Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
	ClusterSelector ClusterResourceSetSpecClusterSelectorInput `pulumi:"clusterSelector"`
	// Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
	Resources ClusterResourceSetSpecResourcesArrayInput `pulumi:"resources"`
	// Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (ClusterResourceSetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpec)(nil)).Elem()
}

func (i ClusterResourceSetSpecArgs) ToClusterResourceSetSpecOutput() ClusterResourceSetSpecOutput {
	return i.ToClusterResourceSetSpecOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecArgs) ToClusterResourceSetSpecOutputWithContext(ctx context.Context) ClusterResourceSetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecOutput)
}

func (i ClusterResourceSetSpecArgs) ToClusterResourceSetSpecPtrOutput() ClusterResourceSetSpecPtrOutput {
	return i.ToClusterResourceSetSpecPtrOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecArgs) ToClusterResourceSetSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecOutput).ToClusterResourceSetSpecPtrOutputWithContext(ctx)
}

// ClusterResourceSetSpecPtrInput is an input type that accepts ClusterResourceSetSpecArgs, ClusterResourceSetSpecPtr and ClusterResourceSetSpecPtrOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecPtrInput` via:
//
//	        ClusterResourceSetSpecArgs{...}
//
//	or:
//
//	        nil
type ClusterResourceSetSpecPtrInput interface {
	pulumi.Input

	ToClusterResourceSetSpecPtrOutput() ClusterResourceSetSpecPtrOutput
	ToClusterResourceSetSpecPtrOutputWithContext(context.Context) ClusterResourceSetSpecPtrOutput
}

type clusterResourceSetSpecPtrType ClusterResourceSetSpecArgs

func ClusterResourceSetSpecPtr(v *ClusterResourceSetSpecArgs) ClusterResourceSetSpecPtrInput {
	return (*clusterResourceSetSpecPtrType)(v)
}

func (*clusterResourceSetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetSpec)(nil)).Elem()
}

func (i *clusterResourceSetSpecPtrType) ToClusterResourceSetSpecPtrOutput() ClusterResourceSetSpecPtrOutput {
	return i.ToClusterResourceSetSpecPtrOutputWithContext(context.Background())
}

func (i *clusterResourceSetSpecPtrType) ToClusterResourceSetSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecPtrOutput)
}

// ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
type ClusterResourceSetSpecOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpec)(nil)).Elem()
}

func (o ClusterResourceSetSpecOutput) ToClusterResourceSetSpecOutput() ClusterResourceSetSpecOutput {
	return o
}

func (o ClusterResourceSetSpecOutput) ToClusterResourceSetSpecOutputWithContext(ctx context.Context) ClusterResourceSetSpecOutput {
	return o
}

func (o ClusterResourceSetSpecOutput) ToClusterResourceSetSpecPtrOutput() ClusterResourceSetSpecPtrOutput {
	return o.ToClusterResourceSetSpecPtrOutputWithContext(context.Background())
}

func (o ClusterResourceSetSpecOutput) ToClusterResourceSetSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterResourceSetSpec) *ClusterResourceSetSpec {
		return &v
	}).(ClusterResourceSetSpecPtrOutput)
}

// Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
func (o ClusterResourceSetSpecOutput) ClusterSelector() ClusterResourceSetSpecClusterSelectorOutput {
	return o.ApplyT(func(v ClusterResourceSetSpec) ClusterResourceSetSpecClusterSelector { return v.ClusterSelector }).(ClusterResourceSetSpecClusterSelectorOutput)
}

// Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
func (o ClusterResourceSetSpecOutput) Resources() ClusterResourceSetSpecResourcesArrayOutput {
	return o.ApplyT(func(v ClusterResourceSetSpec) []ClusterResourceSetSpecResources { return v.Resources }).(ClusterResourceSetSpecResourcesArrayOutput)
}

// Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
func (o ClusterResourceSetSpecOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetSpec) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type ClusterResourceSetSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetSpec)(nil)).Elem()
}

func (o ClusterResourceSetSpecPtrOutput) ToClusterResourceSetSpecPtrOutput() ClusterResourceSetSpecPtrOutput {
	return o
}

func (o ClusterResourceSetSpecPtrOutput) ToClusterResourceSetSpecPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecPtrOutput {
	return o
}

func (o ClusterResourceSetSpecPtrOutput) Elem() ClusterResourceSetSpecOutput {
	return o.ApplyT(func(v *ClusterResourceSetSpec) ClusterResourceSetSpec {
		if v != nil {
			return *v
		}
		var ret ClusterResourceSetSpec
		return ret
	}).(ClusterResourceSetSpecOutput)
}

// Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
func (o ClusterResourceSetSpecPtrOutput) ClusterSelector() ClusterResourceSetSpecClusterSelectorPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetSpec) *ClusterResourceSetSpecClusterSelector {
		if v == nil {
			return nil
		}
		return &v.ClusterSelector
	}).(ClusterResourceSetSpecClusterSelectorPtrOutput)
}

// Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
func (o ClusterResourceSetSpecPtrOutput) Resources() ClusterResourceSetSpecResourcesArrayOutput {
	return o.ApplyT(func(v *ClusterResourceSetSpec) []ClusterResourceSetSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ClusterResourceSetSpecResourcesArrayOutput)
}

// Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
func (o ClusterResourceSetSpecPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetSpec) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

// Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
type ClusterResourceSetSpecClusterSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ClusterResourceSetSpecClusterSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ClusterResourceSetSpecClusterSelectorInput is an input type that accepts ClusterResourceSetSpecClusterSelectorArgs and ClusterResourceSetSpecClusterSelectorOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecClusterSelectorInput` via:
//
//	ClusterResourceSetSpecClusterSelectorArgs{...}
type ClusterResourceSetSpecClusterSelectorInput interface {
	pulumi.Input

	ToClusterResourceSetSpecClusterSelectorOutput() ClusterResourceSetSpecClusterSelectorOutput
	ToClusterResourceSetSpecClusterSelectorOutputWithContext(context.Context) ClusterResourceSetSpecClusterSelectorOutput
}

// Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
type ClusterResourceSetSpecClusterSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ClusterResourceSetSpecClusterSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpecClusterSelector)(nil)).Elem()
}

func (i ClusterResourceSetSpecClusterSelectorArgs) ToClusterResourceSetSpecClusterSelectorOutput() ClusterResourceSetSpecClusterSelectorOutput {
	return i.ToClusterResourceSetSpecClusterSelectorOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecClusterSelectorArgs) ToClusterResourceSetSpecClusterSelectorOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecClusterSelectorOutput)
}

func (i ClusterResourceSetSpecClusterSelectorArgs) ToClusterResourceSetSpecClusterSelectorPtrOutput() ClusterResourceSetSpecClusterSelectorPtrOutput {
	return i.ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecClusterSelectorArgs) ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecClusterSelectorOutput).ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(ctx)
}

// ClusterResourceSetSpecClusterSelectorPtrInput is an input type that accepts ClusterResourceSetSpecClusterSelectorArgs, ClusterResourceSetSpecClusterSelectorPtr and ClusterResourceSetSpecClusterSelectorPtrOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecClusterSelectorPtrInput` via:
//
//	        ClusterResourceSetSpecClusterSelectorArgs{...}
//
//	or:
//
//	        nil
type ClusterResourceSetSpecClusterSelectorPtrInput interface {
	pulumi.Input

	ToClusterResourceSetSpecClusterSelectorPtrOutput() ClusterResourceSetSpecClusterSelectorPtrOutput
	ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(context.Context) ClusterResourceSetSpecClusterSelectorPtrOutput
}

type clusterResourceSetSpecClusterSelectorPtrType ClusterResourceSetSpecClusterSelectorArgs

func ClusterResourceSetSpecClusterSelectorPtr(v *ClusterResourceSetSpecClusterSelectorArgs) ClusterResourceSetSpecClusterSelectorPtrInput {
	return (*clusterResourceSetSpecClusterSelectorPtrType)(v)
}

func (*clusterResourceSetSpecClusterSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetSpecClusterSelector)(nil)).Elem()
}

func (i *clusterResourceSetSpecClusterSelectorPtrType) ToClusterResourceSetSpecClusterSelectorPtrOutput() ClusterResourceSetSpecClusterSelectorPtrOutput {
	return i.ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(context.Background())
}

func (i *clusterResourceSetSpecClusterSelectorPtrType) ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecClusterSelectorPtrOutput)
}

// Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
type ClusterResourceSetSpecClusterSelectorOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecClusterSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpecClusterSelector)(nil)).Elem()
}

func (o ClusterResourceSetSpecClusterSelectorOutput) ToClusterResourceSetSpecClusterSelectorOutput() ClusterResourceSetSpecClusterSelectorOutput {
	return o
}

func (o ClusterResourceSetSpecClusterSelectorOutput) ToClusterResourceSetSpecClusterSelectorOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorOutput {
	return o
}

func (o ClusterResourceSetSpecClusterSelectorOutput) ToClusterResourceSetSpecClusterSelectorPtrOutput() ClusterResourceSetSpecClusterSelectorPtrOutput {
	return o.ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(context.Background())
}

func (o ClusterResourceSetSpecClusterSelectorOutput) ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterResourceSetSpecClusterSelector) *ClusterResourceSetSpecClusterSelector {
		return &v
	}).(ClusterResourceSetSpecClusterSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ClusterResourceSetSpecClusterSelectorOutput) MatchExpressions() ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ClusterResourceSetSpecClusterSelector) []ClusterResourceSetSpecClusterSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ClusterResourceSetSpecClusterSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterResourceSetSpecClusterSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ClusterResourceSetSpecClusterSelectorPtrOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecClusterSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetSpecClusterSelector)(nil)).Elem()
}

func (o ClusterResourceSetSpecClusterSelectorPtrOutput) ToClusterResourceSetSpecClusterSelectorPtrOutput() ClusterResourceSetSpecClusterSelectorPtrOutput {
	return o
}

func (o ClusterResourceSetSpecClusterSelectorPtrOutput) ToClusterResourceSetSpecClusterSelectorPtrOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorPtrOutput {
	return o
}

func (o ClusterResourceSetSpecClusterSelectorPtrOutput) Elem() ClusterResourceSetSpecClusterSelectorOutput {
	return o.ApplyT(func(v *ClusterResourceSetSpecClusterSelector) ClusterResourceSetSpecClusterSelector {
		if v != nil {
			return *v
		}
		var ret ClusterResourceSetSpecClusterSelector
		return ret
	}).(ClusterResourceSetSpecClusterSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ClusterResourceSetSpecClusterSelectorPtrOutput) MatchExpressions() ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ClusterResourceSetSpecClusterSelector) []ClusterResourceSetSpecClusterSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ClusterResourceSetSpecClusterSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterResourceSetSpecClusterSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ClusterResourceSetSpecClusterSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ClusterResourceSetSpecClusterSelectorMatchExpressionsInput is an input type that accepts ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs and ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecClusterSelectorMatchExpressionsInput` via:
//
//	ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs{...}
type ClusterResourceSetSpecClusterSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToClusterResourceSetSpecClusterSelectorMatchExpressionsOutput() ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput
	ToClusterResourceSetSpecClusterSelectorMatchExpressionsOutputWithContext(context.Context) ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpecClusterSelectorMatchExpressions)(nil)).Elem()
}

func (i ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs) ToClusterResourceSetSpecClusterSelectorMatchExpressionsOutput() ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput {
	return i.ToClusterResourceSetSpecClusterSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs) ToClusterResourceSetSpecClusterSelectorMatchExpressionsOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput)
}

// ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayInput is an input type that accepts ClusterResourceSetSpecClusterSelectorMatchExpressionsArray and ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayInput` via:
//
//	ClusterResourceSetSpecClusterSelectorMatchExpressionsArray{ ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs{...} }
type ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput() ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput
	ToClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutputWithContext(context.Context) ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput
}

type ClusterResourceSetSpecClusterSelectorMatchExpressionsArray []ClusterResourceSetSpecClusterSelectorMatchExpressionsInput

func (ClusterResourceSetSpecClusterSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetSpecClusterSelectorMatchExpressions)(nil)).Elem()
}

func (i ClusterResourceSetSpecClusterSelectorMatchExpressionsArray) ToClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput() ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput {
	return i.ToClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecClusterSelectorMatchExpressionsArray) ToClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpecClusterSelectorMatchExpressions)(nil)).Elem()
}

func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput) ToClusterResourceSetSpecClusterSelectorMatchExpressionsOutput() ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput {
	return o
}

func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput) ToClusterResourceSetSpecClusterSelectorMatchExpressionsOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetSpecClusterSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetSpecClusterSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterResourceSetSpecClusterSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetSpecClusterSelectorMatchExpressions)(nil)).Elem()
}

func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput) ToClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput() ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput) ToClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterResourceSetSpecClusterSelectorMatchExpressions {
		return vs[0].([]ClusterResourceSetSpecClusterSelectorMatchExpressions)[vs[1].(int)]
	}).(ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ClusterResourceSetSpecClusterSelectorMatchLabels struct {
}

// ResourceRef specifies a resource.
type ClusterResourceSetSpecResources struct {
	// Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
	Kind string `pulumi:"kind"`
	// Name of the resource that is in the same namespace with ClusterResourceSet object.
	Name string `pulumi:"name"`
}

// ClusterResourceSetSpecResourcesInput is an input type that accepts ClusterResourceSetSpecResourcesArgs and ClusterResourceSetSpecResourcesOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecResourcesInput` via:
//
//	ClusterResourceSetSpecResourcesArgs{...}
type ClusterResourceSetSpecResourcesInput interface {
	pulumi.Input

	ToClusterResourceSetSpecResourcesOutput() ClusterResourceSetSpecResourcesOutput
	ToClusterResourceSetSpecResourcesOutputWithContext(context.Context) ClusterResourceSetSpecResourcesOutput
}

// ResourceRef specifies a resource.
type ClusterResourceSetSpecResourcesArgs struct {
	// Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the resource that is in the same namespace with ClusterResourceSet object.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ClusterResourceSetSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpecResources)(nil)).Elem()
}

func (i ClusterResourceSetSpecResourcesArgs) ToClusterResourceSetSpecResourcesOutput() ClusterResourceSetSpecResourcesOutput {
	return i.ToClusterResourceSetSpecResourcesOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecResourcesArgs) ToClusterResourceSetSpecResourcesOutputWithContext(ctx context.Context) ClusterResourceSetSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecResourcesOutput)
}

// ClusterResourceSetSpecResourcesArrayInput is an input type that accepts ClusterResourceSetSpecResourcesArray and ClusterResourceSetSpecResourcesArrayOutput values.
// You can construct a concrete instance of `ClusterResourceSetSpecResourcesArrayInput` via:
//
//	ClusterResourceSetSpecResourcesArray{ ClusterResourceSetSpecResourcesArgs{...} }
type ClusterResourceSetSpecResourcesArrayInput interface {
	pulumi.Input

	ToClusterResourceSetSpecResourcesArrayOutput() ClusterResourceSetSpecResourcesArrayOutput
	ToClusterResourceSetSpecResourcesArrayOutputWithContext(context.Context) ClusterResourceSetSpecResourcesArrayOutput
}

type ClusterResourceSetSpecResourcesArray []ClusterResourceSetSpecResourcesInput

func (ClusterResourceSetSpecResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetSpecResources)(nil)).Elem()
}

func (i ClusterResourceSetSpecResourcesArray) ToClusterResourceSetSpecResourcesArrayOutput() ClusterResourceSetSpecResourcesArrayOutput {
	return i.ToClusterResourceSetSpecResourcesArrayOutputWithContext(context.Background())
}

func (i ClusterResourceSetSpecResourcesArray) ToClusterResourceSetSpecResourcesArrayOutputWithContext(ctx context.Context) ClusterResourceSetSpecResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetSpecResourcesArrayOutput)
}

// ResourceRef specifies a resource.
type ClusterResourceSetSpecResourcesOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetSpecResources)(nil)).Elem()
}

func (o ClusterResourceSetSpecResourcesOutput) ToClusterResourceSetSpecResourcesOutput() ClusterResourceSetSpecResourcesOutput {
	return o
}

func (o ClusterResourceSetSpecResourcesOutput) ToClusterResourceSetSpecResourcesOutputWithContext(ctx context.Context) ClusterResourceSetSpecResourcesOutput {
	return o
}

// Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
func (o ClusterResourceSetSpecResourcesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetSpecResources) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource that is in the same namespace with ClusterResourceSet object.
func (o ClusterResourceSetSpecResourcesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetSpecResources) string { return v.Name }).(pulumi.StringOutput)
}

type ClusterResourceSetSpecResourcesArrayOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetSpecResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetSpecResources)(nil)).Elem()
}

func (o ClusterResourceSetSpecResourcesArrayOutput) ToClusterResourceSetSpecResourcesArrayOutput() ClusterResourceSetSpecResourcesArrayOutput {
	return o
}

func (o ClusterResourceSetSpecResourcesArrayOutput) ToClusterResourceSetSpecResourcesArrayOutputWithContext(ctx context.Context) ClusterResourceSetSpecResourcesArrayOutput {
	return o
}

func (o ClusterResourceSetSpecResourcesArrayOutput) Index(i pulumi.IntInput) ClusterResourceSetSpecResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterResourceSetSpecResources {
		return vs[0].([]ClusterResourceSetSpecResources)[vs[1].(int)]
	}).(ClusterResourceSetSpecResourcesOutput)
}

// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
type ClusterResourceSetStatus struct {
	// Conditions defines current state of the ClusterResourceSet.
	Conditions []ClusterResourceSetStatusConditions `pulumi:"conditions"`
	// ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// ClusterResourceSetStatusInput is an input type that accepts ClusterResourceSetStatusArgs and ClusterResourceSetStatusOutput values.
// You can construct a concrete instance of `ClusterResourceSetStatusInput` via:
//
//	ClusterResourceSetStatusArgs{...}
type ClusterResourceSetStatusInput interface {
	pulumi.Input

	ToClusterResourceSetStatusOutput() ClusterResourceSetStatusOutput
	ToClusterResourceSetStatusOutputWithContext(context.Context) ClusterResourceSetStatusOutput
}

// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
type ClusterResourceSetStatusArgs struct {
	// Conditions defines current state of the ClusterResourceSet.
	Conditions ClusterResourceSetStatusConditionsArrayInput `pulumi:"conditions"`
	// ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (ClusterResourceSetStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetStatus)(nil)).Elem()
}

func (i ClusterResourceSetStatusArgs) ToClusterResourceSetStatusOutput() ClusterResourceSetStatusOutput {
	return i.ToClusterResourceSetStatusOutputWithContext(context.Background())
}

func (i ClusterResourceSetStatusArgs) ToClusterResourceSetStatusOutputWithContext(ctx context.Context) ClusterResourceSetStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetStatusOutput)
}

func (i ClusterResourceSetStatusArgs) ToClusterResourceSetStatusPtrOutput() ClusterResourceSetStatusPtrOutput {
	return i.ToClusterResourceSetStatusPtrOutputWithContext(context.Background())
}

func (i ClusterResourceSetStatusArgs) ToClusterResourceSetStatusPtrOutputWithContext(ctx context.Context) ClusterResourceSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetStatusOutput).ToClusterResourceSetStatusPtrOutputWithContext(ctx)
}

// ClusterResourceSetStatusPtrInput is an input type that accepts ClusterResourceSetStatusArgs, ClusterResourceSetStatusPtr and ClusterResourceSetStatusPtrOutput values.
// You can construct a concrete instance of `ClusterResourceSetStatusPtrInput` via:
//
//	        ClusterResourceSetStatusArgs{...}
//
//	or:
//
//	        nil
type ClusterResourceSetStatusPtrInput interface {
	pulumi.Input

	ToClusterResourceSetStatusPtrOutput() ClusterResourceSetStatusPtrOutput
	ToClusterResourceSetStatusPtrOutputWithContext(context.Context) ClusterResourceSetStatusPtrOutput
}

type clusterResourceSetStatusPtrType ClusterResourceSetStatusArgs

func ClusterResourceSetStatusPtr(v *ClusterResourceSetStatusArgs) ClusterResourceSetStatusPtrInput {
	return (*clusterResourceSetStatusPtrType)(v)
}

func (*clusterResourceSetStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetStatus)(nil)).Elem()
}

func (i *clusterResourceSetStatusPtrType) ToClusterResourceSetStatusPtrOutput() ClusterResourceSetStatusPtrOutput {
	return i.ToClusterResourceSetStatusPtrOutputWithContext(context.Background())
}

func (i *clusterResourceSetStatusPtrType) ToClusterResourceSetStatusPtrOutputWithContext(ctx context.Context) ClusterResourceSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetStatusPtrOutput)
}

// ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
type ClusterResourceSetStatusOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetStatus)(nil)).Elem()
}

func (o ClusterResourceSetStatusOutput) ToClusterResourceSetStatusOutput() ClusterResourceSetStatusOutput {
	return o
}

func (o ClusterResourceSetStatusOutput) ToClusterResourceSetStatusOutputWithContext(ctx context.Context) ClusterResourceSetStatusOutput {
	return o
}

func (o ClusterResourceSetStatusOutput) ToClusterResourceSetStatusPtrOutput() ClusterResourceSetStatusPtrOutput {
	return o.ToClusterResourceSetStatusPtrOutputWithContext(context.Background())
}

func (o ClusterResourceSetStatusOutput) ToClusterResourceSetStatusPtrOutputWithContext(ctx context.Context) ClusterResourceSetStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterResourceSetStatus) *ClusterResourceSetStatus {
		return &v
	}).(ClusterResourceSetStatusPtrOutput)
}

// Conditions defines current state of the ClusterResourceSet.
func (o ClusterResourceSetStatusOutput) Conditions() ClusterResourceSetStatusConditionsArrayOutput {
	return o.ApplyT(func(v ClusterResourceSetStatus) []ClusterResourceSetStatusConditions { return v.Conditions }).(ClusterResourceSetStatusConditionsArrayOutput)
}

// ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
func (o ClusterResourceSetStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type ClusterResourceSetStatusPtrOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceSetStatus)(nil)).Elem()
}

func (o ClusterResourceSetStatusPtrOutput) ToClusterResourceSetStatusPtrOutput() ClusterResourceSetStatusPtrOutput {
	return o
}

func (o ClusterResourceSetStatusPtrOutput) ToClusterResourceSetStatusPtrOutputWithContext(ctx context.Context) ClusterResourceSetStatusPtrOutput {
	return o
}

func (o ClusterResourceSetStatusPtrOutput) Elem() ClusterResourceSetStatusOutput {
	return o.ApplyT(func(v *ClusterResourceSetStatus) ClusterResourceSetStatus {
		if v != nil {
			return *v
		}
		var ret ClusterResourceSetStatus
		return ret
	}).(ClusterResourceSetStatusOutput)
}

// Conditions defines current state of the ClusterResourceSet.
func (o ClusterResourceSetStatusPtrOutput) Conditions() ClusterResourceSetStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ClusterResourceSetStatus) []ClusterResourceSetStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ClusterResourceSetStatusConditionsArrayOutput)
}

// ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
func (o ClusterResourceSetStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterResourceSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type ClusterResourceSetStatusConditions struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type string `pulumi:"type"`
}

// ClusterResourceSetStatusConditionsInput is an input type that accepts ClusterResourceSetStatusConditionsArgs and ClusterResourceSetStatusConditionsOutput values.
// You can construct a concrete instance of `ClusterResourceSetStatusConditionsInput` via:
//
//	ClusterResourceSetStatusConditionsArgs{...}
type ClusterResourceSetStatusConditionsInput interface {
	pulumi.Input

	ToClusterResourceSetStatusConditionsOutput() ClusterResourceSetStatusConditionsOutput
	ToClusterResourceSetStatusConditionsOutputWithContext(context.Context) ClusterResourceSetStatusConditionsOutput
}

// Condition defines an observation of a Cluster API resource operational state.
type ClusterResourceSetStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ClusterResourceSetStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetStatusConditions)(nil)).Elem()
}

func (i ClusterResourceSetStatusConditionsArgs) ToClusterResourceSetStatusConditionsOutput() ClusterResourceSetStatusConditionsOutput {
	return i.ToClusterResourceSetStatusConditionsOutputWithContext(context.Background())
}

func (i ClusterResourceSetStatusConditionsArgs) ToClusterResourceSetStatusConditionsOutputWithContext(ctx context.Context) ClusterResourceSetStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetStatusConditionsOutput)
}

// ClusterResourceSetStatusConditionsArrayInput is an input type that accepts ClusterResourceSetStatusConditionsArray and ClusterResourceSetStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ClusterResourceSetStatusConditionsArrayInput` via:
//
//	ClusterResourceSetStatusConditionsArray{ ClusterResourceSetStatusConditionsArgs{...} }
type ClusterResourceSetStatusConditionsArrayInput interface {
	pulumi.Input

	ToClusterResourceSetStatusConditionsArrayOutput() ClusterResourceSetStatusConditionsArrayOutput
	ToClusterResourceSetStatusConditionsArrayOutputWithContext(context.Context) ClusterResourceSetStatusConditionsArrayOutput
}

type ClusterResourceSetStatusConditionsArray []ClusterResourceSetStatusConditionsInput

func (ClusterResourceSetStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetStatusConditions)(nil)).Elem()
}

func (i ClusterResourceSetStatusConditionsArray) ToClusterResourceSetStatusConditionsArrayOutput() ClusterResourceSetStatusConditionsArrayOutput {
	return i.ToClusterResourceSetStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ClusterResourceSetStatusConditionsArray) ToClusterResourceSetStatusConditionsArrayOutputWithContext(ctx context.Context) ClusterResourceSetStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourceSetStatusConditionsArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type ClusterResourceSetStatusConditionsOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceSetStatusConditions)(nil)).Elem()
}

func (o ClusterResourceSetStatusConditionsOutput) ToClusterResourceSetStatusConditionsOutput() ClusterResourceSetStatusConditionsOutput {
	return o
}

func (o ClusterResourceSetStatusConditionsOutput) ToClusterResourceSetStatusConditionsOutputWithContext(ctx context.Context) ClusterResourceSetStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
func (o ClusterResourceSetStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A human readable message indicating details about the transition. This field may be empty.
func (o ClusterResourceSetStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
func (o ClusterResourceSetStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
func (o ClusterResourceSetStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceSetStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ClusterResourceSetStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
func (o ClusterResourceSetStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResourceSetStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ClusterResourceSetStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ClusterResourceSetStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResourceSetStatusConditions)(nil)).Elem()
}

func (o ClusterResourceSetStatusConditionsArrayOutput) ToClusterResourceSetStatusConditionsArrayOutput() ClusterResourceSetStatusConditionsArrayOutput {
	return o
}

func (o ClusterResourceSetStatusConditionsArrayOutput) ToClusterResourceSetStatusConditionsArrayOutputWithContext(ctx context.Context) ClusterResourceSetStatusConditionsArrayOutput {
	return o
}

func (o ClusterResourceSetStatusConditionsArrayOutput) Index(i pulumi.IntInput) ClusterResourceSetStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterResourceSetStatusConditions {
		return vs[0].([]ClusterResourceSetStatusConditions)[vs[1].(int)]
	}).(ClusterResourceSetStatusConditionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetBindingSpecInput)(nil)).Elem(), ClusterResourceSetBindingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetBindingSpecPtrInput)(nil)).Elem(), ClusterResourceSetBindingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetBindingSpecBindingsInput)(nil)).Elem(), ClusterResourceSetBindingSpecBindingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetBindingSpecBindingsArrayInput)(nil)).Elem(), ClusterResourceSetBindingSpecBindingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetBindingSpecBindingsResourcesInput)(nil)).Elem(), ClusterResourceSetBindingSpecBindingsResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetBindingSpecBindingsResourcesArrayInput)(nil)).Elem(), ClusterResourceSetBindingSpecBindingsResourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecInput)(nil)).Elem(), ClusterResourceSetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecPtrInput)(nil)).Elem(), ClusterResourceSetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecClusterSelectorInput)(nil)).Elem(), ClusterResourceSetSpecClusterSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecClusterSelectorPtrInput)(nil)).Elem(), ClusterResourceSetSpecClusterSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecClusterSelectorMatchExpressionsInput)(nil)).Elem(), ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayInput)(nil)).Elem(), ClusterResourceSetSpecClusterSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecResourcesInput)(nil)).Elem(), ClusterResourceSetSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetSpecResourcesArrayInput)(nil)).Elem(), ClusterResourceSetSpecResourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetStatusInput)(nil)).Elem(), ClusterResourceSetStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetStatusPtrInput)(nil)).Elem(), ClusterResourceSetStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetStatusConditionsInput)(nil)).Elem(), ClusterResourceSetStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourceSetStatusConditionsArrayInput)(nil)).Elem(), ClusterResourceSetStatusConditionsArray{})
	pulumi.RegisterOutputType(ClusterResourceSetBindingSpecOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetBindingSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetBindingSpecBindingsOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetBindingSpecBindingsArrayOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetBindingSpecBindingsResourcesOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetBindingSpecBindingsResourcesArrayOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecClusterSelectorOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecClusterSelectorPtrOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecClusterSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecClusterSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecResourcesOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetSpecResourcesArrayOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetStatusOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetStatusPtrOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetStatusConditionsOutput{})
	pulumi.RegisterOutputType(ClusterResourceSetStatusConditionsArrayOutput{})
}
