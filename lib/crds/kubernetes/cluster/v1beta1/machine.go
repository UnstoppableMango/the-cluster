// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Machine is the Schema for the machines API.
type Machine struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// MachineSpec defines the desired state of Machine.
	Spec MachineSpecPtrOutput `pulumi:"spec"`
	// MachineStatus defines the observed state of Machine.
	Status MachineStatusPtrOutput `pulumi:"status"`
}

// NewMachine registers a new resource with the given unique name, arguments, and options.
func NewMachine(ctx *pulumi.Context,
	name string, args *MachineArgs, opts ...pulumi.ResourceOption) (*Machine, error) {
	if args == nil {
		args = &MachineArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cluster.x-k8s.io/v1beta1")
	args.Kind = pulumi.StringPtr("Machine")
	var resource Machine
	err := ctx.RegisterResource("kubernetes:cluster.x-k8s.io/v1beta1:Machine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachine gets an existing Machine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineState, opts ...pulumi.ResourceOption) (*Machine, error) {
	var resource Machine
	err := ctx.ReadResource("kubernetes:cluster.x-k8s.io/v1beta1:Machine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Machine resources.
type machineState struct {
}

type MachineState struct {
}

func (MachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineState)(nil)).Elem()
}

type machineArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachineSpec defines the desired state of Machine.
	Spec *MachineSpec `pulumi:"spec"`
	// MachineStatus defines the observed state of Machine.
	Status *MachineStatus `pulumi:"status"`
}

// The set of arguments for constructing a Machine resource.
type MachineArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// MachineSpec defines the desired state of Machine.
	Spec MachineSpecPtrInput
	// MachineStatus defines the observed state of Machine.
	Status MachineStatusPtrInput
}

func (MachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineArgs)(nil)).Elem()
}

type MachineInput interface {
	pulumi.Input

	ToMachineOutput() MachineOutput
	ToMachineOutputWithContext(ctx context.Context) MachineOutput
}

func (*Machine) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (i *Machine) ToMachineOutput() MachineOutput {
	return i.ToMachineOutputWithContext(context.Background())
}

func (i *Machine) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineOutput)
}

type MachineOutput struct{ *pulumi.OutputState }

func (MachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (o MachineOutput) ToMachineOutput() MachineOutput {
	return o
}

func (o MachineOutput) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return o
}

func (o MachineOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *Machine) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// MachineSpec defines the desired state of Machine.
func (o MachineOutput) Spec() MachineSpecPtrOutput {
	return o.ApplyT(func(v *Machine) MachineSpecPtrOutput { return v.Spec }).(MachineSpecPtrOutput)
}

// MachineStatus defines the observed state of Machine.
func (o MachineOutput) Status() MachineStatusPtrOutput {
	return o.ApplyT(func(v *Machine) MachineStatusPtrOutput { return v.Status }).(MachineStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineInput)(nil)).Elem(), &Machine{})
	pulumi.RegisterOutputType(MachineOutput{})
}
