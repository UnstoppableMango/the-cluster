// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Cluster is the Schema for the clusters API.
type ClusterType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ClusterSpec defines the desired state of Cluster.
	Spec *ClusterSpec `pulumi:"spec"`
	// ClusterStatus defines the observed state of Cluster.
	Status *ClusterStatus `pulumi:"status"`
}

type ClusterMetadata struct {
}

// ClusterSpec defines the desired state of Cluster.
type ClusterSpec struct {
	// Cluster network configuration.
	ClusterNetwork *ClusterSpecClusterNetwork `pulumi:"clusterNetwork"`
	// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
	ControlPlaneEndpoint *ClusterSpecControlPlaneEndpoint `pulumi:"controlPlaneEndpoint"`
	// ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
	ControlPlaneRef *ClusterSpecControlPlaneRef `pulumi:"controlPlaneRef"`
	// InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
	InfrastructureRef *ClusterSpecInfrastructureRef `pulumi:"infrastructureRef"`
	// Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
	Paused *bool `pulumi:"paused"`
}

// ClusterSpecInput is an input type that accepts ClusterSpecArgs and ClusterSpecOutput values.
// You can construct a concrete instance of `ClusterSpecInput` via:
//
//	ClusterSpecArgs{...}
type ClusterSpecInput interface {
	pulumi.Input

	ToClusterSpecOutput() ClusterSpecOutput
	ToClusterSpecOutputWithContext(context.Context) ClusterSpecOutput
}

// ClusterSpec defines the desired state of Cluster.
type ClusterSpecArgs struct {
	// Cluster network configuration.
	ClusterNetwork ClusterSpecClusterNetworkPtrInput `pulumi:"clusterNetwork"`
	// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
	ControlPlaneEndpoint ClusterSpecControlPlaneEndpointPtrInput `pulumi:"controlPlaneEndpoint"`
	// ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
	ControlPlaneRef ClusterSpecControlPlaneRefPtrInput `pulumi:"controlPlaneRef"`
	// InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
	InfrastructureRef ClusterSpecInfrastructureRefPtrInput `pulumi:"infrastructureRef"`
	// Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
}

func (ClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpec)(nil)).Elem()
}

func (i ClusterSpecArgs) ToClusterSpecOutput() ClusterSpecOutput {
	return i.ToClusterSpecOutputWithContext(context.Background())
}

func (i ClusterSpecArgs) ToClusterSpecOutputWithContext(ctx context.Context) ClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecOutput)
}

func (i ClusterSpecArgs) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return i.ToClusterSpecPtrOutputWithContext(context.Background())
}

func (i ClusterSpecArgs) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecOutput).ToClusterSpecPtrOutputWithContext(ctx)
}

// ClusterSpecPtrInput is an input type that accepts ClusterSpecArgs, ClusterSpecPtr and ClusterSpecPtrOutput values.
// You can construct a concrete instance of `ClusterSpecPtrInput` via:
//
//	        ClusterSpecArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecPtrInput interface {
	pulumi.Input

	ToClusterSpecPtrOutput() ClusterSpecPtrOutput
	ToClusterSpecPtrOutputWithContext(context.Context) ClusterSpecPtrOutput
}

type clusterSpecPtrType ClusterSpecArgs

func ClusterSpecPtr(v *ClusterSpecArgs) ClusterSpecPtrInput {
	return (*clusterSpecPtrType)(v)
}

func (*clusterSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpec)(nil)).Elem()
}

func (i *clusterSpecPtrType) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return i.ToClusterSpecPtrOutputWithContext(context.Background())
}

func (i *clusterSpecPtrType) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecPtrOutput)
}

// ClusterSpec defines the desired state of Cluster.
type ClusterSpecOutput struct{ *pulumi.OutputState }

func (ClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpec)(nil)).Elem()
}

func (o ClusterSpecOutput) ToClusterSpecOutput() ClusterSpecOutput {
	return o
}

func (o ClusterSpecOutput) ToClusterSpecOutputWithContext(ctx context.Context) ClusterSpecOutput {
	return o
}

func (o ClusterSpecOutput) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return o.ToClusterSpecPtrOutputWithContext(context.Background())
}

func (o ClusterSpecOutput) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpec) *ClusterSpec {
		return &v
	}).(ClusterSpecPtrOutput)
}

// Cluster network configuration.
func (o ClusterSpecOutput) ClusterNetwork() ClusterSpecClusterNetworkPtrOutput {
	return o.ApplyT(func(v ClusterSpec) *ClusterSpecClusterNetwork { return v.ClusterNetwork }).(ClusterSpecClusterNetworkPtrOutput)
}

// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
func (o ClusterSpecOutput) ControlPlaneEndpoint() ClusterSpecControlPlaneEndpointPtrOutput {
	return o.ApplyT(func(v ClusterSpec) *ClusterSpecControlPlaneEndpoint { return v.ControlPlaneEndpoint }).(ClusterSpecControlPlaneEndpointPtrOutput)
}

// ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
func (o ClusterSpecOutput) ControlPlaneRef() ClusterSpecControlPlaneRefPtrOutput {
	return o.ApplyT(func(v ClusterSpec) *ClusterSpecControlPlaneRef { return v.ControlPlaneRef }).(ClusterSpecControlPlaneRefPtrOutput)
}

// InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
func (o ClusterSpecOutput) InfrastructureRef() ClusterSpecInfrastructureRefPtrOutput {
	return o.ApplyT(func(v ClusterSpec) *ClusterSpecInfrastructureRef { return v.InfrastructureRef }).(ClusterSpecInfrastructureRefPtrOutput)
}

// Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
func (o ClusterSpecOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSpec) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

type ClusterSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpec)(nil)).Elem()
}

func (o ClusterSpecPtrOutput) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return o
}

func (o ClusterSpecPtrOutput) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return o
}

func (o ClusterSpecPtrOutput) Elem() ClusterSpecOutput {
	return o.ApplyT(func(v *ClusterSpec) ClusterSpec {
		if v != nil {
			return *v
		}
		var ret ClusterSpec
		return ret
	}).(ClusterSpecOutput)
}

// Cluster network configuration.
func (o ClusterSpecPtrOutput) ClusterNetwork() ClusterSpecClusterNetworkPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *ClusterSpecClusterNetwork {
		if v == nil {
			return nil
		}
		return v.ClusterNetwork
	}).(ClusterSpecClusterNetworkPtrOutput)
}

// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
func (o ClusterSpecPtrOutput) ControlPlaneEndpoint() ClusterSpecControlPlaneEndpointPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *ClusterSpecControlPlaneEndpoint {
		if v == nil {
			return nil
		}
		return v.ControlPlaneEndpoint
	}).(ClusterSpecControlPlaneEndpointPtrOutput)
}

// ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
func (o ClusterSpecPtrOutput) ControlPlaneRef() ClusterSpecControlPlaneRefPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *ClusterSpecControlPlaneRef {
		if v == nil {
			return nil
		}
		return v.ControlPlaneRef
	}).(ClusterSpecControlPlaneRefPtrOutput)
}

// InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
func (o ClusterSpecPtrOutput) InfrastructureRef() ClusterSpecInfrastructureRefPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *ClusterSpecInfrastructureRef {
		if v == nil {
			return nil
		}
		return v.InfrastructureRef
	}).(ClusterSpecInfrastructureRefPtrOutput)
}

// Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
func (o ClusterSpecPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

// Cluster network configuration.
type ClusterSpecClusterNetwork struct {
	// APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
	ApiServerPort *int `pulumi:"apiServerPort"`
	// The network ranges from which Pod networks are allocated.
	Pods *ClusterSpecClusterNetworkPods `pulumi:"pods"`
	// Domain name for services.
	ServiceDomain *string `pulumi:"serviceDomain"`
	// The network ranges from which service VIPs are allocated.
	Services *ClusterSpecClusterNetworkServices `pulumi:"services"`
}

// ClusterSpecClusterNetworkInput is an input type that accepts ClusterSpecClusterNetworkArgs and ClusterSpecClusterNetworkOutput values.
// You can construct a concrete instance of `ClusterSpecClusterNetworkInput` via:
//
//	ClusterSpecClusterNetworkArgs{...}
type ClusterSpecClusterNetworkInput interface {
	pulumi.Input

	ToClusterSpecClusterNetworkOutput() ClusterSpecClusterNetworkOutput
	ToClusterSpecClusterNetworkOutputWithContext(context.Context) ClusterSpecClusterNetworkOutput
}

// Cluster network configuration.
type ClusterSpecClusterNetworkArgs struct {
	// APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
	ApiServerPort pulumi.IntPtrInput `pulumi:"apiServerPort"`
	// The network ranges from which Pod networks are allocated.
	Pods ClusterSpecClusterNetworkPodsPtrInput `pulumi:"pods"`
	// Domain name for services.
	ServiceDomain pulumi.StringPtrInput `pulumi:"serviceDomain"`
	// The network ranges from which service VIPs are allocated.
	Services ClusterSpecClusterNetworkServicesPtrInput `pulumi:"services"`
}

func (ClusterSpecClusterNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecClusterNetwork)(nil)).Elem()
}

func (i ClusterSpecClusterNetworkArgs) ToClusterSpecClusterNetworkOutput() ClusterSpecClusterNetworkOutput {
	return i.ToClusterSpecClusterNetworkOutputWithContext(context.Background())
}

func (i ClusterSpecClusterNetworkArgs) ToClusterSpecClusterNetworkOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkOutput)
}

func (i ClusterSpecClusterNetworkArgs) ToClusterSpecClusterNetworkPtrOutput() ClusterSpecClusterNetworkPtrOutput {
	return i.ToClusterSpecClusterNetworkPtrOutputWithContext(context.Background())
}

func (i ClusterSpecClusterNetworkArgs) ToClusterSpecClusterNetworkPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkOutput).ToClusterSpecClusterNetworkPtrOutputWithContext(ctx)
}

// ClusterSpecClusterNetworkPtrInput is an input type that accepts ClusterSpecClusterNetworkArgs, ClusterSpecClusterNetworkPtr and ClusterSpecClusterNetworkPtrOutput values.
// You can construct a concrete instance of `ClusterSpecClusterNetworkPtrInput` via:
//
//	        ClusterSpecClusterNetworkArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecClusterNetworkPtrInput interface {
	pulumi.Input

	ToClusterSpecClusterNetworkPtrOutput() ClusterSpecClusterNetworkPtrOutput
	ToClusterSpecClusterNetworkPtrOutputWithContext(context.Context) ClusterSpecClusterNetworkPtrOutput
}

type clusterSpecClusterNetworkPtrType ClusterSpecClusterNetworkArgs

func ClusterSpecClusterNetworkPtr(v *ClusterSpecClusterNetworkArgs) ClusterSpecClusterNetworkPtrInput {
	return (*clusterSpecClusterNetworkPtrType)(v)
}

func (*clusterSpecClusterNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecClusterNetwork)(nil)).Elem()
}

func (i *clusterSpecClusterNetworkPtrType) ToClusterSpecClusterNetworkPtrOutput() ClusterSpecClusterNetworkPtrOutput {
	return i.ToClusterSpecClusterNetworkPtrOutputWithContext(context.Background())
}

func (i *clusterSpecClusterNetworkPtrType) ToClusterSpecClusterNetworkPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkPtrOutput)
}

// Cluster network configuration.
type ClusterSpecClusterNetworkOutput struct{ *pulumi.OutputState }

func (ClusterSpecClusterNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecClusterNetwork)(nil)).Elem()
}

func (o ClusterSpecClusterNetworkOutput) ToClusterSpecClusterNetworkOutput() ClusterSpecClusterNetworkOutput {
	return o
}

func (o ClusterSpecClusterNetworkOutput) ToClusterSpecClusterNetworkOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkOutput {
	return o
}

func (o ClusterSpecClusterNetworkOutput) ToClusterSpecClusterNetworkPtrOutput() ClusterSpecClusterNetworkPtrOutput {
	return o.ToClusterSpecClusterNetworkPtrOutputWithContext(context.Background())
}

func (o ClusterSpecClusterNetworkOutput) ToClusterSpecClusterNetworkPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecClusterNetwork) *ClusterSpecClusterNetwork {
		return &v
	}).(ClusterSpecClusterNetworkPtrOutput)
}

// APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
func (o ClusterSpecClusterNetworkOutput) ApiServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterSpecClusterNetwork) *int { return v.ApiServerPort }).(pulumi.IntPtrOutput)
}

// The network ranges from which Pod networks are allocated.
func (o ClusterSpecClusterNetworkOutput) Pods() ClusterSpecClusterNetworkPodsPtrOutput {
	return o.ApplyT(func(v ClusterSpecClusterNetwork) *ClusterSpecClusterNetworkPods { return v.Pods }).(ClusterSpecClusterNetworkPodsPtrOutput)
}

// Domain name for services.
func (o ClusterSpecClusterNetworkOutput) ServiceDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecClusterNetwork) *string { return v.ServiceDomain }).(pulumi.StringPtrOutput)
}

// The network ranges from which service VIPs are allocated.
func (o ClusterSpecClusterNetworkOutput) Services() ClusterSpecClusterNetworkServicesPtrOutput {
	return o.ApplyT(func(v ClusterSpecClusterNetwork) *ClusterSpecClusterNetworkServices { return v.Services }).(ClusterSpecClusterNetworkServicesPtrOutput)
}

type ClusterSpecClusterNetworkPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecClusterNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecClusterNetwork)(nil)).Elem()
}

func (o ClusterSpecClusterNetworkPtrOutput) ToClusterSpecClusterNetworkPtrOutput() ClusterSpecClusterNetworkPtrOutput {
	return o
}

func (o ClusterSpecClusterNetworkPtrOutput) ToClusterSpecClusterNetworkPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPtrOutput {
	return o
}

func (o ClusterSpecClusterNetworkPtrOutput) Elem() ClusterSpecClusterNetworkOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetwork) ClusterSpecClusterNetwork {
		if v != nil {
			return *v
		}
		var ret ClusterSpecClusterNetwork
		return ret
	}).(ClusterSpecClusterNetworkOutput)
}

// APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
func (o ClusterSpecClusterNetworkPtrOutput) ApiServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetwork) *int {
		if v == nil {
			return nil
		}
		return v.ApiServerPort
	}).(pulumi.IntPtrOutput)
}

// The network ranges from which Pod networks are allocated.
func (o ClusterSpecClusterNetworkPtrOutput) Pods() ClusterSpecClusterNetworkPodsPtrOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetwork) *ClusterSpecClusterNetworkPods {
		if v == nil {
			return nil
		}
		return v.Pods
	}).(ClusterSpecClusterNetworkPodsPtrOutput)
}

// Domain name for services.
func (o ClusterSpecClusterNetworkPtrOutput) ServiceDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetwork) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDomain
	}).(pulumi.StringPtrOutput)
}

// The network ranges from which service VIPs are allocated.
func (o ClusterSpecClusterNetworkPtrOutput) Services() ClusterSpecClusterNetworkServicesPtrOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetwork) *ClusterSpecClusterNetworkServices {
		if v == nil {
			return nil
		}
		return v.Services
	}).(ClusterSpecClusterNetworkServicesPtrOutput)
}

// The network ranges from which Pod networks are allocated.
type ClusterSpecClusterNetworkPods struct {
	CidrBlocks []string `pulumi:"cidrBlocks"`
}

// ClusterSpecClusterNetworkPodsInput is an input type that accepts ClusterSpecClusterNetworkPodsArgs and ClusterSpecClusterNetworkPodsOutput values.
// You can construct a concrete instance of `ClusterSpecClusterNetworkPodsInput` via:
//
//	ClusterSpecClusterNetworkPodsArgs{...}
type ClusterSpecClusterNetworkPodsInput interface {
	pulumi.Input

	ToClusterSpecClusterNetworkPodsOutput() ClusterSpecClusterNetworkPodsOutput
	ToClusterSpecClusterNetworkPodsOutputWithContext(context.Context) ClusterSpecClusterNetworkPodsOutput
}

// The network ranges from which Pod networks are allocated.
type ClusterSpecClusterNetworkPodsArgs struct {
	CidrBlocks pulumi.StringArrayInput `pulumi:"cidrBlocks"`
}

func (ClusterSpecClusterNetworkPodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecClusterNetworkPods)(nil)).Elem()
}

func (i ClusterSpecClusterNetworkPodsArgs) ToClusterSpecClusterNetworkPodsOutput() ClusterSpecClusterNetworkPodsOutput {
	return i.ToClusterSpecClusterNetworkPodsOutputWithContext(context.Background())
}

func (i ClusterSpecClusterNetworkPodsArgs) ToClusterSpecClusterNetworkPodsOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkPodsOutput)
}

func (i ClusterSpecClusterNetworkPodsArgs) ToClusterSpecClusterNetworkPodsPtrOutput() ClusterSpecClusterNetworkPodsPtrOutput {
	return i.ToClusterSpecClusterNetworkPodsPtrOutputWithContext(context.Background())
}

func (i ClusterSpecClusterNetworkPodsArgs) ToClusterSpecClusterNetworkPodsPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkPodsOutput).ToClusterSpecClusterNetworkPodsPtrOutputWithContext(ctx)
}

// ClusterSpecClusterNetworkPodsPtrInput is an input type that accepts ClusterSpecClusterNetworkPodsArgs, ClusterSpecClusterNetworkPodsPtr and ClusterSpecClusterNetworkPodsPtrOutput values.
// You can construct a concrete instance of `ClusterSpecClusterNetworkPodsPtrInput` via:
//
//	        ClusterSpecClusterNetworkPodsArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecClusterNetworkPodsPtrInput interface {
	pulumi.Input

	ToClusterSpecClusterNetworkPodsPtrOutput() ClusterSpecClusterNetworkPodsPtrOutput
	ToClusterSpecClusterNetworkPodsPtrOutputWithContext(context.Context) ClusterSpecClusterNetworkPodsPtrOutput
}

type clusterSpecClusterNetworkPodsPtrType ClusterSpecClusterNetworkPodsArgs

func ClusterSpecClusterNetworkPodsPtr(v *ClusterSpecClusterNetworkPodsArgs) ClusterSpecClusterNetworkPodsPtrInput {
	return (*clusterSpecClusterNetworkPodsPtrType)(v)
}

func (*clusterSpecClusterNetworkPodsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecClusterNetworkPods)(nil)).Elem()
}

func (i *clusterSpecClusterNetworkPodsPtrType) ToClusterSpecClusterNetworkPodsPtrOutput() ClusterSpecClusterNetworkPodsPtrOutput {
	return i.ToClusterSpecClusterNetworkPodsPtrOutputWithContext(context.Background())
}

func (i *clusterSpecClusterNetworkPodsPtrType) ToClusterSpecClusterNetworkPodsPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkPodsPtrOutput)
}

// The network ranges from which Pod networks are allocated.
type ClusterSpecClusterNetworkPodsOutput struct{ *pulumi.OutputState }

func (ClusterSpecClusterNetworkPodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecClusterNetworkPods)(nil)).Elem()
}

func (o ClusterSpecClusterNetworkPodsOutput) ToClusterSpecClusterNetworkPodsOutput() ClusterSpecClusterNetworkPodsOutput {
	return o
}

func (o ClusterSpecClusterNetworkPodsOutput) ToClusterSpecClusterNetworkPodsOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPodsOutput {
	return o
}

func (o ClusterSpecClusterNetworkPodsOutput) ToClusterSpecClusterNetworkPodsPtrOutput() ClusterSpecClusterNetworkPodsPtrOutput {
	return o.ToClusterSpecClusterNetworkPodsPtrOutputWithContext(context.Background())
}

func (o ClusterSpecClusterNetworkPodsOutput) ToClusterSpecClusterNetworkPodsPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecClusterNetworkPods) *ClusterSpecClusterNetworkPods {
		return &v
	}).(ClusterSpecClusterNetworkPodsPtrOutput)
}

func (o ClusterSpecClusterNetworkPodsOutput) CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterSpecClusterNetworkPods) []string { return v.CidrBlocks }).(pulumi.StringArrayOutput)
}

type ClusterSpecClusterNetworkPodsPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecClusterNetworkPodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecClusterNetworkPods)(nil)).Elem()
}

func (o ClusterSpecClusterNetworkPodsPtrOutput) ToClusterSpecClusterNetworkPodsPtrOutput() ClusterSpecClusterNetworkPodsPtrOutput {
	return o
}

func (o ClusterSpecClusterNetworkPodsPtrOutput) ToClusterSpecClusterNetworkPodsPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkPodsPtrOutput {
	return o
}

func (o ClusterSpecClusterNetworkPodsPtrOutput) Elem() ClusterSpecClusterNetworkPodsOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetworkPods) ClusterSpecClusterNetworkPods {
		if v != nil {
			return *v
		}
		var ret ClusterSpecClusterNetworkPods
		return ret
	}).(ClusterSpecClusterNetworkPodsOutput)
}

func (o ClusterSpecClusterNetworkPodsPtrOutput) CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetworkPods) []string {
		if v == nil {
			return nil
		}
		return v.CidrBlocks
	}).(pulumi.StringArrayOutput)
}

// The network ranges from which service VIPs are allocated.
type ClusterSpecClusterNetworkServices struct {
	CidrBlocks []string `pulumi:"cidrBlocks"`
}

// ClusterSpecClusterNetworkServicesInput is an input type that accepts ClusterSpecClusterNetworkServicesArgs and ClusterSpecClusterNetworkServicesOutput values.
// You can construct a concrete instance of `ClusterSpecClusterNetworkServicesInput` via:
//
//	ClusterSpecClusterNetworkServicesArgs{...}
type ClusterSpecClusterNetworkServicesInput interface {
	pulumi.Input

	ToClusterSpecClusterNetworkServicesOutput() ClusterSpecClusterNetworkServicesOutput
	ToClusterSpecClusterNetworkServicesOutputWithContext(context.Context) ClusterSpecClusterNetworkServicesOutput
}

// The network ranges from which service VIPs are allocated.
type ClusterSpecClusterNetworkServicesArgs struct {
	CidrBlocks pulumi.StringArrayInput `pulumi:"cidrBlocks"`
}

func (ClusterSpecClusterNetworkServicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecClusterNetworkServices)(nil)).Elem()
}

func (i ClusterSpecClusterNetworkServicesArgs) ToClusterSpecClusterNetworkServicesOutput() ClusterSpecClusterNetworkServicesOutput {
	return i.ToClusterSpecClusterNetworkServicesOutputWithContext(context.Background())
}

func (i ClusterSpecClusterNetworkServicesArgs) ToClusterSpecClusterNetworkServicesOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkServicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkServicesOutput)
}

func (i ClusterSpecClusterNetworkServicesArgs) ToClusterSpecClusterNetworkServicesPtrOutput() ClusterSpecClusterNetworkServicesPtrOutput {
	return i.ToClusterSpecClusterNetworkServicesPtrOutputWithContext(context.Background())
}

func (i ClusterSpecClusterNetworkServicesArgs) ToClusterSpecClusterNetworkServicesPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkServicesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkServicesOutput).ToClusterSpecClusterNetworkServicesPtrOutputWithContext(ctx)
}

// ClusterSpecClusterNetworkServicesPtrInput is an input type that accepts ClusterSpecClusterNetworkServicesArgs, ClusterSpecClusterNetworkServicesPtr and ClusterSpecClusterNetworkServicesPtrOutput values.
// You can construct a concrete instance of `ClusterSpecClusterNetworkServicesPtrInput` via:
//
//	        ClusterSpecClusterNetworkServicesArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecClusterNetworkServicesPtrInput interface {
	pulumi.Input

	ToClusterSpecClusterNetworkServicesPtrOutput() ClusterSpecClusterNetworkServicesPtrOutput
	ToClusterSpecClusterNetworkServicesPtrOutputWithContext(context.Context) ClusterSpecClusterNetworkServicesPtrOutput
}

type clusterSpecClusterNetworkServicesPtrType ClusterSpecClusterNetworkServicesArgs

func ClusterSpecClusterNetworkServicesPtr(v *ClusterSpecClusterNetworkServicesArgs) ClusterSpecClusterNetworkServicesPtrInput {
	return (*clusterSpecClusterNetworkServicesPtrType)(v)
}

func (*clusterSpecClusterNetworkServicesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecClusterNetworkServices)(nil)).Elem()
}

func (i *clusterSpecClusterNetworkServicesPtrType) ToClusterSpecClusterNetworkServicesPtrOutput() ClusterSpecClusterNetworkServicesPtrOutput {
	return i.ToClusterSpecClusterNetworkServicesPtrOutputWithContext(context.Background())
}

func (i *clusterSpecClusterNetworkServicesPtrType) ToClusterSpecClusterNetworkServicesPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkServicesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecClusterNetworkServicesPtrOutput)
}

// The network ranges from which service VIPs are allocated.
type ClusterSpecClusterNetworkServicesOutput struct{ *pulumi.OutputState }

func (ClusterSpecClusterNetworkServicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecClusterNetworkServices)(nil)).Elem()
}

func (o ClusterSpecClusterNetworkServicesOutput) ToClusterSpecClusterNetworkServicesOutput() ClusterSpecClusterNetworkServicesOutput {
	return o
}

func (o ClusterSpecClusterNetworkServicesOutput) ToClusterSpecClusterNetworkServicesOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkServicesOutput {
	return o
}

func (o ClusterSpecClusterNetworkServicesOutput) ToClusterSpecClusterNetworkServicesPtrOutput() ClusterSpecClusterNetworkServicesPtrOutput {
	return o.ToClusterSpecClusterNetworkServicesPtrOutputWithContext(context.Background())
}

func (o ClusterSpecClusterNetworkServicesOutput) ToClusterSpecClusterNetworkServicesPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkServicesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecClusterNetworkServices) *ClusterSpecClusterNetworkServices {
		return &v
	}).(ClusterSpecClusterNetworkServicesPtrOutput)
}

func (o ClusterSpecClusterNetworkServicesOutput) CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterSpecClusterNetworkServices) []string { return v.CidrBlocks }).(pulumi.StringArrayOutput)
}

type ClusterSpecClusterNetworkServicesPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecClusterNetworkServicesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecClusterNetworkServices)(nil)).Elem()
}

func (o ClusterSpecClusterNetworkServicesPtrOutput) ToClusterSpecClusterNetworkServicesPtrOutput() ClusterSpecClusterNetworkServicesPtrOutput {
	return o
}

func (o ClusterSpecClusterNetworkServicesPtrOutput) ToClusterSpecClusterNetworkServicesPtrOutputWithContext(ctx context.Context) ClusterSpecClusterNetworkServicesPtrOutput {
	return o
}

func (o ClusterSpecClusterNetworkServicesPtrOutput) Elem() ClusterSpecClusterNetworkServicesOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetworkServices) ClusterSpecClusterNetworkServices {
		if v != nil {
			return *v
		}
		var ret ClusterSpecClusterNetworkServices
		return ret
	}).(ClusterSpecClusterNetworkServicesOutput)
}

func (o ClusterSpecClusterNetworkServicesPtrOutput) CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterSpecClusterNetworkServices) []string {
		if v == nil {
			return nil
		}
		return v.CidrBlocks
	}).(pulumi.StringArrayOutput)
}

// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
type ClusterSpecControlPlaneEndpoint struct {
	// The hostname on which the API server is serving.
	Host string `pulumi:"host"`
	// The port on which the API server is serving.
	Port int `pulumi:"port"`
}

// ClusterSpecControlPlaneEndpointInput is an input type that accepts ClusterSpecControlPlaneEndpointArgs and ClusterSpecControlPlaneEndpointOutput values.
// You can construct a concrete instance of `ClusterSpecControlPlaneEndpointInput` via:
//
//	ClusterSpecControlPlaneEndpointArgs{...}
type ClusterSpecControlPlaneEndpointInput interface {
	pulumi.Input

	ToClusterSpecControlPlaneEndpointOutput() ClusterSpecControlPlaneEndpointOutput
	ToClusterSpecControlPlaneEndpointOutputWithContext(context.Context) ClusterSpecControlPlaneEndpointOutput
}

// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
type ClusterSpecControlPlaneEndpointArgs struct {
	// The hostname on which the API server is serving.
	Host pulumi.StringInput `pulumi:"host"`
	// The port on which the API server is serving.
	Port pulumi.IntInput `pulumi:"port"`
}

func (ClusterSpecControlPlaneEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecControlPlaneEndpoint)(nil)).Elem()
}

func (i ClusterSpecControlPlaneEndpointArgs) ToClusterSpecControlPlaneEndpointOutput() ClusterSpecControlPlaneEndpointOutput {
	return i.ToClusterSpecControlPlaneEndpointOutputWithContext(context.Background())
}

func (i ClusterSpecControlPlaneEndpointArgs) ToClusterSpecControlPlaneEndpointOutputWithContext(ctx context.Context) ClusterSpecControlPlaneEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecControlPlaneEndpointOutput)
}

func (i ClusterSpecControlPlaneEndpointArgs) ToClusterSpecControlPlaneEndpointPtrOutput() ClusterSpecControlPlaneEndpointPtrOutput {
	return i.ToClusterSpecControlPlaneEndpointPtrOutputWithContext(context.Background())
}

func (i ClusterSpecControlPlaneEndpointArgs) ToClusterSpecControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecControlPlaneEndpointOutput).ToClusterSpecControlPlaneEndpointPtrOutputWithContext(ctx)
}

// ClusterSpecControlPlaneEndpointPtrInput is an input type that accepts ClusterSpecControlPlaneEndpointArgs, ClusterSpecControlPlaneEndpointPtr and ClusterSpecControlPlaneEndpointPtrOutput values.
// You can construct a concrete instance of `ClusterSpecControlPlaneEndpointPtrInput` via:
//
//	        ClusterSpecControlPlaneEndpointArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecControlPlaneEndpointPtrInput interface {
	pulumi.Input

	ToClusterSpecControlPlaneEndpointPtrOutput() ClusterSpecControlPlaneEndpointPtrOutput
	ToClusterSpecControlPlaneEndpointPtrOutputWithContext(context.Context) ClusterSpecControlPlaneEndpointPtrOutput
}

type clusterSpecControlPlaneEndpointPtrType ClusterSpecControlPlaneEndpointArgs

func ClusterSpecControlPlaneEndpointPtr(v *ClusterSpecControlPlaneEndpointArgs) ClusterSpecControlPlaneEndpointPtrInput {
	return (*clusterSpecControlPlaneEndpointPtrType)(v)
}

func (*clusterSpecControlPlaneEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecControlPlaneEndpoint)(nil)).Elem()
}

func (i *clusterSpecControlPlaneEndpointPtrType) ToClusterSpecControlPlaneEndpointPtrOutput() ClusterSpecControlPlaneEndpointPtrOutput {
	return i.ToClusterSpecControlPlaneEndpointPtrOutputWithContext(context.Background())
}

func (i *clusterSpecControlPlaneEndpointPtrType) ToClusterSpecControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecControlPlaneEndpointPtrOutput)
}

// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
type ClusterSpecControlPlaneEndpointOutput struct{ *pulumi.OutputState }

func (ClusterSpecControlPlaneEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecControlPlaneEndpoint)(nil)).Elem()
}

func (o ClusterSpecControlPlaneEndpointOutput) ToClusterSpecControlPlaneEndpointOutput() ClusterSpecControlPlaneEndpointOutput {
	return o
}

func (o ClusterSpecControlPlaneEndpointOutput) ToClusterSpecControlPlaneEndpointOutputWithContext(ctx context.Context) ClusterSpecControlPlaneEndpointOutput {
	return o
}

func (o ClusterSpecControlPlaneEndpointOutput) ToClusterSpecControlPlaneEndpointPtrOutput() ClusterSpecControlPlaneEndpointPtrOutput {
	return o.ToClusterSpecControlPlaneEndpointPtrOutputWithContext(context.Background())
}

func (o ClusterSpecControlPlaneEndpointOutput) ToClusterSpecControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecControlPlaneEndpoint) *ClusterSpecControlPlaneEndpoint {
		return &v
	}).(ClusterSpecControlPlaneEndpointPtrOutput)
}

// The hostname on which the API server is serving.
func (o ClusterSpecControlPlaneEndpointOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneEndpoint) string { return v.Host }).(pulumi.StringOutput)
}

// The port on which the API server is serving.
func (o ClusterSpecControlPlaneEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneEndpoint) int { return v.Port }).(pulumi.IntOutput)
}

type ClusterSpecControlPlaneEndpointPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecControlPlaneEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecControlPlaneEndpoint)(nil)).Elem()
}

func (o ClusterSpecControlPlaneEndpointPtrOutput) ToClusterSpecControlPlaneEndpointPtrOutput() ClusterSpecControlPlaneEndpointPtrOutput {
	return o
}

func (o ClusterSpecControlPlaneEndpointPtrOutput) ToClusterSpecControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneEndpointPtrOutput {
	return o
}

func (o ClusterSpecControlPlaneEndpointPtrOutput) Elem() ClusterSpecControlPlaneEndpointOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneEndpoint) ClusterSpecControlPlaneEndpoint {
		if v != nil {
			return *v
		}
		var ret ClusterSpecControlPlaneEndpoint
		return ret
	}).(ClusterSpecControlPlaneEndpointOutput)
}

// The hostname on which the API server is serving.
func (o ClusterSpecControlPlaneEndpointPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port on which the API server is serving.
func (o ClusterSpecControlPlaneEndpointPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneEndpoint) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
type ClusterSpecControlPlaneRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ClusterSpecControlPlaneRefInput is an input type that accepts ClusterSpecControlPlaneRefArgs and ClusterSpecControlPlaneRefOutput values.
// You can construct a concrete instance of `ClusterSpecControlPlaneRefInput` via:
//
//	ClusterSpecControlPlaneRefArgs{...}
type ClusterSpecControlPlaneRefInput interface {
	pulumi.Input

	ToClusterSpecControlPlaneRefOutput() ClusterSpecControlPlaneRefOutput
	ToClusterSpecControlPlaneRefOutputWithContext(context.Context) ClusterSpecControlPlaneRefOutput
}

// ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
type ClusterSpecControlPlaneRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ClusterSpecControlPlaneRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecControlPlaneRef)(nil)).Elem()
}

func (i ClusterSpecControlPlaneRefArgs) ToClusterSpecControlPlaneRefOutput() ClusterSpecControlPlaneRefOutput {
	return i.ToClusterSpecControlPlaneRefOutputWithContext(context.Background())
}

func (i ClusterSpecControlPlaneRefArgs) ToClusterSpecControlPlaneRefOutputWithContext(ctx context.Context) ClusterSpecControlPlaneRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecControlPlaneRefOutput)
}

func (i ClusterSpecControlPlaneRefArgs) ToClusterSpecControlPlaneRefPtrOutput() ClusterSpecControlPlaneRefPtrOutput {
	return i.ToClusterSpecControlPlaneRefPtrOutputWithContext(context.Background())
}

func (i ClusterSpecControlPlaneRefArgs) ToClusterSpecControlPlaneRefPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecControlPlaneRefOutput).ToClusterSpecControlPlaneRefPtrOutputWithContext(ctx)
}

// ClusterSpecControlPlaneRefPtrInput is an input type that accepts ClusterSpecControlPlaneRefArgs, ClusterSpecControlPlaneRefPtr and ClusterSpecControlPlaneRefPtrOutput values.
// You can construct a concrete instance of `ClusterSpecControlPlaneRefPtrInput` via:
//
//	        ClusterSpecControlPlaneRefArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecControlPlaneRefPtrInput interface {
	pulumi.Input

	ToClusterSpecControlPlaneRefPtrOutput() ClusterSpecControlPlaneRefPtrOutput
	ToClusterSpecControlPlaneRefPtrOutputWithContext(context.Context) ClusterSpecControlPlaneRefPtrOutput
}

type clusterSpecControlPlaneRefPtrType ClusterSpecControlPlaneRefArgs

func ClusterSpecControlPlaneRefPtr(v *ClusterSpecControlPlaneRefArgs) ClusterSpecControlPlaneRefPtrInput {
	return (*clusterSpecControlPlaneRefPtrType)(v)
}

func (*clusterSpecControlPlaneRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecControlPlaneRef)(nil)).Elem()
}

func (i *clusterSpecControlPlaneRefPtrType) ToClusterSpecControlPlaneRefPtrOutput() ClusterSpecControlPlaneRefPtrOutput {
	return i.ToClusterSpecControlPlaneRefPtrOutputWithContext(context.Background())
}

func (i *clusterSpecControlPlaneRefPtrType) ToClusterSpecControlPlaneRefPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecControlPlaneRefPtrOutput)
}

// ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
type ClusterSpecControlPlaneRefOutput struct{ *pulumi.OutputState }

func (ClusterSpecControlPlaneRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecControlPlaneRef)(nil)).Elem()
}

func (o ClusterSpecControlPlaneRefOutput) ToClusterSpecControlPlaneRefOutput() ClusterSpecControlPlaneRefOutput {
	return o
}

func (o ClusterSpecControlPlaneRefOutput) ToClusterSpecControlPlaneRefOutputWithContext(ctx context.Context) ClusterSpecControlPlaneRefOutput {
	return o
}

func (o ClusterSpecControlPlaneRefOutput) ToClusterSpecControlPlaneRefPtrOutput() ClusterSpecControlPlaneRefPtrOutput {
	return o.ToClusterSpecControlPlaneRefPtrOutputWithContext(context.Background())
}

func (o ClusterSpecControlPlaneRefOutput) ToClusterSpecControlPlaneRefPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecControlPlaneRef) *ClusterSpecControlPlaneRef {
		return &v
	}).(ClusterSpecControlPlaneRefPtrOutput)
}

// API version of the referent.
func (o ClusterSpecControlPlaneRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ClusterSpecControlPlaneRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterSpecControlPlaneRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClusterSpecControlPlaneRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ClusterSpecControlPlaneRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ClusterSpecControlPlaneRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ClusterSpecControlPlaneRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecControlPlaneRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ClusterSpecControlPlaneRefPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecControlPlaneRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecControlPlaneRef)(nil)).Elem()
}

func (o ClusterSpecControlPlaneRefPtrOutput) ToClusterSpecControlPlaneRefPtrOutput() ClusterSpecControlPlaneRefPtrOutput {
	return o
}

func (o ClusterSpecControlPlaneRefPtrOutput) ToClusterSpecControlPlaneRefPtrOutputWithContext(ctx context.Context) ClusterSpecControlPlaneRefPtrOutput {
	return o
}

func (o ClusterSpecControlPlaneRefPtrOutput) Elem() ClusterSpecControlPlaneRefOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) ClusterSpecControlPlaneRef {
		if v != nil {
			return *v
		}
		var ret ClusterSpecControlPlaneRef
		return ret
	}).(ClusterSpecControlPlaneRefOutput)
}

// API version of the referent.
func (o ClusterSpecControlPlaneRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ClusterSpecControlPlaneRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterSpecControlPlaneRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClusterSpecControlPlaneRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ClusterSpecControlPlaneRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ClusterSpecControlPlaneRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ClusterSpecControlPlaneRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecControlPlaneRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
type ClusterSpecInfrastructureRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ClusterSpecInfrastructureRefInput is an input type that accepts ClusterSpecInfrastructureRefArgs and ClusterSpecInfrastructureRefOutput values.
// You can construct a concrete instance of `ClusterSpecInfrastructureRefInput` via:
//
//	ClusterSpecInfrastructureRefArgs{...}
type ClusterSpecInfrastructureRefInput interface {
	pulumi.Input

	ToClusterSpecInfrastructureRefOutput() ClusterSpecInfrastructureRefOutput
	ToClusterSpecInfrastructureRefOutputWithContext(context.Context) ClusterSpecInfrastructureRefOutput
}

// InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
type ClusterSpecInfrastructureRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ClusterSpecInfrastructureRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecInfrastructureRef)(nil)).Elem()
}

func (i ClusterSpecInfrastructureRefArgs) ToClusterSpecInfrastructureRefOutput() ClusterSpecInfrastructureRefOutput {
	return i.ToClusterSpecInfrastructureRefOutputWithContext(context.Background())
}

func (i ClusterSpecInfrastructureRefArgs) ToClusterSpecInfrastructureRefOutputWithContext(ctx context.Context) ClusterSpecInfrastructureRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecInfrastructureRefOutput)
}

func (i ClusterSpecInfrastructureRefArgs) ToClusterSpecInfrastructureRefPtrOutput() ClusterSpecInfrastructureRefPtrOutput {
	return i.ToClusterSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i ClusterSpecInfrastructureRefArgs) ToClusterSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) ClusterSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecInfrastructureRefOutput).ToClusterSpecInfrastructureRefPtrOutputWithContext(ctx)
}

// ClusterSpecInfrastructureRefPtrInput is an input type that accepts ClusterSpecInfrastructureRefArgs, ClusterSpecInfrastructureRefPtr and ClusterSpecInfrastructureRefPtrOutput values.
// You can construct a concrete instance of `ClusterSpecInfrastructureRefPtrInput` via:
//
//	        ClusterSpecInfrastructureRefArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecInfrastructureRefPtrInput interface {
	pulumi.Input

	ToClusterSpecInfrastructureRefPtrOutput() ClusterSpecInfrastructureRefPtrOutput
	ToClusterSpecInfrastructureRefPtrOutputWithContext(context.Context) ClusterSpecInfrastructureRefPtrOutput
}

type clusterSpecInfrastructureRefPtrType ClusterSpecInfrastructureRefArgs

func ClusterSpecInfrastructureRefPtr(v *ClusterSpecInfrastructureRefArgs) ClusterSpecInfrastructureRefPtrInput {
	return (*clusterSpecInfrastructureRefPtrType)(v)
}

func (*clusterSpecInfrastructureRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecInfrastructureRef)(nil)).Elem()
}

func (i *clusterSpecInfrastructureRefPtrType) ToClusterSpecInfrastructureRefPtrOutput() ClusterSpecInfrastructureRefPtrOutput {
	return i.ToClusterSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i *clusterSpecInfrastructureRefPtrType) ToClusterSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) ClusterSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecInfrastructureRefPtrOutput)
}

// InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
type ClusterSpecInfrastructureRefOutput struct{ *pulumi.OutputState }

func (ClusterSpecInfrastructureRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecInfrastructureRef)(nil)).Elem()
}

func (o ClusterSpecInfrastructureRefOutput) ToClusterSpecInfrastructureRefOutput() ClusterSpecInfrastructureRefOutput {
	return o
}

func (o ClusterSpecInfrastructureRefOutput) ToClusterSpecInfrastructureRefOutputWithContext(ctx context.Context) ClusterSpecInfrastructureRefOutput {
	return o
}

func (o ClusterSpecInfrastructureRefOutput) ToClusterSpecInfrastructureRefPtrOutput() ClusterSpecInfrastructureRefPtrOutput {
	return o.ToClusterSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (o ClusterSpecInfrastructureRefOutput) ToClusterSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) ClusterSpecInfrastructureRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecInfrastructureRef) *ClusterSpecInfrastructureRef {
		return &v
	}).(ClusterSpecInfrastructureRefPtrOutput)
}

// API version of the referent.
func (o ClusterSpecInfrastructureRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecInfrastructureRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ClusterSpecInfrastructureRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecInfrastructureRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterSpecInfrastructureRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecInfrastructureRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClusterSpecInfrastructureRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecInfrastructureRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ClusterSpecInfrastructureRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecInfrastructureRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ClusterSpecInfrastructureRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecInfrastructureRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ClusterSpecInfrastructureRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecInfrastructureRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ClusterSpecInfrastructureRefPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecInfrastructureRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecInfrastructureRef)(nil)).Elem()
}

func (o ClusterSpecInfrastructureRefPtrOutput) ToClusterSpecInfrastructureRefPtrOutput() ClusterSpecInfrastructureRefPtrOutput {
	return o
}

func (o ClusterSpecInfrastructureRefPtrOutput) ToClusterSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) ClusterSpecInfrastructureRefPtrOutput {
	return o
}

func (o ClusterSpecInfrastructureRefPtrOutput) Elem() ClusterSpecInfrastructureRefOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) ClusterSpecInfrastructureRef {
		if v != nil {
			return *v
		}
		var ret ClusterSpecInfrastructureRef
		return ret
	}).(ClusterSpecInfrastructureRefOutput)
}

// API version of the referent.
func (o ClusterSpecInfrastructureRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ClusterSpecInfrastructureRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterSpecInfrastructureRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClusterSpecInfrastructureRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ClusterSpecInfrastructureRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ClusterSpecInfrastructureRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ClusterSpecInfrastructureRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	// Conditions defines current service state of the cluster.
	Conditions []ClusterStatusConditions `pulumi:"conditions"`
	// ControlPlaneInitialized defines if the control plane has been initialized.
	ControlPlaneInitialized *bool `pulumi:"controlPlaneInitialized"`
	// ControlPlaneReady defines if the control plane is ready.
	ControlPlaneReady *bool `pulumi:"controlPlaneReady"`
	// FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
	FailureDomains map[string]ClusterStatusFailureDomains `pulumi:"failureDomains"`
	// FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
	FailureMessage *string `pulumi:"failureMessage"`
	// FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
	FailureReason *string `pulumi:"failureReason"`
	// InfrastructureReady is the state of the infrastructure provider.
	InfrastructureReady *bool `pulumi:"infrastructureReady"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase *string `pulumi:"phase"`
}

// ClusterStatusInput is an input type that accepts ClusterStatusArgs and ClusterStatusOutput values.
// You can construct a concrete instance of `ClusterStatusInput` via:
//
//	ClusterStatusArgs{...}
type ClusterStatusInput interface {
	pulumi.Input

	ToClusterStatusOutput() ClusterStatusOutput
	ToClusterStatusOutputWithContext(context.Context) ClusterStatusOutput
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatusArgs struct {
	// Conditions defines current service state of the cluster.
	Conditions ClusterStatusConditionsArrayInput `pulumi:"conditions"`
	// ControlPlaneInitialized defines if the control plane has been initialized.
	ControlPlaneInitialized pulumi.BoolPtrInput `pulumi:"controlPlaneInitialized"`
	// ControlPlaneReady defines if the control plane is ready.
	ControlPlaneReady pulumi.BoolPtrInput `pulumi:"controlPlaneReady"`
	// FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
	FailureDomains ClusterStatusFailureDomainsMapInput `pulumi:"failureDomains"`
	// FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
	FailureMessage pulumi.StringPtrInput `pulumi:"failureMessage"`
	// FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// InfrastructureReady is the state of the infrastructure provider.
	InfrastructureReady pulumi.BoolPtrInput `pulumi:"infrastructureReady"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (ClusterStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatus)(nil)).Elem()
}

func (i ClusterStatusArgs) ToClusterStatusOutput() ClusterStatusOutput {
	return i.ToClusterStatusOutputWithContext(context.Background())
}

func (i ClusterStatusArgs) ToClusterStatusOutputWithContext(ctx context.Context) ClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStatusOutput)
}

func (i ClusterStatusArgs) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return i.ToClusterStatusPtrOutputWithContext(context.Background())
}

func (i ClusterStatusArgs) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStatusOutput).ToClusterStatusPtrOutputWithContext(ctx)
}

// ClusterStatusPtrInput is an input type that accepts ClusterStatusArgs, ClusterStatusPtr and ClusterStatusPtrOutput values.
// You can construct a concrete instance of `ClusterStatusPtrInput` via:
//
//	        ClusterStatusArgs{...}
//
//	or:
//
//	        nil
type ClusterStatusPtrInput interface {
	pulumi.Input

	ToClusterStatusPtrOutput() ClusterStatusPtrOutput
	ToClusterStatusPtrOutputWithContext(context.Context) ClusterStatusPtrOutput
}

type clusterStatusPtrType ClusterStatusArgs

func ClusterStatusPtr(v *ClusterStatusArgs) ClusterStatusPtrInput {
	return (*clusterStatusPtrType)(v)
}

func (*clusterStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStatus)(nil)).Elem()
}

func (i *clusterStatusPtrType) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return i.ToClusterStatusPtrOutputWithContext(context.Background())
}

func (i *clusterStatusPtrType) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStatusPtrOutput)
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatusOutput struct{ *pulumi.OutputState }

func (ClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatus)(nil)).Elem()
}

func (o ClusterStatusOutput) ToClusterStatusOutput() ClusterStatusOutput {
	return o
}

func (o ClusterStatusOutput) ToClusterStatusOutputWithContext(ctx context.Context) ClusterStatusOutput {
	return o
}

func (o ClusterStatusOutput) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return o.ToClusterStatusPtrOutputWithContext(context.Background())
}

func (o ClusterStatusOutput) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterStatus) *ClusterStatus {
		return &v
	}).(ClusterStatusPtrOutput)
}

// Conditions defines current service state of the cluster.
func (o ClusterStatusOutput) Conditions() ClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v ClusterStatus) []ClusterStatusConditions { return v.Conditions }).(ClusterStatusConditionsArrayOutput)
}

// ControlPlaneInitialized defines if the control plane has been initialized.
func (o ClusterStatusOutput) ControlPlaneInitialized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterStatus) *bool { return v.ControlPlaneInitialized }).(pulumi.BoolPtrOutput)
}

// ControlPlaneReady defines if the control plane is ready.
func (o ClusterStatusOutput) ControlPlaneReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterStatus) *bool { return v.ControlPlaneReady }).(pulumi.BoolPtrOutput)
}

// FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
func (o ClusterStatusOutput) FailureDomains() ClusterStatusFailureDomainsMapOutput {
	return o.ApplyT(func(v ClusterStatus) map[string]ClusterStatusFailureDomains { return v.FailureDomains }).(ClusterStatusFailureDomainsMapOutput)
}

// FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
func (o ClusterStatusOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterStatus) *string { return v.FailureMessage }).(pulumi.StringPtrOutput)
}

// FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
func (o ClusterStatusOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterStatus) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// InfrastructureReady is the state of the infrastructure provider.
func (o ClusterStatusOutput) InfrastructureReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterStatus) *bool { return v.InfrastructureReady }).(pulumi.BoolPtrOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o ClusterStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o ClusterStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type ClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (ClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStatus)(nil)).Elem()
}

func (o ClusterStatusPtrOutput) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return o
}

func (o ClusterStatusPtrOutput) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return o
}

func (o ClusterStatusPtrOutput) Elem() ClusterStatusOutput {
	return o.ApplyT(func(v *ClusterStatus) ClusterStatus {
		if v != nil {
			return *v
		}
		var ret ClusterStatus
		return ret
	}).(ClusterStatusOutput)
}

// Conditions defines current service state of the cluster.
func (o ClusterStatusPtrOutput) Conditions() ClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ClusterStatus) []ClusterStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ClusterStatusConditionsArrayOutput)
}

// ControlPlaneInitialized defines if the control plane has been initialized.
func (o ClusterStatusPtrOutput) ControlPlaneInitialized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterStatus) *bool {
		if v == nil {
			return nil
		}
		return v.ControlPlaneInitialized
	}).(pulumi.BoolPtrOutput)
}

// ControlPlaneReady defines if the control plane is ready.
func (o ClusterStatusPtrOutput) ControlPlaneReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterStatus) *bool {
		if v == nil {
			return nil
		}
		return v.ControlPlaneReady
	}).(pulumi.BoolPtrOutput)
}

// FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
func (o ClusterStatusPtrOutput) FailureDomains() ClusterStatusFailureDomainsMapOutput {
	return o.ApplyT(func(v *ClusterStatus) map[string]ClusterStatusFailureDomains {
		if v == nil {
			return nil
		}
		return v.FailureDomains
	}).(ClusterStatusFailureDomainsMapOutput)
}

// FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
func (o ClusterStatusPtrOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureMessage
	}).(pulumi.StringPtrOutput)
}

// FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
func (o ClusterStatusPtrOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureReason
	}).(pulumi.StringPtrOutput)
}

// InfrastructureReady is the state of the infrastructure provider.
func (o ClusterStatusPtrOutput) InfrastructureReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterStatus) *bool {
		if v == nil {
			return nil
		}
		return v.InfrastructureReady
	}).(pulumi.BoolPtrOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o ClusterStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o ClusterStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type ClusterStatusConditions struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type string `pulumi:"type"`
}

// ClusterStatusConditionsInput is an input type that accepts ClusterStatusConditionsArgs and ClusterStatusConditionsOutput values.
// You can construct a concrete instance of `ClusterStatusConditionsInput` via:
//
//	ClusterStatusConditionsArgs{...}
type ClusterStatusConditionsInput interface {
	pulumi.Input

	ToClusterStatusConditionsOutput() ClusterStatusConditionsOutput
	ToClusterStatusConditionsOutputWithContext(context.Context) ClusterStatusConditionsOutput
}

// Condition defines an observation of a Cluster API resource operational state.
type ClusterStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ClusterStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatusConditions)(nil)).Elem()
}

func (i ClusterStatusConditionsArgs) ToClusterStatusConditionsOutput() ClusterStatusConditionsOutput {
	return i.ToClusterStatusConditionsOutputWithContext(context.Background())
}

func (i ClusterStatusConditionsArgs) ToClusterStatusConditionsOutputWithContext(ctx context.Context) ClusterStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStatusConditionsOutput)
}

// ClusterStatusConditionsArrayInput is an input type that accepts ClusterStatusConditionsArray and ClusterStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ClusterStatusConditionsArrayInput` via:
//
//	ClusterStatusConditionsArray{ ClusterStatusConditionsArgs{...} }
type ClusterStatusConditionsArrayInput interface {
	pulumi.Input

	ToClusterStatusConditionsArrayOutput() ClusterStatusConditionsArrayOutput
	ToClusterStatusConditionsArrayOutputWithContext(context.Context) ClusterStatusConditionsArrayOutput
}

type ClusterStatusConditionsArray []ClusterStatusConditionsInput

func (ClusterStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterStatusConditions)(nil)).Elem()
}

func (i ClusterStatusConditionsArray) ToClusterStatusConditionsArrayOutput() ClusterStatusConditionsArrayOutput {
	return i.ToClusterStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ClusterStatusConditionsArray) ToClusterStatusConditionsArrayOutputWithContext(ctx context.Context) ClusterStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStatusConditionsArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type ClusterStatusConditionsOutput struct{ *pulumi.OutputState }

func (ClusterStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatusConditions)(nil)).Elem()
}

func (o ClusterStatusConditionsOutput) ToClusterStatusConditionsOutput() ClusterStatusConditionsOutput {
	return o
}

func (o ClusterStatusConditionsOutput) ToClusterStatusConditionsOutputWithContext(ctx context.Context) ClusterStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
func (o ClusterStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition. This field may be empty.
func (o ClusterStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
func (o ClusterStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
func (o ClusterStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ClusterStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
func (o ClusterStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ClusterStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ClusterStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterStatusConditions)(nil)).Elem()
}

func (o ClusterStatusConditionsArrayOutput) ToClusterStatusConditionsArrayOutput() ClusterStatusConditionsArrayOutput {
	return o
}

func (o ClusterStatusConditionsArrayOutput) ToClusterStatusConditionsArrayOutputWithContext(ctx context.Context) ClusterStatusConditionsArrayOutput {
	return o
}

func (o ClusterStatusConditionsArrayOutput) Index(i pulumi.IntInput) ClusterStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterStatusConditions {
		return vs[0].([]ClusterStatusConditions)[vs[1].(int)]
	}).(ClusterStatusConditionsOutput)
}

// FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
type ClusterStatusFailureDomains struct {
	// Attributes is a free form map of attributes an infrastructure provider might use or require.
	Attributes map[string]string `pulumi:"attributes"`
	// ControlPlane determines if this failure domain is suitable for use by control plane machines.
	ControlPlane *bool `pulumi:"controlPlane"`
}

// ClusterStatusFailureDomainsInput is an input type that accepts ClusterStatusFailureDomainsArgs and ClusterStatusFailureDomainsOutput values.
// You can construct a concrete instance of `ClusterStatusFailureDomainsInput` via:
//
//	ClusterStatusFailureDomainsArgs{...}
type ClusterStatusFailureDomainsInput interface {
	pulumi.Input

	ToClusterStatusFailureDomainsOutput() ClusterStatusFailureDomainsOutput
	ToClusterStatusFailureDomainsOutputWithContext(context.Context) ClusterStatusFailureDomainsOutput
}

// FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
type ClusterStatusFailureDomainsArgs struct {
	// Attributes is a free form map of attributes an infrastructure provider might use or require.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// ControlPlane determines if this failure domain is suitable for use by control plane machines.
	ControlPlane pulumi.BoolPtrInput `pulumi:"controlPlane"`
}

func (ClusterStatusFailureDomainsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatusFailureDomains)(nil)).Elem()
}

func (i ClusterStatusFailureDomainsArgs) ToClusterStatusFailureDomainsOutput() ClusterStatusFailureDomainsOutput {
	return i.ToClusterStatusFailureDomainsOutputWithContext(context.Background())
}

func (i ClusterStatusFailureDomainsArgs) ToClusterStatusFailureDomainsOutputWithContext(ctx context.Context) ClusterStatusFailureDomainsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStatusFailureDomainsOutput)
}

// ClusterStatusFailureDomainsMapInput is an input type that accepts ClusterStatusFailureDomainsMap and ClusterStatusFailureDomainsMapOutput values.
// You can construct a concrete instance of `ClusterStatusFailureDomainsMapInput` via:
//
//	ClusterStatusFailureDomainsMap{ "key": ClusterStatusFailureDomainsArgs{...} }
type ClusterStatusFailureDomainsMapInput interface {
	pulumi.Input

	ToClusterStatusFailureDomainsMapOutput() ClusterStatusFailureDomainsMapOutput
	ToClusterStatusFailureDomainsMapOutputWithContext(context.Context) ClusterStatusFailureDomainsMapOutput
}

type ClusterStatusFailureDomainsMap map[string]ClusterStatusFailureDomainsInput

func (ClusterStatusFailureDomainsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ClusterStatusFailureDomains)(nil)).Elem()
}

func (i ClusterStatusFailureDomainsMap) ToClusterStatusFailureDomainsMapOutput() ClusterStatusFailureDomainsMapOutput {
	return i.ToClusterStatusFailureDomainsMapOutputWithContext(context.Background())
}

func (i ClusterStatusFailureDomainsMap) ToClusterStatusFailureDomainsMapOutputWithContext(ctx context.Context) ClusterStatusFailureDomainsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStatusFailureDomainsMapOutput)
}

// FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
type ClusterStatusFailureDomainsOutput struct{ *pulumi.OutputState }

func (ClusterStatusFailureDomainsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatusFailureDomains)(nil)).Elem()
}

func (o ClusterStatusFailureDomainsOutput) ToClusterStatusFailureDomainsOutput() ClusterStatusFailureDomainsOutput {
	return o
}

func (o ClusterStatusFailureDomainsOutput) ToClusterStatusFailureDomainsOutputWithContext(ctx context.Context) ClusterStatusFailureDomainsOutput {
	return o
}

// Attributes is a free form map of attributes an infrastructure provider might use or require.
func (o ClusterStatusFailureDomainsOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterStatusFailureDomains) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// ControlPlane determines if this failure domain is suitable for use by control plane machines.
func (o ClusterStatusFailureDomainsOutput) ControlPlane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterStatusFailureDomains) *bool { return v.ControlPlane }).(pulumi.BoolPtrOutput)
}

type ClusterStatusFailureDomainsMapOutput struct{ *pulumi.OutputState }

func (ClusterStatusFailureDomainsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ClusterStatusFailureDomains)(nil)).Elem()
}

func (o ClusterStatusFailureDomainsMapOutput) ToClusterStatusFailureDomainsMapOutput() ClusterStatusFailureDomainsMapOutput {
	return o
}

func (o ClusterStatusFailureDomainsMapOutput) ToClusterStatusFailureDomainsMapOutputWithContext(ctx context.Context) ClusterStatusFailureDomainsMapOutput {
	return o
}

func (o ClusterStatusFailureDomainsMapOutput) MapIndex(k pulumi.StringInput) ClusterStatusFailureDomainsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ClusterStatusFailureDomains {
		return vs[0].(map[string]ClusterStatusFailureDomains)[vs[1].(string)]
	}).(ClusterStatusFailureDomainsOutput)
}

// Attributes is a free form map of attributes an infrastructure provider might use or require.
type ClusterStatusFailureDomainsAttributes struct {
}

// Machine is the Schema for the machines API.
//
//	Deprecated: This type will be removed in one of the next releases.
type MachineType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachineSpec defines the desired state of Machine.
	Spec *MachineSpec `pulumi:"spec"`
	// MachineStatus defines the observed state of Machine.
	Status *MachineStatus `pulumi:"status"`
}

// MachineDeployment is the Schema for the machinedeployments API.
//
//	Deprecated: This type will be removed in one of the next releases.
type MachineDeploymentType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachineDeploymentSpec defines the desired state of MachineDeployment.
	Spec *MachineDeploymentSpec `pulumi:"spec"`
	// MachineDeploymentStatus defines the observed state of MachineDeployment.
	Status *MachineDeploymentStatus `pulumi:"status"`
}

type MachineDeploymentMetadata struct {
}

// MachineDeploymentSpec defines the desired state of MachineDeployment.
type MachineDeploymentSpec struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused.
	Paused *bool `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int `pulumi:"progressDeadlineSeconds"`
	// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
	Replicas *int `pulumi:"replicas"`
	// The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
	Selector MachineDeploymentSpecSelector `pulumi:"selector"`
	// The deployment strategy to use to replace existing machines with new ones.
	Strategy *MachineDeploymentSpecStrategy `pulumi:"strategy"`
	// Template describes the machines that will be created.
	Template MachineDeploymentSpecTemplate `pulumi:"template"`
}

// MachineDeploymentSpecInput is an input type that accepts MachineDeploymentSpecArgs and MachineDeploymentSpecOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecInput` via:
//
//	MachineDeploymentSpecArgs{...}
type MachineDeploymentSpecInput interface {
	pulumi.Input

	ToMachineDeploymentSpecOutput() MachineDeploymentSpecOutput
	ToMachineDeploymentSpecOutputWithContext(context.Context) MachineDeploymentSpecOutput
}

// MachineDeploymentSpec defines the desired state of MachineDeployment.
type MachineDeploymentSpecArgs struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds pulumi.IntPtrInput `pulumi:"progressDeadlineSeconds"`
	// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
	Selector MachineDeploymentSpecSelectorInput `pulumi:"selector"`
	// The deployment strategy to use to replace existing machines with new ones.
	Strategy MachineDeploymentSpecStrategyPtrInput `pulumi:"strategy"`
	// Template describes the machines that will be created.
	Template MachineDeploymentSpecTemplateInput `pulumi:"template"`
}

func (MachineDeploymentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpec)(nil)).Elem()
}

func (i MachineDeploymentSpecArgs) ToMachineDeploymentSpecOutput() MachineDeploymentSpecOutput {
	return i.ToMachineDeploymentSpecOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecArgs) ToMachineDeploymentSpecOutputWithContext(ctx context.Context) MachineDeploymentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecOutput)
}

func (i MachineDeploymentSpecArgs) ToMachineDeploymentSpecPtrOutput() MachineDeploymentSpecPtrOutput {
	return i.ToMachineDeploymentSpecPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecArgs) ToMachineDeploymentSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecOutput).ToMachineDeploymentSpecPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecPtrInput is an input type that accepts MachineDeploymentSpecArgs, MachineDeploymentSpecPtr and MachineDeploymentSpecPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecPtrInput` via:
//
//	        MachineDeploymentSpecArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecPtrOutput() MachineDeploymentSpecPtrOutput
	ToMachineDeploymentSpecPtrOutputWithContext(context.Context) MachineDeploymentSpecPtrOutput
}

type machineDeploymentSpecPtrType MachineDeploymentSpecArgs

func MachineDeploymentSpecPtr(v *MachineDeploymentSpecArgs) MachineDeploymentSpecPtrInput {
	return (*machineDeploymentSpecPtrType)(v)
}

func (*machineDeploymentSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpec)(nil)).Elem()
}

func (i *machineDeploymentSpecPtrType) ToMachineDeploymentSpecPtrOutput() MachineDeploymentSpecPtrOutput {
	return i.ToMachineDeploymentSpecPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecPtrType) ToMachineDeploymentSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecPtrOutput)
}

// MachineDeploymentSpec defines the desired state of MachineDeployment.
type MachineDeploymentSpecOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpec)(nil)).Elem()
}

func (o MachineDeploymentSpecOutput) ToMachineDeploymentSpecOutput() MachineDeploymentSpecOutput {
	return o
}

func (o MachineDeploymentSpecOutput) ToMachineDeploymentSpecOutputWithContext(ctx context.Context) MachineDeploymentSpecOutput {
	return o
}

func (o MachineDeploymentSpecOutput) ToMachineDeploymentSpecPtrOutput() MachineDeploymentSpecPtrOutput {
	return o.ToMachineDeploymentSpecPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecOutput) ToMachineDeploymentSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpec) *MachineDeploymentSpec {
		return &v
	}).(MachineDeploymentSpecPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineDeploymentSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
func (o MachineDeploymentSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused.
func (o MachineDeploymentSpecOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
func (o MachineDeploymentSpecOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) *int { return v.ProgressDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
func (o MachineDeploymentSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o MachineDeploymentSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
func (o MachineDeploymentSpecOutput) Selector() MachineDeploymentSpecSelectorOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) MachineDeploymentSpecSelector { return v.Selector }).(MachineDeploymentSpecSelectorOutput)
}

// The deployment strategy to use to replace existing machines with new ones.
func (o MachineDeploymentSpecOutput) Strategy() MachineDeploymentSpecStrategyPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) *MachineDeploymentSpecStrategy { return v.Strategy }).(MachineDeploymentSpecStrategyPtrOutput)
}

// Template describes the machines that will be created.
func (o MachineDeploymentSpecOutput) Template() MachineDeploymentSpecTemplateOutput {
	return o.ApplyT(func(v MachineDeploymentSpec) MachineDeploymentSpecTemplate { return v.Template }).(MachineDeploymentSpecTemplateOutput)
}

type MachineDeploymentSpecPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpec)(nil)).Elem()
}

func (o MachineDeploymentSpecPtrOutput) ToMachineDeploymentSpecPtrOutput() MachineDeploymentSpecPtrOutput {
	return o
}

func (o MachineDeploymentSpecPtrOutput) ToMachineDeploymentSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecPtrOutput {
	return o
}

func (o MachineDeploymentSpecPtrOutput) Elem() MachineDeploymentSpecOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) MachineDeploymentSpec {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpec
		return ret
	}).(MachineDeploymentSpecOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineDeploymentSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
func (o MachineDeploymentSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused.
func (o MachineDeploymentSpecPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
func (o MachineDeploymentSpecPtrOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.ProgressDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
func (o MachineDeploymentSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o MachineDeploymentSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
func (o MachineDeploymentSpecPtrOutput) Selector() MachineDeploymentSpecSelectorPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *MachineDeploymentSpecSelector {
		if v == nil {
			return nil
		}
		return &v.Selector
	}).(MachineDeploymentSpecSelectorPtrOutput)
}

// The deployment strategy to use to replace existing machines with new ones.
func (o MachineDeploymentSpecPtrOutput) Strategy() MachineDeploymentSpecStrategyPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *MachineDeploymentSpecStrategy {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(MachineDeploymentSpecStrategyPtrOutput)
}

// Template describes the machines that will be created.
func (o MachineDeploymentSpecPtrOutput) Template() MachineDeploymentSpecTemplatePtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpec) *MachineDeploymentSpecTemplate {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(MachineDeploymentSpecTemplatePtrOutput)
}

// Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
type MachineDeploymentSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []MachineDeploymentSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// MachineDeploymentSpecSelectorInput is an input type that accepts MachineDeploymentSpecSelectorArgs and MachineDeploymentSpecSelectorOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecSelectorInput` via:
//
//	MachineDeploymentSpecSelectorArgs{...}
type MachineDeploymentSpecSelectorInput interface {
	pulumi.Input

	ToMachineDeploymentSpecSelectorOutput() MachineDeploymentSpecSelectorOutput
	ToMachineDeploymentSpecSelectorOutputWithContext(context.Context) MachineDeploymentSpecSelectorOutput
}

// Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
type MachineDeploymentSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions MachineDeploymentSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (MachineDeploymentSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecSelector)(nil)).Elem()
}

func (i MachineDeploymentSpecSelectorArgs) ToMachineDeploymentSpecSelectorOutput() MachineDeploymentSpecSelectorOutput {
	return i.ToMachineDeploymentSpecSelectorOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecSelectorArgs) ToMachineDeploymentSpecSelectorOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecSelectorOutput)
}

func (i MachineDeploymentSpecSelectorArgs) ToMachineDeploymentSpecSelectorPtrOutput() MachineDeploymentSpecSelectorPtrOutput {
	return i.ToMachineDeploymentSpecSelectorPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecSelectorArgs) ToMachineDeploymentSpecSelectorPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecSelectorOutput).ToMachineDeploymentSpecSelectorPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecSelectorPtrInput is an input type that accepts MachineDeploymentSpecSelectorArgs, MachineDeploymentSpecSelectorPtr and MachineDeploymentSpecSelectorPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecSelectorPtrInput` via:
//
//	        MachineDeploymentSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecSelectorPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecSelectorPtrOutput() MachineDeploymentSpecSelectorPtrOutput
	ToMachineDeploymentSpecSelectorPtrOutputWithContext(context.Context) MachineDeploymentSpecSelectorPtrOutput
}

type machineDeploymentSpecSelectorPtrType MachineDeploymentSpecSelectorArgs

func MachineDeploymentSpecSelectorPtr(v *MachineDeploymentSpecSelectorArgs) MachineDeploymentSpecSelectorPtrInput {
	return (*machineDeploymentSpecSelectorPtrType)(v)
}

func (*machineDeploymentSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecSelector)(nil)).Elem()
}

func (i *machineDeploymentSpecSelectorPtrType) ToMachineDeploymentSpecSelectorPtrOutput() MachineDeploymentSpecSelectorPtrOutput {
	return i.ToMachineDeploymentSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecSelectorPtrType) ToMachineDeploymentSpecSelectorPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecSelectorPtrOutput)
}

// Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
type MachineDeploymentSpecSelectorOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecSelector)(nil)).Elem()
}

func (o MachineDeploymentSpecSelectorOutput) ToMachineDeploymentSpecSelectorOutput() MachineDeploymentSpecSelectorOutput {
	return o
}

func (o MachineDeploymentSpecSelectorOutput) ToMachineDeploymentSpecSelectorOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorOutput {
	return o
}

func (o MachineDeploymentSpecSelectorOutput) ToMachineDeploymentSpecSelectorPtrOutput() MachineDeploymentSpecSelectorPtrOutput {
	return o.ToMachineDeploymentSpecSelectorPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecSelectorOutput) ToMachineDeploymentSpecSelectorPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecSelector) *MachineDeploymentSpecSelector {
		return &v
	}).(MachineDeploymentSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineDeploymentSpecSelectorOutput) MatchExpressions() MachineDeploymentSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v MachineDeploymentSpecSelector) []MachineDeploymentSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(MachineDeploymentSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineDeploymentSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineDeploymentSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type MachineDeploymentSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecSelector)(nil)).Elem()
}

func (o MachineDeploymentSpecSelectorPtrOutput) ToMachineDeploymentSpecSelectorPtrOutput() MachineDeploymentSpecSelectorPtrOutput {
	return o
}

func (o MachineDeploymentSpecSelectorPtrOutput) ToMachineDeploymentSpecSelectorPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorPtrOutput {
	return o
}

func (o MachineDeploymentSpecSelectorPtrOutput) Elem() MachineDeploymentSpecSelectorOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecSelector) MachineDeploymentSpecSelector {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecSelector
		return ret
	}).(MachineDeploymentSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineDeploymentSpecSelectorPtrOutput) MatchExpressions() MachineDeploymentSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecSelector) []MachineDeploymentSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(MachineDeploymentSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineDeploymentSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineDeploymentSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// MachineDeploymentSpecSelectorMatchExpressionsInput is an input type that accepts MachineDeploymentSpecSelectorMatchExpressionsArgs and MachineDeploymentSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecSelectorMatchExpressionsInput` via:
//
//	MachineDeploymentSpecSelectorMatchExpressionsArgs{...}
type MachineDeploymentSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToMachineDeploymentSpecSelectorMatchExpressionsOutput() MachineDeploymentSpecSelectorMatchExpressionsOutput
	ToMachineDeploymentSpecSelectorMatchExpressionsOutputWithContext(context.Context) MachineDeploymentSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineDeploymentSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MachineDeploymentSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineDeploymentSpecSelectorMatchExpressionsArgs) ToMachineDeploymentSpecSelectorMatchExpressionsOutput() MachineDeploymentSpecSelectorMatchExpressionsOutput {
	return i.ToMachineDeploymentSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecSelectorMatchExpressionsArgs) ToMachineDeploymentSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecSelectorMatchExpressionsOutput)
}

// MachineDeploymentSpecSelectorMatchExpressionsArrayInput is an input type that accepts MachineDeploymentSpecSelectorMatchExpressionsArray and MachineDeploymentSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecSelectorMatchExpressionsArrayInput` via:
//
//	MachineDeploymentSpecSelectorMatchExpressionsArray{ MachineDeploymentSpecSelectorMatchExpressionsArgs{...} }
type MachineDeploymentSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToMachineDeploymentSpecSelectorMatchExpressionsArrayOutput() MachineDeploymentSpecSelectorMatchExpressionsArrayOutput
	ToMachineDeploymentSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) MachineDeploymentSpecSelectorMatchExpressionsArrayOutput
}

type MachineDeploymentSpecSelectorMatchExpressionsArray []MachineDeploymentSpecSelectorMatchExpressionsInput

func (MachineDeploymentSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDeploymentSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineDeploymentSpecSelectorMatchExpressionsArray) ToMachineDeploymentSpecSelectorMatchExpressionsArrayOutput() MachineDeploymentSpecSelectorMatchExpressionsArrayOutput {
	return i.ToMachineDeploymentSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecSelectorMatchExpressionsArray) ToMachineDeploymentSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineDeploymentSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineDeploymentSpecSelectorMatchExpressionsOutput) ToMachineDeploymentSpecSelectorMatchExpressionsOutput() MachineDeploymentSpecSelectorMatchExpressionsOutput {
	return o
}

func (o MachineDeploymentSpecSelectorMatchExpressionsOutput) ToMachineDeploymentSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o MachineDeploymentSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o MachineDeploymentSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o MachineDeploymentSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineDeploymentSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MachineDeploymentSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDeploymentSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineDeploymentSpecSelectorMatchExpressionsArrayOutput) ToMachineDeploymentSpecSelectorMatchExpressionsArrayOutput() MachineDeploymentSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineDeploymentSpecSelectorMatchExpressionsArrayOutput) ToMachineDeploymentSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineDeploymentSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineDeploymentSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) MachineDeploymentSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineDeploymentSpecSelectorMatchExpressions {
		return vs[0].([]MachineDeploymentSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(MachineDeploymentSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MachineDeploymentSpecSelectorMatchLabels struct {
}

// The deployment strategy to use to replace existing machines with new ones.
type MachineDeploymentSpecStrategy struct {
	// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
	RollingUpdate *MachineDeploymentSpecStrategyRollingUpdate `pulumi:"rollingUpdate"`
	// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
	Type *string `pulumi:"type"`
}

// MachineDeploymentSpecStrategyInput is an input type that accepts MachineDeploymentSpecStrategyArgs and MachineDeploymentSpecStrategyOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecStrategyInput` via:
//
//	MachineDeploymentSpecStrategyArgs{...}
type MachineDeploymentSpecStrategyInput interface {
	pulumi.Input

	ToMachineDeploymentSpecStrategyOutput() MachineDeploymentSpecStrategyOutput
	ToMachineDeploymentSpecStrategyOutputWithContext(context.Context) MachineDeploymentSpecStrategyOutput
}

// The deployment strategy to use to replace existing machines with new ones.
type MachineDeploymentSpecStrategyArgs struct {
	// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
	RollingUpdate MachineDeploymentSpecStrategyRollingUpdatePtrInput `pulumi:"rollingUpdate"`
	// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MachineDeploymentSpecStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecStrategy)(nil)).Elem()
}

func (i MachineDeploymentSpecStrategyArgs) ToMachineDeploymentSpecStrategyOutput() MachineDeploymentSpecStrategyOutput {
	return i.ToMachineDeploymentSpecStrategyOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecStrategyArgs) ToMachineDeploymentSpecStrategyOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecStrategyOutput)
}

func (i MachineDeploymentSpecStrategyArgs) ToMachineDeploymentSpecStrategyPtrOutput() MachineDeploymentSpecStrategyPtrOutput {
	return i.ToMachineDeploymentSpecStrategyPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecStrategyArgs) ToMachineDeploymentSpecStrategyPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecStrategyOutput).ToMachineDeploymentSpecStrategyPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecStrategyPtrInput is an input type that accepts MachineDeploymentSpecStrategyArgs, MachineDeploymentSpecStrategyPtr and MachineDeploymentSpecStrategyPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecStrategyPtrInput` via:
//
//	        MachineDeploymentSpecStrategyArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecStrategyPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecStrategyPtrOutput() MachineDeploymentSpecStrategyPtrOutput
	ToMachineDeploymentSpecStrategyPtrOutputWithContext(context.Context) MachineDeploymentSpecStrategyPtrOutput
}

type machineDeploymentSpecStrategyPtrType MachineDeploymentSpecStrategyArgs

func MachineDeploymentSpecStrategyPtr(v *MachineDeploymentSpecStrategyArgs) MachineDeploymentSpecStrategyPtrInput {
	return (*machineDeploymentSpecStrategyPtrType)(v)
}

func (*machineDeploymentSpecStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecStrategy)(nil)).Elem()
}

func (i *machineDeploymentSpecStrategyPtrType) ToMachineDeploymentSpecStrategyPtrOutput() MachineDeploymentSpecStrategyPtrOutput {
	return i.ToMachineDeploymentSpecStrategyPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecStrategyPtrType) ToMachineDeploymentSpecStrategyPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecStrategyPtrOutput)
}

// The deployment strategy to use to replace existing machines with new ones.
type MachineDeploymentSpecStrategyOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecStrategy)(nil)).Elem()
}

func (o MachineDeploymentSpecStrategyOutput) ToMachineDeploymentSpecStrategyOutput() MachineDeploymentSpecStrategyOutput {
	return o
}

func (o MachineDeploymentSpecStrategyOutput) ToMachineDeploymentSpecStrategyOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyOutput {
	return o
}

func (o MachineDeploymentSpecStrategyOutput) ToMachineDeploymentSpecStrategyPtrOutput() MachineDeploymentSpecStrategyPtrOutput {
	return o.ToMachineDeploymentSpecStrategyPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecStrategyOutput) ToMachineDeploymentSpecStrategyPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecStrategy) *MachineDeploymentSpecStrategy {
		return &v
	}).(MachineDeploymentSpecStrategyPtrOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
func (o MachineDeploymentSpecStrategyOutput) RollingUpdate() MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecStrategy) *MachineDeploymentSpecStrategyRollingUpdate {
		return v.RollingUpdate
	}).(MachineDeploymentSpecStrategyRollingUpdatePtrOutput)
}

// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
func (o MachineDeploymentSpecStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MachineDeploymentSpecStrategyPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecStrategy)(nil)).Elem()
}

func (o MachineDeploymentSpecStrategyPtrOutput) ToMachineDeploymentSpecStrategyPtrOutput() MachineDeploymentSpecStrategyPtrOutput {
	return o
}

func (o MachineDeploymentSpecStrategyPtrOutput) ToMachineDeploymentSpecStrategyPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyPtrOutput {
	return o
}

func (o MachineDeploymentSpecStrategyPtrOutput) Elem() MachineDeploymentSpecStrategyOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecStrategy) MachineDeploymentSpecStrategy {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecStrategy
		return ret
	}).(MachineDeploymentSpecStrategyOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
func (o MachineDeploymentSpecStrategyPtrOutput) RollingUpdate() MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecStrategy) *MachineDeploymentSpecStrategyRollingUpdate {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(MachineDeploymentSpecStrategyRollingUpdatePtrOutput)
}

// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
func (o MachineDeploymentSpecStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
type MachineDeploymentSpecStrategyRollingUpdate struct {
	// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
	MaxSurge interface{} `pulumi:"maxSurge"`
	// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
}

// MachineDeploymentSpecStrategyRollingUpdateInput is an input type that accepts MachineDeploymentSpecStrategyRollingUpdateArgs and MachineDeploymentSpecStrategyRollingUpdateOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecStrategyRollingUpdateInput` via:
//
//	MachineDeploymentSpecStrategyRollingUpdateArgs{...}
type MachineDeploymentSpecStrategyRollingUpdateInput interface {
	pulumi.Input

	ToMachineDeploymentSpecStrategyRollingUpdateOutput() MachineDeploymentSpecStrategyRollingUpdateOutput
	ToMachineDeploymentSpecStrategyRollingUpdateOutputWithContext(context.Context) MachineDeploymentSpecStrategyRollingUpdateOutput
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
type MachineDeploymentSpecStrategyRollingUpdateArgs struct {
	// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
	MaxSurge pulumi.Input `pulumi:"maxSurge"`
	// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
}

func (MachineDeploymentSpecStrategyRollingUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecStrategyRollingUpdate)(nil)).Elem()
}

func (i MachineDeploymentSpecStrategyRollingUpdateArgs) ToMachineDeploymentSpecStrategyRollingUpdateOutput() MachineDeploymentSpecStrategyRollingUpdateOutput {
	return i.ToMachineDeploymentSpecStrategyRollingUpdateOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecStrategyRollingUpdateArgs) ToMachineDeploymentSpecStrategyRollingUpdateOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyRollingUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecStrategyRollingUpdateOutput)
}

func (i MachineDeploymentSpecStrategyRollingUpdateArgs) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutput() MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return i.ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecStrategyRollingUpdateArgs) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecStrategyRollingUpdateOutput).ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(ctx)
}

// MachineDeploymentSpecStrategyRollingUpdatePtrInput is an input type that accepts MachineDeploymentSpecStrategyRollingUpdateArgs, MachineDeploymentSpecStrategyRollingUpdatePtr and MachineDeploymentSpecStrategyRollingUpdatePtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecStrategyRollingUpdatePtrInput` via:
//
//	        MachineDeploymentSpecStrategyRollingUpdateArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecStrategyRollingUpdatePtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecStrategyRollingUpdatePtrOutput() MachineDeploymentSpecStrategyRollingUpdatePtrOutput
	ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(context.Context) MachineDeploymentSpecStrategyRollingUpdatePtrOutput
}

type machineDeploymentSpecStrategyRollingUpdatePtrType MachineDeploymentSpecStrategyRollingUpdateArgs

func MachineDeploymentSpecStrategyRollingUpdatePtr(v *MachineDeploymentSpecStrategyRollingUpdateArgs) MachineDeploymentSpecStrategyRollingUpdatePtrInput {
	return (*machineDeploymentSpecStrategyRollingUpdatePtrType)(v)
}

func (*machineDeploymentSpecStrategyRollingUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecStrategyRollingUpdate)(nil)).Elem()
}

func (i *machineDeploymentSpecStrategyRollingUpdatePtrType) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutput() MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return i.ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecStrategyRollingUpdatePtrType) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecStrategyRollingUpdatePtrOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
type MachineDeploymentSpecStrategyRollingUpdateOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecStrategyRollingUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecStrategyRollingUpdate)(nil)).Elem()
}

func (o MachineDeploymentSpecStrategyRollingUpdateOutput) ToMachineDeploymentSpecStrategyRollingUpdateOutput() MachineDeploymentSpecStrategyRollingUpdateOutput {
	return o
}

func (o MachineDeploymentSpecStrategyRollingUpdateOutput) ToMachineDeploymentSpecStrategyRollingUpdateOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyRollingUpdateOutput {
	return o
}

func (o MachineDeploymentSpecStrategyRollingUpdateOutput) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutput() MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return o.ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecStrategyRollingUpdateOutput) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecStrategyRollingUpdate) *MachineDeploymentSpecStrategyRollingUpdate {
		return &v
	}).(MachineDeploymentSpecStrategyRollingUpdatePtrOutput)
}

// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
func (o MachineDeploymentSpecStrategyRollingUpdateOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v MachineDeploymentSpecStrategyRollingUpdate) interface{} { return v.MaxSurge }).(pulumi.AnyOutput)
}

// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
func (o MachineDeploymentSpecStrategyRollingUpdateOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v MachineDeploymentSpecStrategyRollingUpdate) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

type MachineDeploymentSpecStrategyRollingUpdatePtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecStrategyRollingUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecStrategyRollingUpdate)(nil)).Elem()
}

func (o MachineDeploymentSpecStrategyRollingUpdatePtrOutput) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutput() MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return o
}

func (o MachineDeploymentSpecStrategyRollingUpdatePtrOutput) ToMachineDeploymentSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecStrategyRollingUpdatePtrOutput {
	return o
}

func (o MachineDeploymentSpecStrategyRollingUpdatePtrOutput) Elem() MachineDeploymentSpecStrategyRollingUpdateOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecStrategyRollingUpdate) MachineDeploymentSpecStrategyRollingUpdate {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecStrategyRollingUpdate
		return ret
	}).(MachineDeploymentSpecStrategyRollingUpdateOutput)
}

// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
func (o MachineDeploymentSpecStrategyRollingUpdatePtrOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecStrategyRollingUpdate) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.AnyOutput)
}

// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
func (o MachineDeploymentSpecStrategyRollingUpdatePtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecStrategyRollingUpdate) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// Template describes the machines that will be created.
type MachineDeploymentSpecTemplate struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *MachineDeploymentSpecTemplateMetadata `pulumi:"metadata"`
	// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *MachineDeploymentSpecTemplateSpec `pulumi:"spec"`
}

// MachineDeploymentSpecTemplateInput is an input type that accepts MachineDeploymentSpecTemplateArgs and MachineDeploymentSpecTemplateOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateInput` via:
//
//	MachineDeploymentSpecTemplateArgs{...}
type MachineDeploymentSpecTemplateInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateOutput() MachineDeploymentSpecTemplateOutput
	ToMachineDeploymentSpecTemplateOutputWithContext(context.Context) MachineDeploymentSpecTemplateOutput
}

// Template describes the machines that will be created.
type MachineDeploymentSpecTemplateArgs struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata MachineDeploymentSpecTemplateMetadataPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec MachineDeploymentSpecTemplateSpecPtrInput `pulumi:"spec"`
}

func (MachineDeploymentSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplate)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateArgs) ToMachineDeploymentSpecTemplateOutput() MachineDeploymentSpecTemplateOutput {
	return i.ToMachineDeploymentSpecTemplateOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateArgs) ToMachineDeploymentSpecTemplateOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateOutput)
}

func (i MachineDeploymentSpecTemplateArgs) ToMachineDeploymentSpecTemplatePtrOutput() MachineDeploymentSpecTemplatePtrOutput {
	return i.ToMachineDeploymentSpecTemplatePtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateArgs) ToMachineDeploymentSpecTemplatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateOutput).ToMachineDeploymentSpecTemplatePtrOutputWithContext(ctx)
}

// MachineDeploymentSpecTemplatePtrInput is an input type that accepts MachineDeploymentSpecTemplateArgs, MachineDeploymentSpecTemplatePtr and MachineDeploymentSpecTemplatePtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplatePtrInput` via:
//
//	        MachineDeploymentSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecTemplatePtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplatePtrOutput() MachineDeploymentSpecTemplatePtrOutput
	ToMachineDeploymentSpecTemplatePtrOutputWithContext(context.Context) MachineDeploymentSpecTemplatePtrOutput
}

type machineDeploymentSpecTemplatePtrType MachineDeploymentSpecTemplateArgs

func MachineDeploymentSpecTemplatePtr(v *MachineDeploymentSpecTemplateArgs) MachineDeploymentSpecTemplatePtrInput {
	return (*machineDeploymentSpecTemplatePtrType)(v)
}

func (*machineDeploymentSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplate)(nil)).Elem()
}

func (i *machineDeploymentSpecTemplatePtrType) ToMachineDeploymentSpecTemplatePtrOutput() MachineDeploymentSpecTemplatePtrOutput {
	return i.ToMachineDeploymentSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecTemplatePtrType) ToMachineDeploymentSpecTemplatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplatePtrOutput)
}

// Template describes the machines that will be created.
type MachineDeploymentSpecTemplateOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplate)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateOutput) ToMachineDeploymentSpecTemplateOutput() MachineDeploymentSpecTemplateOutput {
	return o
}

func (o MachineDeploymentSpecTemplateOutput) ToMachineDeploymentSpecTemplateOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateOutput {
	return o
}

func (o MachineDeploymentSpecTemplateOutput) ToMachineDeploymentSpecTemplatePtrOutput() MachineDeploymentSpecTemplatePtrOutput {
	return o.ToMachineDeploymentSpecTemplatePtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecTemplateOutput) ToMachineDeploymentSpecTemplatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecTemplate) *MachineDeploymentSpecTemplate {
		return &v
	}).(MachineDeploymentSpecTemplatePtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MachineDeploymentSpecTemplateOutput) Metadata() MachineDeploymentSpecTemplateMetadataPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplate) *MachineDeploymentSpecTemplateMetadata { return v.Metadata }).(MachineDeploymentSpecTemplateMetadataPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o MachineDeploymentSpecTemplateOutput) Spec() MachineDeploymentSpecTemplateSpecPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplate) *MachineDeploymentSpecTemplateSpec { return v.Spec }).(MachineDeploymentSpecTemplateSpecPtrOutput)
}

type MachineDeploymentSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplate)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplatePtrOutput) ToMachineDeploymentSpecTemplatePtrOutput() MachineDeploymentSpecTemplatePtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplatePtrOutput) ToMachineDeploymentSpecTemplatePtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplatePtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplatePtrOutput) Elem() MachineDeploymentSpecTemplateOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplate) MachineDeploymentSpecTemplate {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecTemplate
		return ret
	}).(MachineDeploymentSpecTemplateOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MachineDeploymentSpecTemplatePtrOutput) Metadata() MachineDeploymentSpecTemplateMetadataPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplate) *MachineDeploymentSpecTemplateMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MachineDeploymentSpecTemplateMetadataPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o MachineDeploymentSpecTemplatePtrOutput) Spec() MachineDeploymentSpecTemplateSpecPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplate) *MachineDeploymentSpecTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(MachineDeploymentSpecTemplateSpecPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachineDeploymentSpecTemplateMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
	//  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	//  Deprecated: This field has no function and is going to be removed in a next release.
	GenerateName *string `pulumi:"generateName"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Name *string `pulumi:"name"`
	// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Namespace *string `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	//  Deprecated: This field has no function and is going to be removed in a next release.
	OwnerReferences []MachineDeploymentSpecTemplateMetadataOwnerReferences `pulumi:"ownerReferences"`
}

// MachineDeploymentSpecTemplateMetadataInput is an input type that accepts MachineDeploymentSpecTemplateMetadataArgs and MachineDeploymentSpecTemplateMetadataOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateMetadataInput` via:
//
//	MachineDeploymentSpecTemplateMetadataArgs{...}
type MachineDeploymentSpecTemplateMetadataInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateMetadataOutput() MachineDeploymentSpecTemplateMetadataOutput
	ToMachineDeploymentSpecTemplateMetadataOutputWithContext(context.Context) MachineDeploymentSpecTemplateMetadataOutput
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachineDeploymentSpecTemplateMetadataArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
	//  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	//  Deprecated: This field has no function and is going to be removed in a next release.
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	//  Deprecated: This field has no function and is going to be removed in a next release.
	OwnerReferences MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayInput `pulumi:"ownerReferences"`
}

func (MachineDeploymentSpecTemplateMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateMetadata)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateMetadataArgs) ToMachineDeploymentSpecTemplateMetadataOutput() MachineDeploymentSpecTemplateMetadataOutput {
	return i.ToMachineDeploymentSpecTemplateMetadataOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateMetadataArgs) ToMachineDeploymentSpecTemplateMetadataOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateMetadataOutput)
}

func (i MachineDeploymentSpecTemplateMetadataArgs) ToMachineDeploymentSpecTemplateMetadataPtrOutput() MachineDeploymentSpecTemplateMetadataPtrOutput {
	return i.ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateMetadataArgs) ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateMetadataOutput).ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecTemplateMetadataPtrInput is an input type that accepts MachineDeploymentSpecTemplateMetadataArgs, MachineDeploymentSpecTemplateMetadataPtr and MachineDeploymentSpecTemplateMetadataPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateMetadataPtrInput` via:
//
//	        MachineDeploymentSpecTemplateMetadataArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecTemplateMetadataPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateMetadataPtrOutput() MachineDeploymentSpecTemplateMetadataPtrOutput
	ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(context.Context) MachineDeploymentSpecTemplateMetadataPtrOutput
}

type machineDeploymentSpecTemplateMetadataPtrType MachineDeploymentSpecTemplateMetadataArgs

func MachineDeploymentSpecTemplateMetadataPtr(v *MachineDeploymentSpecTemplateMetadataArgs) MachineDeploymentSpecTemplateMetadataPtrInput {
	return (*machineDeploymentSpecTemplateMetadataPtrType)(v)
}

func (*machineDeploymentSpecTemplateMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateMetadata)(nil)).Elem()
}

func (i *machineDeploymentSpecTemplateMetadataPtrType) ToMachineDeploymentSpecTemplateMetadataPtrOutput() MachineDeploymentSpecTemplateMetadataPtrOutput {
	return i.ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecTemplateMetadataPtrType) ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateMetadataPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachineDeploymentSpecTemplateMetadataOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateMetadata)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateMetadataOutput) ToMachineDeploymentSpecTemplateMetadataOutput() MachineDeploymentSpecTemplateMetadataOutput {
	return o
}

func (o MachineDeploymentSpecTemplateMetadataOutput) ToMachineDeploymentSpecTemplateMetadataOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataOutput {
	return o
}

func (o MachineDeploymentSpecTemplateMetadataOutput) ToMachineDeploymentSpecTemplateMetadataPtrOutput() MachineDeploymentSpecTemplateMetadataPtrOutput {
	return o.ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecTemplateMetadataOutput) ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecTemplateMetadata) *MachineDeploymentSpecTemplateMetadata {
		return &v
	}).(MachineDeploymentSpecTemplateMetadataPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o MachineDeploymentSpecTemplateMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
//	If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
//	Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadata) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o MachineDeploymentSpecTemplateMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
//	Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataOutput) OwnerReferences() MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadata) []MachineDeploymentSpecTemplateMetadataOwnerReferences {
		return v.OwnerReferences
	}).(MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput)
}

type MachineDeploymentSpecTemplateMetadataPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateMetadata)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateMetadataPtrOutput) ToMachineDeploymentSpecTemplateMetadataPtrOutput() MachineDeploymentSpecTemplateMetadataPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateMetadataPtrOutput) ToMachineDeploymentSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateMetadataPtrOutput) Elem() MachineDeploymentSpecTemplateMetadataOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateMetadata) MachineDeploymentSpecTemplateMetadata {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecTemplateMetadata
		return ret
	}).(MachineDeploymentSpecTemplateMetadataOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o MachineDeploymentSpecTemplateMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
//	If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
//	Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataPtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o MachineDeploymentSpecTemplateMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
//	Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineDeploymentSpecTemplateMetadataPtrOutput) OwnerReferences() MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateMetadata) []MachineDeploymentSpecTemplateMetadataOwnerReferences {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
type MachineDeploymentSpecTemplateMetadataAnnotations struct {
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
type MachineDeploymentSpecTemplateMetadataLabels struct {
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachineDeploymentSpecTemplateMetadataOwnerReferences struct {
	// API version of the referent.
	ApiVersion string `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller *bool `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid string `pulumi:"uid"`
}

// MachineDeploymentSpecTemplateMetadataOwnerReferencesInput is an input type that accepts MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs and MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateMetadataOwnerReferencesInput` via:
//
//	MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs{...}
type MachineDeploymentSpecTemplateMetadataOwnerReferencesInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateMetadataOwnerReferencesOutput() MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput
	ToMachineDeploymentSpecTemplateMetadataOwnerReferencesOutputWithContext(context.Context) MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion pulumi.BoolPtrInput `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name pulumi.StringInput `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesOutput() MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput {
	return i.ToMachineDeploymentSpecTemplateMetadataOwnerReferencesOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput)
}

// MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayInput is an input type that accepts MachineDeploymentSpecTemplateMetadataOwnerReferencesArray and MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayInput` via:
//
//	MachineDeploymentSpecTemplateMetadataOwnerReferencesArray{ MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs{...} }
type MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput() MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput
	ToMachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(context.Context) MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput
}

type MachineDeploymentSpecTemplateMetadataOwnerReferencesArray []MachineDeploymentSpecTemplateMetadataOwnerReferencesInput

func (MachineDeploymentSpecTemplateMetadataOwnerReferencesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDeploymentSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateMetadataOwnerReferencesArray) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput() MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput {
	return i.ToMachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateMetadataOwnerReferencesArray) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesOutput() MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput {
	return o
}

func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput {
	return o
}

// API version of the referent.
func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadataOwnerReferences) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) BlockOwnerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadataOwnerReferences) *bool { return v.BlockOwnerDeletion }).(pulumi.BoolPtrOutput)
}

// If true, this reference points to the managing controller.
func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadataOwnerReferences) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadataOwnerReferences) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadataOwnerReferences) string { return v.Name }).(pulumi.StringOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateMetadataOwnerReferences) string { return v.Uid }).(pulumi.StringOutput)
}

type MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDeploymentSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput() MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o
}

func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput) ToMachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o
}

func (o MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput) Index(i pulumi.IntInput) MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineDeploymentSpecTemplateMetadataOwnerReferences {
		return vs[0].([]MachineDeploymentSpecTemplateMetadataOwnerReferences)[vs[1].(int)]
	}).(MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachineDeploymentSpecTemplateSpec struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachineDeploymentSpecTemplateSpecBootstrap `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain *string `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachineDeploymentSpecTemplateSpecInfrastructureRef `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout *string `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID *string `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version *string `pulumi:"version"`
}

// MachineDeploymentSpecTemplateSpecInput is an input type that accepts MachineDeploymentSpecTemplateSpecArgs and MachineDeploymentSpecTemplateSpecOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecInput` via:
//
//	MachineDeploymentSpecTemplateSpecArgs{...}
type MachineDeploymentSpecTemplateSpecInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecOutput() MachineDeploymentSpecTemplateSpecOutput
	ToMachineDeploymentSpecTemplateSpecOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecOutput
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachineDeploymentSpecTemplateSpecArgs struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachineDeploymentSpecTemplateSpecBootstrapInput `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain pulumi.StringPtrInput `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachineDeploymentSpecTemplateSpecInfrastructureRefInput `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout pulumi.StringPtrInput `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID pulumi.StringPtrInput `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (MachineDeploymentSpecTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpec)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateSpecArgs) ToMachineDeploymentSpecTemplateSpecOutput() MachineDeploymentSpecTemplateSpecOutput {
	return i.ToMachineDeploymentSpecTemplateSpecOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecArgs) ToMachineDeploymentSpecTemplateSpecOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecOutput)
}

func (i MachineDeploymentSpecTemplateSpecArgs) ToMachineDeploymentSpecTemplateSpecPtrOutput() MachineDeploymentSpecTemplateSpecPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecArgs) ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecOutput).ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecTemplateSpecPtrInput is an input type that accepts MachineDeploymentSpecTemplateSpecArgs, MachineDeploymentSpecTemplateSpecPtr and MachineDeploymentSpecTemplateSpecPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecPtrInput` via:
//
//	        MachineDeploymentSpecTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecTemplateSpecPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecPtrOutput() MachineDeploymentSpecTemplateSpecPtrOutput
	ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecPtrOutput
}

type machineDeploymentSpecTemplateSpecPtrType MachineDeploymentSpecTemplateSpecArgs

func MachineDeploymentSpecTemplateSpecPtr(v *MachineDeploymentSpecTemplateSpecArgs) MachineDeploymentSpecTemplateSpecPtrInput {
	return (*machineDeploymentSpecTemplateSpecPtrType)(v)
}

func (*machineDeploymentSpecTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpec)(nil)).Elem()
}

func (i *machineDeploymentSpecTemplateSpecPtrType) ToMachineDeploymentSpecTemplateSpecPtrOutput() MachineDeploymentSpecTemplateSpecPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecTemplateSpecPtrType) ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachineDeploymentSpecTemplateSpecOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpec)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecOutput) ToMachineDeploymentSpecTemplateSpecOutput() MachineDeploymentSpecTemplateSpecOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecOutput) ToMachineDeploymentSpecTemplateSpecOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecOutput) ToMachineDeploymentSpecTemplateSpecPtrOutput() MachineDeploymentSpecTemplateSpecPtrOutput {
	return o.ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecTemplateSpecOutput) ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecTemplateSpec) *MachineDeploymentSpecTemplateSpec {
		return &v
	}).(MachineDeploymentSpecTemplateSpecPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachineDeploymentSpecTemplateSpecOutput) Bootstrap() MachineDeploymentSpecTemplateSpecBootstrapOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpec) MachineDeploymentSpecTemplateSpecBootstrap {
		return v.Bootstrap
	}).(MachineDeploymentSpecTemplateSpecBootstrapOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineDeploymentSpecTemplateSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachineDeploymentSpecTemplateSpecOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpec) *string { return v.FailureDomain }).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachineDeploymentSpecTemplateSpecOutput) InfrastructureRef() MachineDeploymentSpecTemplateSpecInfrastructureRefOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpec) MachineDeploymentSpecTemplateSpecInfrastructureRef {
		return v.InfrastructureRef
	}).(MachineDeploymentSpecTemplateSpecInfrastructureRefOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachineDeploymentSpecTemplateSpecOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpec) *string { return v.NodeDrainTimeout }).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachineDeploymentSpecTemplateSpecOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpec) *string { return v.ProviderID }).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachineDeploymentSpecTemplateSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MachineDeploymentSpecTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpec)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecPtrOutput) ToMachineDeploymentSpecTemplateSpecPtrOutput() MachineDeploymentSpecTemplateSpecPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecPtrOutput) ToMachineDeploymentSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecPtrOutput) Elem() MachineDeploymentSpecTemplateSpecOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) MachineDeploymentSpecTemplateSpec {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecTemplateSpec
		return ret
	}).(MachineDeploymentSpecTemplateSpecOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachineDeploymentSpecTemplateSpecPtrOutput) Bootstrap() MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) *MachineDeploymentSpecTemplateSpecBootstrap {
		if v == nil {
			return nil
		}
		return &v.Bootstrap
	}).(MachineDeploymentSpecTemplateSpecBootstrapPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineDeploymentSpecTemplateSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachineDeploymentSpecTemplateSpecPtrOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.FailureDomain
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachineDeploymentSpecTemplateSpecPtrOutput) InfrastructureRef() MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) *MachineDeploymentSpecTemplateSpecInfrastructureRef {
		if v == nil {
			return nil
		}
		return &v.InfrastructureRef
	}).(MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachineDeploymentSpecTemplateSpecPtrOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeDrainTimeout
	}).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachineDeploymentSpecTemplateSpecPtrOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.ProviderID
	}).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachineDeploymentSpecTemplateSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineDeploymentSpecTemplateSpecBootstrap struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef *MachineDeploymentSpecTemplateSpecBootstrapConfigRef `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data *string `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName *string `pulumi:"dataSecretName"`
}

// MachineDeploymentSpecTemplateSpecBootstrapInput is an input type that accepts MachineDeploymentSpecTemplateSpecBootstrapArgs and MachineDeploymentSpecTemplateSpecBootstrapOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecBootstrapInput` via:
//
//	MachineDeploymentSpecTemplateSpecBootstrapArgs{...}
type MachineDeploymentSpecTemplateSpecBootstrapInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecBootstrapOutput() MachineDeploymentSpecTemplateSpecBootstrapOutput
	ToMachineDeploymentSpecTemplateSpecBootstrapOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecBootstrapOutput
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineDeploymentSpecTemplateSpecBootstrapArgs struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrInput `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName pulumi.StringPtrInput `pulumi:"dataSecretName"`
}

func (MachineDeploymentSpecTemplateSpecBootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateSpecBootstrapArgs) ToMachineDeploymentSpecTemplateSpecBootstrapOutput() MachineDeploymentSpecTemplateSpecBootstrapOutput {
	return i.ToMachineDeploymentSpecTemplateSpecBootstrapOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecBootstrapArgs) ToMachineDeploymentSpecTemplateSpecBootstrapOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecBootstrapOutput)
}

func (i MachineDeploymentSpecTemplateSpecBootstrapArgs) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecBootstrapArgs) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecBootstrapOutput).ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecTemplateSpecBootstrapPtrInput is an input type that accepts MachineDeploymentSpecTemplateSpecBootstrapArgs, MachineDeploymentSpecTemplateSpecBootstrapPtr and MachineDeploymentSpecTemplateSpecBootstrapPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecBootstrapPtrInput` via:
//
//	        MachineDeploymentSpecTemplateSpecBootstrapArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecTemplateSpecBootstrapPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapPtrOutput
	ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecBootstrapPtrOutput
}

type machineDeploymentSpecTemplateSpecBootstrapPtrType MachineDeploymentSpecTemplateSpecBootstrapArgs

func MachineDeploymentSpecTemplateSpecBootstrapPtr(v *MachineDeploymentSpecTemplateSpecBootstrapArgs) MachineDeploymentSpecTemplateSpecBootstrapPtrInput {
	return (*machineDeploymentSpecTemplateSpecBootstrapPtrType)(v)
}

func (*machineDeploymentSpecTemplateSpecBootstrapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (i *machineDeploymentSpecTemplateSpecBootstrapPtrType) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecTemplateSpecBootstrapPtrType) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecBootstrapPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineDeploymentSpecTemplateSpecBootstrapOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecBootstrapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecBootstrapOutput) ToMachineDeploymentSpecTemplateSpecBootstrapOutput() MachineDeploymentSpecTemplateSpecBootstrapOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapOutput) ToMachineDeploymentSpecTemplateSpecBootstrapOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapOutput) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return o.ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecTemplateSpecBootstrapOutput) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecTemplateSpecBootstrap) *MachineDeploymentSpecTemplateSpecBootstrap {
		return &v
	}).(MachineDeploymentSpecTemplateSpecBootstrapPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachineDeploymentSpecTemplateSpecBootstrapOutput) ConfigRef() MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrap) *MachineDeploymentSpecTemplateSpecBootstrapConfigRef {
		return v.ConfigRef
	}).(MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachineDeploymentSpecTemplateSpecBootstrapOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrap) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachineDeploymentSpecTemplateSpecBootstrapOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrap) *string { return v.DataSecretName }).(pulumi.StringPtrOutput)
}

type MachineDeploymentSpecTemplateSpecBootstrapPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecBootstrapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecBootstrapPtrOutput) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapPtrOutput) ToMachineDeploymentSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapPtrOutput) Elem() MachineDeploymentSpecTemplateSpecBootstrapOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrap) MachineDeploymentSpecTemplateSpecBootstrap {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecTemplateSpecBootstrap
		return ret
	}).(MachineDeploymentSpecTemplateSpecBootstrapOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachineDeploymentSpecTemplateSpecBootstrapPtrOutput) ConfigRef() MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrap) *MachineDeploymentSpecTemplateSpecBootstrapConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachineDeploymentSpecTemplateSpecBootstrapPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachineDeploymentSpecTemplateSpecBootstrapPtrOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.DataSecretName
	}).(pulumi.StringPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineDeploymentSpecTemplateSpecBootstrapConfigRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineDeploymentSpecTemplateSpecBootstrapConfigRefInput is an input type that accepts MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs and MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecBootstrapConfigRefInput` via:
//
//	MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs{...}
type MachineDeploymentSpecTemplateSpecBootstrapConfigRefInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput
	ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput {
	return i.ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput)
}

func (i MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput).ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrInput is an input type that accepts MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs, MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtr and MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrInput` via:
//
//	        MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput
	ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput
}

type machineDeploymentSpecTemplateSpecBootstrapConfigRefPtrType MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs

func MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtr(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs) MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrInput {
	return (*machineDeploymentSpecTemplateSpecBootstrapConfigRefPtrType)(v)
}

func (*machineDeploymentSpecTemplateSpecBootstrapConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (i *machineDeploymentSpecTemplateSpecBootstrapConfigRefPtrType) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecTemplateSpecBootstrapConfigRefPtrType) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *MachineDeploymentSpecTemplateSpecBootstrapConfigRef {
		return &v
	}).(MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// API version of the referent.
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) ToMachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) Elem() MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) MachineDeploymentSpecTemplateSpecBootstrapConfigRef {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecTemplateSpecBootstrapConfigRef
		return ret
	}).(MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput)
}

// API version of the referent.
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineDeploymentSpecTemplateSpecInfrastructureRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineDeploymentSpecTemplateSpecInfrastructureRefInput is an input type that accepts MachineDeploymentSpecTemplateSpecInfrastructureRefArgs and MachineDeploymentSpecTemplateSpecInfrastructureRefOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecInfrastructureRefInput` via:
//
//	MachineDeploymentSpecTemplateSpecInfrastructureRefArgs{...}
type MachineDeploymentSpecTemplateSpecInfrastructureRefInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecInfrastructureRefOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefOutput
	ToMachineDeploymentSpecTemplateSpecInfrastructureRefOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefOutput
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineDeploymentSpecTemplateSpecInfrastructureRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineDeploymentSpecTemplateSpecInfrastructureRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (i MachineDeploymentSpecTemplateSpecInfrastructureRefArgs) ToMachineDeploymentSpecTemplateSpecInfrastructureRefOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefOutput {
	return i.ToMachineDeploymentSpecTemplateSpecInfrastructureRefOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecInfrastructureRefArgs) ToMachineDeploymentSpecTemplateSpecInfrastructureRefOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecInfrastructureRefOutput)
}

func (i MachineDeploymentSpecTemplateSpecInfrastructureRefArgs) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentSpecTemplateSpecInfrastructureRefArgs) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecInfrastructureRefOutput).ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx)
}

// MachineDeploymentSpecTemplateSpecInfrastructureRefPtrInput is an input type that accepts MachineDeploymentSpecTemplateSpecInfrastructureRefArgs, MachineDeploymentSpecTemplateSpecInfrastructureRefPtr and MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentSpecTemplateSpecInfrastructureRefPtrInput` via:
//
//	        MachineDeploymentSpecTemplateSpecInfrastructureRefArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentSpecTemplateSpecInfrastructureRefPtrInput interface {
	pulumi.Input

	ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput
	ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput
}

type machineDeploymentSpecTemplateSpecInfrastructureRefPtrType MachineDeploymentSpecTemplateSpecInfrastructureRefArgs

func MachineDeploymentSpecTemplateSpecInfrastructureRefPtr(v *MachineDeploymentSpecTemplateSpecInfrastructureRefArgs) MachineDeploymentSpecTemplateSpecInfrastructureRefPtrInput {
	return (*machineDeploymentSpecTemplateSpecInfrastructureRefPtrType)(v)
}

func (*machineDeploymentSpecTemplateSpecInfrastructureRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (i *machineDeploymentSpecTemplateSpecInfrastructureRefPtrType) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return i.ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentSpecTemplateSpecInfrastructureRefPtrType) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineDeploymentSpecTemplateSpecInfrastructureRefOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) ToMachineDeploymentSpecTemplateSpecInfrastructureRefOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) ToMachineDeploymentSpecTemplateSpecInfrastructureRefOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentSpecTemplateSpecInfrastructureRef) *MachineDeploymentSpecTemplateSpecInfrastructureRef {
		return &v
	}).(MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput)
}

// API version of the referent.
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecInfrastructureRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecInfrastructureRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecInfrastructureRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecInfrastructureRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecInfrastructureRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecInfrastructureRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentSpecTemplateSpecInfrastructureRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput() MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) ToMachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) Elem() MachineDeploymentSpecTemplateSpecInfrastructureRefOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) MachineDeploymentSpecTemplateSpecInfrastructureRef {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentSpecTemplateSpecInfrastructureRef
		return ret
	}).(MachineDeploymentSpecTemplateSpecInfrastructureRefOutput)
}

// API version of the referent.
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// MachineDeploymentStatus defines the observed state of MachineDeployment.
type MachineDeploymentStatus struct {
	// Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// The generation observed by the deployment controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
	Phase *string `pulumi:"phase"`
	// Total number of ready machines targeted by this deployment.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated machines targeted by this deployment (their labels match the selector).
	Replicas *int `pulumi:"replicas"`
	// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector *string `pulumi:"selector"`
	// Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated machines targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// MachineDeploymentStatusInput is an input type that accepts MachineDeploymentStatusArgs and MachineDeploymentStatusOutput values.
// You can construct a concrete instance of `MachineDeploymentStatusInput` via:
//
//	MachineDeploymentStatusArgs{...}
type MachineDeploymentStatusInput interface {
	pulumi.Input

	ToMachineDeploymentStatusOutput() MachineDeploymentStatusOutput
	ToMachineDeploymentStatusOutputWithContext(context.Context) MachineDeploymentStatusOutput
}

// MachineDeploymentStatus defines the observed state of MachineDeployment.
type MachineDeploymentStatusArgs struct {
	// Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// The generation observed by the deployment controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Total number of ready machines targeted by this deployment.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated machines targeted by this deployment (their labels match the selector).
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated machines targeted by this deployment that have the desired template spec.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (MachineDeploymentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentStatus)(nil)).Elem()
}

func (i MachineDeploymentStatusArgs) ToMachineDeploymentStatusOutput() MachineDeploymentStatusOutput {
	return i.ToMachineDeploymentStatusOutputWithContext(context.Background())
}

func (i MachineDeploymentStatusArgs) ToMachineDeploymentStatusOutputWithContext(ctx context.Context) MachineDeploymentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentStatusOutput)
}

func (i MachineDeploymentStatusArgs) ToMachineDeploymentStatusPtrOutput() MachineDeploymentStatusPtrOutput {
	return i.ToMachineDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i MachineDeploymentStatusArgs) ToMachineDeploymentStatusPtrOutputWithContext(ctx context.Context) MachineDeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentStatusOutput).ToMachineDeploymentStatusPtrOutputWithContext(ctx)
}

// MachineDeploymentStatusPtrInput is an input type that accepts MachineDeploymentStatusArgs, MachineDeploymentStatusPtr and MachineDeploymentStatusPtrOutput values.
// You can construct a concrete instance of `MachineDeploymentStatusPtrInput` via:
//
//	        MachineDeploymentStatusArgs{...}
//
//	or:
//
//	        nil
type MachineDeploymentStatusPtrInput interface {
	pulumi.Input

	ToMachineDeploymentStatusPtrOutput() MachineDeploymentStatusPtrOutput
	ToMachineDeploymentStatusPtrOutputWithContext(context.Context) MachineDeploymentStatusPtrOutput
}

type machineDeploymentStatusPtrType MachineDeploymentStatusArgs

func MachineDeploymentStatusPtr(v *MachineDeploymentStatusArgs) MachineDeploymentStatusPtrInput {
	return (*machineDeploymentStatusPtrType)(v)
}

func (*machineDeploymentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentStatus)(nil)).Elem()
}

func (i *machineDeploymentStatusPtrType) ToMachineDeploymentStatusPtrOutput() MachineDeploymentStatusPtrOutput {
	return i.ToMachineDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i *machineDeploymentStatusPtrType) ToMachineDeploymentStatusPtrOutputWithContext(ctx context.Context) MachineDeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDeploymentStatusPtrOutput)
}

// MachineDeploymentStatus defines the observed state of MachineDeployment.
type MachineDeploymentStatusOutput struct{ *pulumi.OutputState }

func (MachineDeploymentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDeploymentStatus)(nil)).Elem()
}

func (o MachineDeploymentStatusOutput) ToMachineDeploymentStatusOutput() MachineDeploymentStatusOutput {
	return o
}

func (o MachineDeploymentStatusOutput) ToMachineDeploymentStatusOutputWithContext(ctx context.Context) MachineDeploymentStatusOutput {
	return o
}

func (o MachineDeploymentStatusOutput) ToMachineDeploymentStatusPtrOutput() MachineDeploymentStatusPtrOutput {
	return o.ToMachineDeploymentStatusPtrOutputWithContext(context.Background())
}

func (o MachineDeploymentStatusOutput) ToMachineDeploymentStatusPtrOutputWithContext(ctx context.Context) MachineDeploymentStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineDeploymentStatus) *MachineDeploymentStatus {
		return &v
	}).(MachineDeploymentStatusPtrOutput)
}

// Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
func (o MachineDeploymentStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// The generation observed by the deployment controller.
func (o MachineDeploymentStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
func (o MachineDeploymentStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Total number of ready machines targeted by this deployment.
func (o MachineDeploymentStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment (their labels match the selector).
func (o MachineDeploymentStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o MachineDeploymentStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
func (o MachineDeploymentStatusOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment that have the desired template spec.
func (o MachineDeploymentStatusOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineDeploymentStatus) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type MachineDeploymentStatusPtrOutput struct{ *pulumi.OutputState }

func (MachineDeploymentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineDeploymentStatus)(nil)).Elem()
}

func (o MachineDeploymentStatusPtrOutput) ToMachineDeploymentStatusPtrOutput() MachineDeploymentStatusPtrOutput {
	return o
}

func (o MachineDeploymentStatusPtrOutput) ToMachineDeploymentStatusPtrOutputWithContext(ctx context.Context) MachineDeploymentStatusPtrOutput {
	return o
}

func (o MachineDeploymentStatusPtrOutput) Elem() MachineDeploymentStatusOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) MachineDeploymentStatus {
		if v != nil {
			return *v
		}
		var ret MachineDeploymentStatus
		return ret
	}).(MachineDeploymentStatusOutput)
}

// Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
func (o MachineDeploymentStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// The generation observed by the deployment controller.
func (o MachineDeploymentStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
func (o MachineDeploymentStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Total number of ready machines targeted by this deployment.
func (o MachineDeploymentStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment (their labels match the selector).
func (o MachineDeploymentStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o MachineDeploymentStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
func (o MachineDeploymentStatusPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment that have the desired template spec.
func (o MachineDeploymentStatusPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

// MachineHealthCheck is the Schema for the machinehealthchecks API.
//
//	Deprecated: This type will be removed in one of the next releases.
type MachineHealthCheckType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of machine health check policy
	Spec *MachineHealthCheckSpec `pulumi:"spec"`
	// Most recently observed status of MachineHealthCheck resource
	Status *MachineHealthCheckStatus `pulumi:"status"`
}

type MachineHealthCheckMetadata struct {
}

// Specification of machine health check policy
type MachineHealthCheckSpec struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
	MaxUnhealthy interface{} `pulumi:"maxUnhealthy"`
	// Machines older than this duration without a node will be considered to have failed and will be remediated.
	NodeStartupTimeout *string `pulumi:"nodeStartupTimeout"`
	// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.
	//  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
	RemediationTemplate *MachineHealthCheckSpecRemediationTemplate `pulumi:"remediationTemplate"`
	// Label selector to match machines whose health will be exercised
	Selector MachineHealthCheckSpecSelector `pulumi:"selector"`
	// UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
	UnhealthyConditions []MachineHealthCheckSpecUnhealthyConditions `pulumi:"unhealthyConditions"`
}

// MachineHealthCheckSpecInput is an input type that accepts MachineHealthCheckSpecArgs and MachineHealthCheckSpecOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecInput` via:
//
//	MachineHealthCheckSpecArgs{...}
type MachineHealthCheckSpecInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecOutput() MachineHealthCheckSpecOutput
	ToMachineHealthCheckSpecOutputWithContext(context.Context) MachineHealthCheckSpecOutput
}

// Specification of machine health check policy
type MachineHealthCheckSpecArgs struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
	MaxUnhealthy pulumi.Input `pulumi:"maxUnhealthy"`
	// Machines older than this duration without a node will be considered to have failed and will be remediated.
	NodeStartupTimeout pulumi.StringPtrInput `pulumi:"nodeStartupTimeout"`
	// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.
	//  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
	RemediationTemplate MachineHealthCheckSpecRemediationTemplatePtrInput `pulumi:"remediationTemplate"`
	// Label selector to match machines whose health will be exercised
	Selector MachineHealthCheckSpecSelectorInput `pulumi:"selector"`
	// UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
	UnhealthyConditions MachineHealthCheckSpecUnhealthyConditionsArrayInput `pulumi:"unhealthyConditions"`
}

func (MachineHealthCheckSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpec)(nil)).Elem()
}

func (i MachineHealthCheckSpecArgs) ToMachineHealthCheckSpecOutput() MachineHealthCheckSpecOutput {
	return i.ToMachineHealthCheckSpecOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecArgs) ToMachineHealthCheckSpecOutputWithContext(ctx context.Context) MachineHealthCheckSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecOutput)
}

func (i MachineHealthCheckSpecArgs) ToMachineHealthCheckSpecPtrOutput() MachineHealthCheckSpecPtrOutput {
	return i.ToMachineHealthCheckSpecPtrOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecArgs) ToMachineHealthCheckSpecPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecOutput).ToMachineHealthCheckSpecPtrOutputWithContext(ctx)
}

// MachineHealthCheckSpecPtrInput is an input type that accepts MachineHealthCheckSpecArgs, MachineHealthCheckSpecPtr and MachineHealthCheckSpecPtrOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecPtrInput` via:
//
//	        MachineHealthCheckSpecArgs{...}
//
//	or:
//
//	        nil
type MachineHealthCheckSpecPtrInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecPtrOutput() MachineHealthCheckSpecPtrOutput
	ToMachineHealthCheckSpecPtrOutputWithContext(context.Context) MachineHealthCheckSpecPtrOutput
}

type machineHealthCheckSpecPtrType MachineHealthCheckSpecArgs

func MachineHealthCheckSpecPtr(v *MachineHealthCheckSpecArgs) MachineHealthCheckSpecPtrInput {
	return (*machineHealthCheckSpecPtrType)(v)
}

func (*machineHealthCheckSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckSpec)(nil)).Elem()
}

func (i *machineHealthCheckSpecPtrType) ToMachineHealthCheckSpecPtrOutput() MachineHealthCheckSpecPtrOutput {
	return i.ToMachineHealthCheckSpecPtrOutputWithContext(context.Background())
}

func (i *machineHealthCheckSpecPtrType) ToMachineHealthCheckSpecPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecPtrOutput)
}

// Specification of machine health check policy
type MachineHealthCheckSpecOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpec)(nil)).Elem()
}

func (o MachineHealthCheckSpecOutput) ToMachineHealthCheckSpecOutput() MachineHealthCheckSpecOutput {
	return o
}

func (o MachineHealthCheckSpecOutput) ToMachineHealthCheckSpecOutputWithContext(ctx context.Context) MachineHealthCheckSpecOutput {
	return o
}

func (o MachineHealthCheckSpecOutput) ToMachineHealthCheckSpecPtrOutput() MachineHealthCheckSpecPtrOutput {
	return o.ToMachineHealthCheckSpecPtrOutputWithContext(context.Background())
}

func (o MachineHealthCheckSpecOutput) ToMachineHealthCheckSpecPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineHealthCheckSpec) *MachineHealthCheckSpec {
		return &v
	}).(MachineHealthCheckSpecPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineHealthCheckSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
func (o MachineHealthCheckSpecOutput) MaxUnhealthy() pulumi.AnyOutput {
	return o.ApplyT(func(v MachineHealthCheckSpec) interface{} { return v.MaxUnhealthy }).(pulumi.AnyOutput)
}

// Machines older than this duration without a node will be considered to have failed and will be remediated.
func (o MachineHealthCheckSpecOutput) NodeStartupTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpec) *string { return v.NodeStartupTimeout }).(pulumi.StringPtrOutput)
}

// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.
//
//	This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
func (o MachineHealthCheckSpecOutput) RemediationTemplate() MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpec) *MachineHealthCheckSpecRemediationTemplate {
		return v.RemediationTemplate
	}).(MachineHealthCheckSpecRemediationTemplatePtrOutput)
}

// Label selector to match machines whose health will be exercised
func (o MachineHealthCheckSpecOutput) Selector() MachineHealthCheckSpecSelectorOutput {
	return o.ApplyT(func(v MachineHealthCheckSpec) MachineHealthCheckSpecSelector { return v.Selector }).(MachineHealthCheckSpecSelectorOutput)
}

// UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
func (o MachineHealthCheckSpecOutput) UnhealthyConditions() MachineHealthCheckSpecUnhealthyConditionsArrayOutput {
	return o.ApplyT(func(v MachineHealthCheckSpec) []MachineHealthCheckSpecUnhealthyConditions {
		return v.UnhealthyConditions
	}).(MachineHealthCheckSpecUnhealthyConditionsArrayOutput)
}

type MachineHealthCheckSpecPtrOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckSpec)(nil)).Elem()
}

func (o MachineHealthCheckSpecPtrOutput) ToMachineHealthCheckSpecPtrOutput() MachineHealthCheckSpecPtrOutput {
	return o
}

func (o MachineHealthCheckSpecPtrOutput) ToMachineHealthCheckSpecPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecPtrOutput {
	return o
}

func (o MachineHealthCheckSpecPtrOutput) Elem() MachineHealthCheckSpecOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpec) MachineHealthCheckSpec {
		if v != nil {
			return *v
		}
		var ret MachineHealthCheckSpec
		return ret
	}).(MachineHealthCheckSpecOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineHealthCheckSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
func (o MachineHealthCheckSpecPtrOutput) MaxUnhealthy() pulumi.AnyOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthy
	}).(pulumi.AnyOutput)
}

// Machines older than this duration without a node will be considered to have failed and will be remediated.
func (o MachineHealthCheckSpecPtrOutput) NodeStartupTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeStartupTimeout
	}).(pulumi.StringPtrOutput)
}

// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.
//
//	This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
func (o MachineHealthCheckSpecPtrOutput) RemediationTemplate() MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpec) *MachineHealthCheckSpecRemediationTemplate {
		if v == nil {
			return nil
		}
		return v.RemediationTemplate
	}).(MachineHealthCheckSpecRemediationTemplatePtrOutput)
}

// Label selector to match machines whose health will be exercised
func (o MachineHealthCheckSpecPtrOutput) Selector() MachineHealthCheckSpecSelectorPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpec) *MachineHealthCheckSpecSelector {
		if v == nil {
			return nil
		}
		return &v.Selector
	}).(MachineHealthCheckSpecSelectorPtrOutput)
}

// UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
func (o MachineHealthCheckSpecPtrOutput) UnhealthyConditions() MachineHealthCheckSpecUnhealthyConditionsArrayOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpec) []MachineHealthCheckSpecUnhealthyConditions {
		if v == nil {
			return nil
		}
		return v.UnhealthyConditions
	}).(MachineHealthCheckSpecUnhealthyConditionsArrayOutput)
}

// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.
//
//	This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
type MachineHealthCheckSpecRemediationTemplate struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineHealthCheckSpecRemediationTemplateInput is an input type that accepts MachineHealthCheckSpecRemediationTemplateArgs and MachineHealthCheckSpecRemediationTemplateOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecRemediationTemplateInput` via:
//
//	MachineHealthCheckSpecRemediationTemplateArgs{...}
type MachineHealthCheckSpecRemediationTemplateInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecRemediationTemplateOutput() MachineHealthCheckSpecRemediationTemplateOutput
	ToMachineHealthCheckSpecRemediationTemplateOutputWithContext(context.Context) MachineHealthCheckSpecRemediationTemplateOutput
}

// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.
//
//	This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
type MachineHealthCheckSpecRemediationTemplateArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineHealthCheckSpecRemediationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecRemediationTemplate)(nil)).Elem()
}

func (i MachineHealthCheckSpecRemediationTemplateArgs) ToMachineHealthCheckSpecRemediationTemplateOutput() MachineHealthCheckSpecRemediationTemplateOutput {
	return i.ToMachineHealthCheckSpecRemediationTemplateOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecRemediationTemplateArgs) ToMachineHealthCheckSpecRemediationTemplateOutputWithContext(ctx context.Context) MachineHealthCheckSpecRemediationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecRemediationTemplateOutput)
}

func (i MachineHealthCheckSpecRemediationTemplateArgs) ToMachineHealthCheckSpecRemediationTemplatePtrOutput() MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return i.ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecRemediationTemplateArgs) ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecRemediationTemplateOutput).ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(ctx)
}

// MachineHealthCheckSpecRemediationTemplatePtrInput is an input type that accepts MachineHealthCheckSpecRemediationTemplateArgs, MachineHealthCheckSpecRemediationTemplatePtr and MachineHealthCheckSpecRemediationTemplatePtrOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecRemediationTemplatePtrInput` via:
//
//	        MachineHealthCheckSpecRemediationTemplateArgs{...}
//
//	or:
//
//	        nil
type MachineHealthCheckSpecRemediationTemplatePtrInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecRemediationTemplatePtrOutput() MachineHealthCheckSpecRemediationTemplatePtrOutput
	ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(context.Context) MachineHealthCheckSpecRemediationTemplatePtrOutput
}

type machineHealthCheckSpecRemediationTemplatePtrType MachineHealthCheckSpecRemediationTemplateArgs

func MachineHealthCheckSpecRemediationTemplatePtr(v *MachineHealthCheckSpecRemediationTemplateArgs) MachineHealthCheckSpecRemediationTemplatePtrInput {
	return (*machineHealthCheckSpecRemediationTemplatePtrType)(v)
}

func (*machineHealthCheckSpecRemediationTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckSpecRemediationTemplate)(nil)).Elem()
}

func (i *machineHealthCheckSpecRemediationTemplatePtrType) ToMachineHealthCheckSpecRemediationTemplatePtrOutput() MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return i.ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(context.Background())
}

func (i *machineHealthCheckSpecRemediationTemplatePtrType) ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecRemediationTemplatePtrOutput)
}

// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.
//
//	This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
type MachineHealthCheckSpecRemediationTemplateOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecRemediationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecRemediationTemplate)(nil)).Elem()
}

func (o MachineHealthCheckSpecRemediationTemplateOutput) ToMachineHealthCheckSpecRemediationTemplateOutput() MachineHealthCheckSpecRemediationTemplateOutput {
	return o
}

func (o MachineHealthCheckSpecRemediationTemplateOutput) ToMachineHealthCheckSpecRemediationTemplateOutputWithContext(ctx context.Context) MachineHealthCheckSpecRemediationTemplateOutput {
	return o
}

func (o MachineHealthCheckSpecRemediationTemplateOutput) ToMachineHealthCheckSpecRemediationTemplatePtrOutput() MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return o.ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(context.Background())
}

func (o MachineHealthCheckSpecRemediationTemplateOutput) ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineHealthCheckSpecRemediationTemplate) *MachineHealthCheckSpecRemediationTemplate {
		return &v
	}).(MachineHealthCheckSpecRemediationTemplatePtrOutput)
}

// API version of the referent.
func (o MachineHealthCheckSpecRemediationTemplateOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecRemediationTemplate) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineHealthCheckSpecRemediationTemplateOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecRemediationTemplate) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineHealthCheckSpecRemediationTemplateOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecRemediationTemplate) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineHealthCheckSpecRemediationTemplateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecRemediationTemplate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineHealthCheckSpecRemediationTemplateOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecRemediationTemplate) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineHealthCheckSpecRemediationTemplateOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecRemediationTemplate) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineHealthCheckSpecRemediationTemplateOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecRemediationTemplate) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineHealthCheckSpecRemediationTemplatePtrOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecRemediationTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckSpecRemediationTemplate)(nil)).Elem()
}

func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) ToMachineHealthCheckSpecRemediationTemplatePtrOutput() MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return o
}

func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) ToMachineHealthCheckSpecRemediationTemplatePtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecRemediationTemplatePtrOutput {
	return o
}

func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) Elem() MachineHealthCheckSpecRemediationTemplateOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) MachineHealthCheckSpecRemediationTemplate {
		if v != nil {
			return *v
		}
		var ret MachineHealthCheckSpecRemediationTemplate
		return ret
	}).(MachineHealthCheckSpecRemediationTemplateOutput)
}

// API version of the referent.
func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineHealthCheckSpecRemediationTemplatePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecRemediationTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Label selector to match machines whose health will be exercised
type MachineHealthCheckSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []MachineHealthCheckSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// MachineHealthCheckSpecSelectorInput is an input type that accepts MachineHealthCheckSpecSelectorArgs and MachineHealthCheckSpecSelectorOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecSelectorInput` via:
//
//	MachineHealthCheckSpecSelectorArgs{...}
type MachineHealthCheckSpecSelectorInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecSelectorOutput() MachineHealthCheckSpecSelectorOutput
	ToMachineHealthCheckSpecSelectorOutputWithContext(context.Context) MachineHealthCheckSpecSelectorOutput
}

// Label selector to match machines whose health will be exercised
type MachineHealthCheckSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions MachineHealthCheckSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (MachineHealthCheckSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecSelector)(nil)).Elem()
}

func (i MachineHealthCheckSpecSelectorArgs) ToMachineHealthCheckSpecSelectorOutput() MachineHealthCheckSpecSelectorOutput {
	return i.ToMachineHealthCheckSpecSelectorOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecSelectorArgs) ToMachineHealthCheckSpecSelectorOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecSelectorOutput)
}

func (i MachineHealthCheckSpecSelectorArgs) ToMachineHealthCheckSpecSelectorPtrOutput() MachineHealthCheckSpecSelectorPtrOutput {
	return i.ToMachineHealthCheckSpecSelectorPtrOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecSelectorArgs) ToMachineHealthCheckSpecSelectorPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecSelectorOutput).ToMachineHealthCheckSpecSelectorPtrOutputWithContext(ctx)
}

// MachineHealthCheckSpecSelectorPtrInput is an input type that accepts MachineHealthCheckSpecSelectorArgs, MachineHealthCheckSpecSelectorPtr and MachineHealthCheckSpecSelectorPtrOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecSelectorPtrInput` via:
//
//	        MachineHealthCheckSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type MachineHealthCheckSpecSelectorPtrInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecSelectorPtrOutput() MachineHealthCheckSpecSelectorPtrOutput
	ToMachineHealthCheckSpecSelectorPtrOutputWithContext(context.Context) MachineHealthCheckSpecSelectorPtrOutput
}

type machineHealthCheckSpecSelectorPtrType MachineHealthCheckSpecSelectorArgs

func MachineHealthCheckSpecSelectorPtr(v *MachineHealthCheckSpecSelectorArgs) MachineHealthCheckSpecSelectorPtrInput {
	return (*machineHealthCheckSpecSelectorPtrType)(v)
}

func (*machineHealthCheckSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckSpecSelector)(nil)).Elem()
}

func (i *machineHealthCheckSpecSelectorPtrType) ToMachineHealthCheckSpecSelectorPtrOutput() MachineHealthCheckSpecSelectorPtrOutput {
	return i.ToMachineHealthCheckSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *machineHealthCheckSpecSelectorPtrType) ToMachineHealthCheckSpecSelectorPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecSelectorPtrOutput)
}

// Label selector to match machines whose health will be exercised
type MachineHealthCheckSpecSelectorOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecSelector)(nil)).Elem()
}

func (o MachineHealthCheckSpecSelectorOutput) ToMachineHealthCheckSpecSelectorOutput() MachineHealthCheckSpecSelectorOutput {
	return o
}

func (o MachineHealthCheckSpecSelectorOutput) ToMachineHealthCheckSpecSelectorOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorOutput {
	return o
}

func (o MachineHealthCheckSpecSelectorOutput) ToMachineHealthCheckSpecSelectorPtrOutput() MachineHealthCheckSpecSelectorPtrOutput {
	return o.ToMachineHealthCheckSpecSelectorPtrOutputWithContext(context.Background())
}

func (o MachineHealthCheckSpecSelectorOutput) ToMachineHealthCheckSpecSelectorPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineHealthCheckSpecSelector) *MachineHealthCheckSpecSelector {
		return &v
	}).(MachineHealthCheckSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineHealthCheckSpecSelectorOutput) MatchExpressions() MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecSelector) []MachineHealthCheckSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineHealthCheckSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type MachineHealthCheckSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckSpecSelector)(nil)).Elem()
}

func (o MachineHealthCheckSpecSelectorPtrOutput) ToMachineHealthCheckSpecSelectorPtrOutput() MachineHealthCheckSpecSelectorPtrOutput {
	return o
}

func (o MachineHealthCheckSpecSelectorPtrOutput) ToMachineHealthCheckSpecSelectorPtrOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorPtrOutput {
	return o
}

func (o MachineHealthCheckSpecSelectorPtrOutput) Elem() MachineHealthCheckSpecSelectorOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecSelector) MachineHealthCheckSpecSelector {
		if v != nil {
			return *v
		}
		var ret MachineHealthCheckSpecSelector
		return ret
	}).(MachineHealthCheckSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineHealthCheckSpecSelectorPtrOutput) MatchExpressions() MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecSelector) []MachineHealthCheckSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineHealthCheckSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineHealthCheckSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineHealthCheckSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// MachineHealthCheckSpecSelectorMatchExpressionsInput is an input type that accepts MachineHealthCheckSpecSelectorMatchExpressionsArgs and MachineHealthCheckSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecSelectorMatchExpressionsInput` via:
//
//	MachineHealthCheckSpecSelectorMatchExpressionsArgs{...}
type MachineHealthCheckSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecSelectorMatchExpressionsOutput() MachineHealthCheckSpecSelectorMatchExpressionsOutput
	ToMachineHealthCheckSpecSelectorMatchExpressionsOutputWithContext(context.Context) MachineHealthCheckSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineHealthCheckSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MachineHealthCheckSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineHealthCheckSpecSelectorMatchExpressionsArgs) ToMachineHealthCheckSpecSelectorMatchExpressionsOutput() MachineHealthCheckSpecSelectorMatchExpressionsOutput {
	return i.ToMachineHealthCheckSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecSelectorMatchExpressionsArgs) ToMachineHealthCheckSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecSelectorMatchExpressionsOutput)
}

// MachineHealthCheckSpecSelectorMatchExpressionsArrayInput is an input type that accepts MachineHealthCheckSpecSelectorMatchExpressionsArray and MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecSelectorMatchExpressionsArrayInput` via:
//
//	MachineHealthCheckSpecSelectorMatchExpressionsArray{ MachineHealthCheckSpecSelectorMatchExpressionsArgs{...} }
type MachineHealthCheckSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecSelectorMatchExpressionsArrayOutput() MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput
	ToMachineHealthCheckSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput
}

type MachineHealthCheckSpecSelectorMatchExpressionsArray []MachineHealthCheckSpecSelectorMatchExpressionsInput

func (MachineHealthCheckSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineHealthCheckSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineHealthCheckSpecSelectorMatchExpressionsArray) ToMachineHealthCheckSpecSelectorMatchExpressionsArrayOutput() MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput {
	return i.ToMachineHealthCheckSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecSelectorMatchExpressionsArray) ToMachineHealthCheckSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineHealthCheckSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineHealthCheckSpecSelectorMatchExpressionsOutput) ToMachineHealthCheckSpecSelectorMatchExpressionsOutput() MachineHealthCheckSpecSelectorMatchExpressionsOutput {
	return o
}

func (o MachineHealthCheckSpecSelectorMatchExpressionsOutput) ToMachineHealthCheckSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o MachineHealthCheckSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o MachineHealthCheckSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o MachineHealthCheckSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineHealthCheckSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput) ToMachineHealthCheckSpecSelectorMatchExpressionsArrayOutput() MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput) ToMachineHealthCheckSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) MachineHealthCheckSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineHealthCheckSpecSelectorMatchExpressions {
		return vs[0].([]MachineHealthCheckSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(MachineHealthCheckSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MachineHealthCheckSpecSelectorMatchLabels struct {
}

// UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
type MachineHealthCheckSpecUnhealthyConditions struct {
	Status  string `pulumi:"status"`
	Timeout string `pulumi:"timeout"`
	Type    string `pulumi:"type"`
}

// MachineHealthCheckSpecUnhealthyConditionsInput is an input type that accepts MachineHealthCheckSpecUnhealthyConditionsArgs and MachineHealthCheckSpecUnhealthyConditionsOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecUnhealthyConditionsInput` via:
//
//	MachineHealthCheckSpecUnhealthyConditionsArgs{...}
type MachineHealthCheckSpecUnhealthyConditionsInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecUnhealthyConditionsOutput() MachineHealthCheckSpecUnhealthyConditionsOutput
	ToMachineHealthCheckSpecUnhealthyConditionsOutputWithContext(context.Context) MachineHealthCheckSpecUnhealthyConditionsOutput
}

// UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
type MachineHealthCheckSpecUnhealthyConditionsArgs struct {
	Status  pulumi.StringInput `pulumi:"status"`
	Timeout pulumi.StringInput `pulumi:"timeout"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (MachineHealthCheckSpecUnhealthyConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecUnhealthyConditions)(nil)).Elem()
}

func (i MachineHealthCheckSpecUnhealthyConditionsArgs) ToMachineHealthCheckSpecUnhealthyConditionsOutput() MachineHealthCheckSpecUnhealthyConditionsOutput {
	return i.ToMachineHealthCheckSpecUnhealthyConditionsOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecUnhealthyConditionsArgs) ToMachineHealthCheckSpecUnhealthyConditionsOutputWithContext(ctx context.Context) MachineHealthCheckSpecUnhealthyConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecUnhealthyConditionsOutput)
}

// MachineHealthCheckSpecUnhealthyConditionsArrayInput is an input type that accepts MachineHealthCheckSpecUnhealthyConditionsArray and MachineHealthCheckSpecUnhealthyConditionsArrayOutput values.
// You can construct a concrete instance of `MachineHealthCheckSpecUnhealthyConditionsArrayInput` via:
//
//	MachineHealthCheckSpecUnhealthyConditionsArray{ MachineHealthCheckSpecUnhealthyConditionsArgs{...} }
type MachineHealthCheckSpecUnhealthyConditionsArrayInput interface {
	pulumi.Input

	ToMachineHealthCheckSpecUnhealthyConditionsArrayOutput() MachineHealthCheckSpecUnhealthyConditionsArrayOutput
	ToMachineHealthCheckSpecUnhealthyConditionsArrayOutputWithContext(context.Context) MachineHealthCheckSpecUnhealthyConditionsArrayOutput
}

type MachineHealthCheckSpecUnhealthyConditionsArray []MachineHealthCheckSpecUnhealthyConditionsInput

func (MachineHealthCheckSpecUnhealthyConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineHealthCheckSpecUnhealthyConditions)(nil)).Elem()
}

func (i MachineHealthCheckSpecUnhealthyConditionsArray) ToMachineHealthCheckSpecUnhealthyConditionsArrayOutput() MachineHealthCheckSpecUnhealthyConditionsArrayOutput {
	return i.ToMachineHealthCheckSpecUnhealthyConditionsArrayOutputWithContext(context.Background())
}

func (i MachineHealthCheckSpecUnhealthyConditionsArray) ToMachineHealthCheckSpecUnhealthyConditionsArrayOutputWithContext(ctx context.Context) MachineHealthCheckSpecUnhealthyConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckSpecUnhealthyConditionsArrayOutput)
}

// UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
type MachineHealthCheckSpecUnhealthyConditionsOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecUnhealthyConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckSpecUnhealthyConditions)(nil)).Elem()
}

func (o MachineHealthCheckSpecUnhealthyConditionsOutput) ToMachineHealthCheckSpecUnhealthyConditionsOutput() MachineHealthCheckSpecUnhealthyConditionsOutput {
	return o
}

func (o MachineHealthCheckSpecUnhealthyConditionsOutput) ToMachineHealthCheckSpecUnhealthyConditionsOutputWithContext(ctx context.Context) MachineHealthCheckSpecUnhealthyConditionsOutput {
	return o
}

func (o MachineHealthCheckSpecUnhealthyConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecUnhealthyConditions) string { return v.Status }).(pulumi.StringOutput)
}

func (o MachineHealthCheckSpecUnhealthyConditionsOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecUnhealthyConditions) string { return v.Timeout }).(pulumi.StringOutput)
}

func (o MachineHealthCheckSpecUnhealthyConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckSpecUnhealthyConditions) string { return v.Type }).(pulumi.StringOutput)
}

type MachineHealthCheckSpecUnhealthyConditionsArrayOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckSpecUnhealthyConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineHealthCheckSpecUnhealthyConditions)(nil)).Elem()
}

func (o MachineHealthCheckSpecUnhealthyConditionsArrayOutput) ToMachineHealthCheckSpecUnhealthyConditionsArrayOutput() MachineHealthCheckSpecUnhealthyConditionsArrayOutput {
	return o
}

func (o MachineHealthCheckSpecUnhealthyConditionsArrayOutput) ToMachineHealthCheckSpecUnhealthyConditionsArrayOutputWithContext(ctx context.Context) MachineHealthCheckSpecUnhealthyConditionsArrayOutput {
	return o
}

func (o MachineHealthCheckSpecUnhealthyConditionsArrayOutput) Index(i pulumi.IntInput) MachineHealthCheckSpecUnhealthyConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineHealthCheckSpecUnhealthyConditions {
		return vs[0].([]MachineHealthCheckSpecUnhealthyConditions)[vs[1].(int)]
	}).(MachineHealthCheckSpecUnhealthyConditionsOutput)
}

// Most recently observed status of MachineHealthCheck resource
type MachineHealthCheckStatus struct {
	// Conditions defines current service state of the MachineHealthCheck.
	Conditions []MachineHealthCheckStatusConditions `pulumi:"conditions"`
	// total number of healthy machines counted by this machine health check
	CurrentHealthy *int `pulumi:"currentHealthy"`
	// total number of machines counted by this machine health check
	ExpectedMachines *int `pulumi:"expectedMachines"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
	RemediationsAllowed *int `pulumi:"remediationsAllowed"`
	// Targets shows the current list of machines the machine health check is watching
	Targets []string `pulumi:"targets"`
}

// MachineHealthCheckStatusInput is an input type that accepts MachineHealthCheckStatusArgs and MachineHealthCheckStatusOutput values.
// You can construct a concrete instance of `MachineHealthCheckStatusInput` via:
//
//	MachineHealthCheckStatusArgs{...}
type MachineHealthCheckStatusInput interface {
	pulumi.Input

	ToMachineHealthCheckStatusOutput() MachineHealthCheckStatusOutput
	ToMachineHealthCheckStatusOutputWithContext(context.Context) MachineHealthCheckStatusOutput
}

// Most recently observed status of MachineHealthCheck resource
type MachineHealthCheckStatusArgs struct {
	// Conditions defines current service state of the MachineHealthCheck.
	Conditions MachineHealthCheckStatusConditionsArrayInput `pulumi:"conditions"`
	// total number of healthy machines counted by this machine health check
	CurrentHealthy pulumi.IntPtrInput `pulumi:"currentHealthy"`
	// total number of machines counted by this machine health check
	ExpectedMachines pulumi.IntPtrInput `pulumi:"expectedMachines"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
	RemediationsAllowed pulumi.IntPtrInput `pulumi:"remediationsAllowed"`
	// Targets shows the current list of machines the machine health check is watching
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (MachineHealthCheckStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckStatus)(nil)).Elem()
}

func (i MachineHealthCheckStatusArgs) ToMachineHealthCheckStatusOutput() MachineHealthCheckStatusOutput {
	return i.ToMachineHealthCheckStatusOutputWithContext(context.Background())
}

func (i MachineHealthCheckStatusArgs) ToMachineHealthCheckStatusOutputWithContext(ctx context.Context) MachineHealthCheckStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckStatusOutput)
}

func (i MachineHealthCheckStatusArgs) ToMachineHealthCheckStatusPtrOutput() MachineHealthCheckStatusPtrOutput {
	return i.ToMachineHealthCheckStatusPtrOutputWithContext(context.Background())
}

func (i MachineHealthCheckStatusArgs) ToMachineHealthCheckStatusPtrOutputWithContext(ctx context.Context) MachineHealthCheckStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckStatusOutput).ToMachineHealthCheckStatusPtrOutputWithContext(ctx)
}

// MachineHealthCheckStatusPtrInput is an input type that accepts MachineHealthCheckStatusArgs, MachineHealthCheckStatusPtr and MachineHealthCheckStatusPtrOutput values.
// You can construct a concrete instance of `MachineHealthCheckStatusPtrInput` via:
//
//	        MachineHealthCheckStatusArgs{...}
//
//	or:
//
//	        nil
type MachineHealthCheckStatusPtrInput interface {
	pulumi.Input

	ToMachineHealthCheckStatusPtrOutput() MachineHealthCheckStatusPtrOutput
	ToMachineHealthCheckStatusPtrOutputWithContext(context.Context) MachineHealthCheckStatusPtrOutput
}

type machineHealthCheckStatusPtrType MachineHealthCheckStatusArgs

func MachineHealthCheckStatusPtr(v *MachineHealthCheckStatusArgs) MachineHealthCheckStatusPtrInput {
	return (*machineHealthCheckStatusPtrType)(v)
}

func (*machineHealthCheckStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckStatus)(nil)).Elem()
}

func (i *machineHealthCheckStatusPtrType) ToMachineHealthCheckStatusPtrOutput() MachineHealthCheckStatusPtrOutput {
	return i.ToMachineHealthCheckStatusPtrOutputWithContext(context.Background())
}

func (i *machineHealthCheckStatusPtrType) ToMachineHealthCheckStatusPtrOutputWithContext(ctx context.Context) MachineHealthCheckStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckStatusPtrOutput)
}

// Most recently observed status of MachineHealthCheck resource
type MachineHealthCheckStatusOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckStatus)(nil)).Elem()
}

func (o MachineHealthCheckStatusOutput) ToMachineHealthCheckStatusOutput() MachineHealthCheckStatusOutput {
	return o
}

func (o MachineHealthCheckStatusOutput) ToMachineHealthCheckStatusOutputWithContext(ctx context.Context) MachineHealthCheckStatusOutput {
	return o
}

func (o MachineHealthCheckStatusOutput) ToMachineHealthCheckStatusPtrOutput() MachineHealthCheckStatusPtrOutput {
	return o.ToMachineHealthCheckStatusPtrOutputWithContext(context.Background())
}

func (o MachineHealthCheckStatusOutput) ToMachineHealthCheckStatusPtrOutputWithContext(ctx context.Context) MachineHealthCheckStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineHealthCheckStatus) *MachineHealthCheckStatus {
		return &v
	}).(MachineHealthCheckStatusPtrOutput)
}

// Conditions defines current service state of the MachineHealthCheck.
func (o MachineHealthCheckStatusOutput) Conditions() MachineHealthCheckStatusConditionsArrayOutput {
	return o.ApplyT(func(v MachineHealthCheckStatus) []MachineHealthCheckStatusConditions { return v.Conditions }).(MachineHealthCheckStatusConditionsArrayOutput)
}

// total number of healthy machines counted by this machine health check
func (o MachineHealthCheckStatusOutput) CurrentHealthy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatus) *int { return v.CurrentHealthy }).(pulumi.IntPtrOutput)
}

// total number of machines counted by this machine health check
func (o MachineHealthCheckStatusOutput) ExpectedMachines() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatus) *int { return v.ExpectedMachines }).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o MachineHealthCheckStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
func (o MachineHealthCheckStatusOutput) RemediationsAllowed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatus) *int { return v.RemediationsAllowed }).(pulumi.IntPtrOutput)
}

// Targets shows the current list of machines the machine health check is watching
func (o MachineHealthCheckStatusOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineHealthCheckStatus) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type MachineHealthCheckStatusPtrOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineHealthCheckStatus)(nil)).Elem()
}

func (o MachineHealthCheckStatusPtrOutput) ToMachineHealthCheckStatusPtrOutput() MachineHealthCheckStatusPtrOutput {
	return o
}

func (o MachineHealthCheckStatusPtrOutput) ToMachineHealthCheckStatusPtrOutputWithContext(ctx context.Context) MachineHealthCheckStatusPtrOutput {
	return o
}

func (o MachineHealthCheckStatusPtrOutput) Elem() MachineHealthCheckStatusOutput {
	return o.ApplyT(func(v *MachineHealthCheckStatus) MachineHealthCheckStatus {
		if v != nil {
			return *v
		}
		var ret MachineHealthCheckStatus
		return ret
	}).(MachineHealthCheckStatusOutput)
}

// Conditions defines current service state of the MachineHealthCheck.
func (o MachineHealthCheckStatusPtrOutput) Conditions() MachineHealthCheckStatusConditionsArrayOutput {
	return o.ApplyT(func(v *MachineHealthCheckStatus) []MachineHealthCheckStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(MachineHealthCheckStatusConditionsArrayOutput)
}

// total number of healthy machines counted by this machine health check
func (o MachineHealthCheckStatusPtrOutput) CurrentHealthy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckStatus) *int {
		if v == nil {
			return nil
		}
		return v.CurrentHealthy
	}).(pulumi.IntPtrOutput)
}

// total number of machines counted by this machine health check
func (o MachineHealthCheckStatusPtrOutput) ExpectedMachines() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckStatus) *int {
		if v == nil {
			return nil
		}
		return v.ExpectedMachines
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o MachineHealthCheckStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
func (o MachineHealthCheckStatusPtrOutput) RemediationsAllowed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineHealthCheckStatus) *int {
		if v == nil {
			return nil
		}
		return v.RemediationsAllowed
	}).(pulumi.IntPtrOutput)
}

// Targets shows the current list of machines the machine health check is watching
func (o MachineHealthCheckStatusPtrOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MachineHealthCheckStatus) []string {
		if v == nil {
			return nil
		}
		return v.Targets
	}).(pulumi.StringArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type MachineHealthCheckStatusConditions struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type string `pulumi:"type"`
}

// MachineHealthCheckStatusConditionsInput is an input type that accepts MachineHealthCheckStatusConditionsArgs and MachineHealthCheckStatusConditionsOutput values.
// You can construct a concrete instance of `MachineHealthCheckStatusConditionsInput` via:
//
//	MachineHealthCheckStatusConditionsArgs{...}
type MachineHealthCheckStatusConditionsInput interface {
	pulumi.Input

	ToMachineHealthCheckStatusConditionsOutput() MachineHealthCheckStatusConditionsOutput
	ToMachineHealthCheckStatusConditionsOutputWithContext(context.Context) MachineHealthCheckStatusConditionsOutput
}

// Condition defines an observation of a Cluster API resource operational state.
type MachineHealthCheckStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MachineHealthCheckStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckStatusConditions)(nil)).Elem()
}

func (i MachineHealthCheckStatusConditionsArgs) ToMachineHealthCheckStatusConditionsOutput() MachineHealthCheckStatusConditionsOutput {
	return i.ToMachineHealthCheckStatusConditionsOutputWithContext(context.Background())
}

func (i MachineHealthCheckStatusConditionsArgs) ToMachineHealthCheckStatusConditionsOutputWithContext(ctx context.Context) MachineHealthCheckStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckStatusConditionsOutput)
}

// MachineHealthCheckStatusConditionsArrayInput is an input type that accepts MachineHealthCheckStatusConditionsArray and MachineHealthCheckStatusConditionsArrayOutput values.
// You can construct a concrete instance of `MachineHealthCheckStatusConditionsArrayInput` via:
//
//	MachineHealthCheckStatusConditionsArray{ MachineHealthCheckStatusConditionsArgs{...} }
type MachineHealthCheckStatusConditionsArrayInput interface {
	pulumi.Input

	ToMachineHealthCheckStatusConditionsArrayOutput() MachineHealthCheckStatusConditionsArrayOutput
	ToMachineHealthCheckStatusConditionsArrayOutputWithContext(context.Context) MachineHealthCheckStatusConditionsArrayOutput
}

type MachineHealthCheckStatusConditionsArray []MachineHealthCheckStatusConditionsInput

func (MachineHealthCheckStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineHealthCheckStatusConditions)(nil)).Elem()
}

func (i MachineHealthCheckStatusConditionsArray) ToMachineHealthCheckStatusConditionsArrayOutput() MachineHealthCheckStatusConditionsArrayOutput {
	return i.ToMachineHealthCheckStatusConditionsArrayOutputWithContext(context.Background())
}

func (i MachineHealthCheckStatusConditionsArray) ToMachineHealthCheckStatusConditionsArrayOutputWithContext(ctx context.Context) MachineHealthCheckStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineHealthCheckStatusConditionsArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type MachineHealthCheckStatusConditionsOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineHealthCheckStatusConditions)(nil)).Elem()
}

func (o MachineHealthCheckStatusConditionsOutput) ToMachineHealthCheckStatusConditionsOutput() MachineHealthCheckStatusConditionsOutput {
	return o
}

func (o MachineHealthCheckStatusConditionsOutput) ToMachineHealthCheckStatusConditionsOutputWithContext(ctx context.Context) MachineHealthCheckStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
func (o MachineHealthCheckStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition. This field may be empty.
func (o MachineHealthCheckStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
func (o MachineHealthCheckStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
func (o MachineHealthCheckStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineHealthCheckStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o MachineHealthCheckStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
func (o MachineHealthCheckStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MachineHealthCheckStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type MachineHealthCheckStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (MachineHealthCheckStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineHealthCheckStatusConditions)(nil)).Elem()
}

func (o MachineHealthCheckStatusConditionsArrayOutput) ToMachineHealthCheckStatusConditionsArrayOutput() MachineHealthCheckStatusConditionsArrayOutput {
	return o
}

func (o MachineHealthCheckStatusConditionsArrayOutput) ToMachineHealthCheckStatusConditionsArrayOutputWithContext(ctx context.Context) MachineHealthCheckStatusConditionsArrayOutput {
	return o
}

func (o MachineHealthCheckStatusConditionsArrayOutput) Index(i pulumi.IntInput) MachineHealthCheckStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineHealthCheckStatusConditions {
		return vs[0].([]MachineHealthCheckStatusConditions)[vs[1].(int)]
	}).(MachineHealthCheckStatusConditionsOutput)
}

type MachineMetadata struct {
}

// MachinePool is the Schema for the machinepools API.
//
//	Deprecated: This type will be removed in one of the next releases.
type MachinePoolType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachinePoolSpec defines the desired state of MachinePool.
	Spec *MachinePoolSpec `pulumi:"spec"`
	// MachinePoolStatus defines the observed state of MachinePool.
	Status *MachinePoolStatus `pulumi:"status"`
}

type MachinePoolMetadata struct {
}

// MachinePoolSpec defines the desired state of MachinePool.
type MachinePoolSpec struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// FailureDomains is the list of failure domains this MachinePool should be attached to.
	FailureDomains []string `pulumi:"failureDomains"`
	// Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
	ProviderIDList []string `pulumi:"providerIDList"`
	// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
	Replicas *int `pulumi:"replicas"`
	// The deployment strategy to use to replace existing machine instances with new ones.
	Strategy *MachinePoolSpecStrategy `pulumi:"strategy"`
	// Template describes the machines that will be created.
	Template MachinePoolSpecTemplate `pulumi:"template"`
}

// MachinePoolSpecInput is an input type that accepts MachinePoolSpecArgs and MachinePoolSpecOutput values.
// You can construct a concrete instance of `MachinePoolSpecInput` via:
//
//	MachinePoolSpecArgs{...}
type MachinePoolSpecInput interface {
	pulumi.Input

	ToMachinePoolSpecOutput() MachinePoolSpecOutput
	ToMachinePoolSpecOutputWithContext(context.Context) MachinePoolSpecOutput
}

// MachinePoolSpec defines the desired state of MachinePool.
type MachinePoolSpecArgs struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// FailureDomains is the list of failure domains this MachinePool should be attached to.
	FailureDomains pulumi.StringArrayInput `pulumi:"failureDomains"`
	// Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
	ProviderIDList pulumi.StringArrayInput `pulumi:"providerIDList"`
	// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The deployment strategy to use to replace existing machine instances with new ones.
	Strategy MachinePoolSpecStrategyPtrInput `pulumi:"strategy"`
	// Template describes the machines that will be created.
	Template MachinePoolSpecTemplateInput `pulumi:"template"`
}

func (MachinePoolSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpec)(nil)).Elem()
}

func (i MachinePoolSpecArgs) ToMachinePoolSpecOutput() MachinePoolSpecOutput {
	return i.ToMachinePoolSpecOutputWithContext(context.Background())
}

func (i MachinePoolSpecArgs) ToMachinePoolSpecOutputWithContext(ctx context.Context) MachinePoolSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecOutput)
}

func (i MachinePoolSpecArgs) ToMachinePoolSpecPtrOutput() MachinePoolSpecPtrOutput {
	return i.ToMachinePoolSpecPtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecArgs) ToMachinePoolSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecOutput).ToMachinePoolSpecPtrOutputWithContext(ctx)
}

// MachinePoolSpecPtrInput is an input type that accepts MachinePoolSpecArgs, MachinePoolSpecPtr and MachinePoolSpecPtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecPtrInput` via:
//
//	        MachinePoolSpecArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecPtrInput interface {
	pulumi.Input

	ToMachinePoolSpecPtrOutput() MachinePoolSpecPtrOutput
	ToMachinePoolSpecPtrOutputWithContext(context.Context) MachinePoolSpecPtrOutput
}

type machinePoolSpecPtrType MachinePoolSpecArgs

func MachinePoolSpecPtr(v *MachinePoolSpecArgs) MachinePoolSpecPtrInput {
	return (*machinePoolSpecPtrType)(v)
}

func (*machinePoolSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpec)(nil)).Elem()
}

func (i *machinePoolSpecPtrType) ToMachinePoolSpecPtrOutput() MachinePoolSpecPtrOutput {
	return i.ToMachinePoolSpecPtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecPtrType) ToMachinePoolSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecPtrOutput)
}

// MachinePoolSpec defines the desired state of MachinePool.
type MachinePoolSpecOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpec)(nil)).Elem()
}

func (o MachinePoolSpecOutput) ToMachinePoolSpecOutput() MachinePoolSpecOutput {
	return o
}

func (o MachinePoolSpecOutput) ToMachinePoolSpecOutputWithContext(ctx context.Context) MachinePoolSpecOutput {
	return o
}

func (o MachinePoolSpecOutput) ToMachinePoolSpecPtrOutput() MachinePoolSpecPtrOutput {
	return o.ToMachinePoolSpecPtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecOutput) ToMachinePoolSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpec) *MachinePoolSpec {
		return &v
	}).(MachinePoolSpecPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachinePoolSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// FailureDomains is the list of failure domains this MachinePool should be attached to.
func (o MachinePoolSpecOutput) FailureDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachinePoolSpec) []string { return v.FailureDomains }).(pulumi.StringArrayOutput)
}

// Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
func (o MachinePoolSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachinePoolSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
func (o MachinePoolSpecOutput) ProviderIDList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachinePoolSpec) []string { return v.ProviderIDList }).(pulumi.StringArrayOutput)
}

// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
func (o MachinePoolSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachinePoolSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The deployment strategy to use to replace existing machine instances with new ones.
func (o MachinePoolSpecOutput) Strategy() MachinePoolSpecStrategyPtrOutput {
	return o.ApplyT(func(v MachinePoolSpec) *MachinePoolSpecStrategy { return v.Strategy }).(MachinePoolSpecStrategyPtrOutput)
}

// Template describes the machines that will be created.
func (o MachinePoolSpecOutput) Template() MachinePoolSpecTemplateOutput {
	return o.ApplyT(func(v MachinePoolSpec) MachinePoolSpecTemplate { return v.Template }).(MachinePoolSpecTemplateOutput)
}

type MachinePoolSpecPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpec)(nil)).Elem()
}

func (o MachinePoolSpecPtrOutput) ToMachinePoolSpecPtrOutput() MachinePoolSpecPtrOutput {
	return o
}

func (o MachinePoolSpecPtrOutput) ToMachinePoolSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecPtrOutput {
	return o
}

func (o MachinePoolSpecPtrOutput) Elem() MachinePoolSpecOutput {
	return o.ApplyT(func(v *MachinePoolSpec) MachinePoolSpec {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpec
		return ret
	}).(MachinePoolSpecOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachinePoolSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// FailureDomains is the list of failure domains this MachinePool should be attached to.
func (o MachinePoolSpecPtrOutput) FailureDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MachinePoolSpec) []string {
		if v == nil {
			return nil
		}
		return v.FailureDomains
	}).(pulumi.StringArrayOutput)
}

// Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
func (o MachinePoolSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
func (o MachinePoolSpecPtrOutput) ProviderIDList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MachinePoolSpec) []string {
		if v == nil {
			return nil
		}
		return v.ProviderIDList
	}).(pulumi.StringArrayOutput)
}

// Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
func (o MachinePoolSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The deployment strategy to use to replace existing machine instances with new ones.
func (o MachinePoolSpecPtrOutput) Strategy() MachinePoolSpecStrategyPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpec) *MachinePoolSpecStrategy {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(MachinePoolSpecStrategyPtrOutput)
}

// Template describes the machines that will be created.
func (o MachinePoolSpecPtrOutput) Template() MachinePoolSpecTemplatePtrOutput {
	return o.ApplyT(func(v *MachinePoolSpec) *MachinePoolSpecTemplate {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(MachinePoolSpecTemplatePtrOutput)
}

// The deployment strategy to use to replace existing machine instances with new ones.
type MachinePoolSpecStrategy struct {
	// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
	RollingUpdate *MachinePoolSpecStrategyRollingUpdate `pulumi:"rollingUpdate"`
	// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
	Type *string `pulumi:"type"`
}

// MachinePoolSpecStrategyInput is an input type that accepts MachinePoolSpecStrategyArgs and MachinePoolSpecStrategyOutput values.
// You can construct a concrete instance of `MachinePoolSpecStrategyInput` via:
//
//	MachinePoolSpecStrategyArgs{...}
type MachinePoolSpecStrategyInput interface {
	pulumi.Input

	ToMachinePoolSpecStrategyOutput() MachinePoolSpecStrategyOutput
	ToMachinePoolSpecStrategyOutputWithContext(context.Context) MachinePoolSpecStrategyOutput
}

// The deployment strategy to use to replace existing machine instances with new ones.
type MachinePoolSpecStrategyArgs struct {
	// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
	RollingUpdate MachinePoolSpecStrategyRollingUpdatePtrInput `pulumi:"rollingUpdate"`
	// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MachinePoolSpecStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecStrategy)(nil)).Elem()
}

func (i MachinePoolSpecStrategyArgs) ToMachinePoolSpecStrategyOutput() MachinePoolSpecStrategyOutput {
	return i.ToMachinePoolSpecStrategyOutputWithContext(context.Background())
}

func (i MachinePoolSpecStrategyArgs) ToMachinePoolSpecStrategyOutputWithContext(ctx context.Context) MachinePoolSpecStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecStrategyOutput)
}

func (i MachinePoolSpecStrategyArgs) ToMachinePoolSpecStrategyPtrOutput() MachinePoolSpecStrategyPtrOutput {
	return i.ToMachinePoolSpecStrategyPtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecStrategyArgs) ToMachinePoolSpecStrategyPtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecStrategyOutput).ToMachinePoolSpecStrategyPtrOutputWithContext(ctx)
}

// MachinePoolSpecStrategyPtrInput is an input type that accepts MachinePoolSpecStrategyArgs, MachinePoolSpecStrategyPtr and MachinePoolSpecStrategyPtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecStrategyPtrInput` via:
//
//	        MachinePoolSpecStrategyArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecStrategyPtrInput interface {
	pulumi.Input

	ToMachinePoolSpecStrategyPtrOutput() MachinePoolSpecStrategyPtrOutput
	ToMachinePoolSpecStrategyPtrOutputWithContext(context.Context) MachinePoolSpecStrategyPtrOutput
}

type machinePoolSpecStrategyPtrType MachinePoolSpecStrategyArgs

func MachinePoolSpecStrategyPtr(v *MachinePoolSpecStrategyArgs) MachinePoolSpecStrategyPtrInput {
	return (*machinePoolSpecStrategyPtrType)(v)
}

func (*machinePoolSpecStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecStrategy)(nil)).Elem()
}

func (i *machinePoolSpecStrategyPtrType) ToMachinePoolSpecStrategyPtrOutput() MachinePoolSpecStrategyPtrOutput {
	return i.ToMachinePoolSpecStrategyPtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecStrategyPtrType) ToMachinePoolSpecStrategyPtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecStrategyPtrOutput)
}

// The deployment strategy to use to replace existing machine instances with new ones.
type MachinePoolSpecStrategyOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecStrategy)(nil)).Elem()
}

func (o MachinePoolSpecStrategyOutput) ToMachinePoolSpecStrategyOutput() MachinePoolSpecStrategyOutput {
	return o
}

func (o MachinePoolSpecStrategyOutput) ToMachinePoolSpecStrategyOutputWithContext(ctx context.Context) MachinePoolSpecStrategyOutput {
	return o
}

func (o MachinePoolSpecStrategyOutput) ToMachinePoolSpecStrategyPtrOutput() MachinePoolSpecStrategyPtrOutput {
	return o.ToMachinePoolSpecStrategyPtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecStrategyOutput) ToMachinePoolSpecStrategyPtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecStrategy) *MachinePoolSpecStrategy {
		return &v
	}).(MachinePoolSpecStrategyPtrOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
func (o MachinePoolSpecStrategyOutput) RollingUpdate() MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return o.ApplyT(func(v MachinePoolSpecStrategy) *MachinePoolSpecStrategyRollingUpdate { return v.RollingUpdate }).(MachinePoolSpecStrategyRollingUpdatePtrOutput)
}

// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
func (o MachinePoolSpecStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MachinePoolSpecStrategyPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecStrategy)(nil)).Elem()
}

func (o MachinePoolSpecStrategyPtrOutput) ToMachinePoolSpecStrategyPtrOutput() MachinePoolSpecStrategyPtrOutput {
	return o
}

func (o MachinePoolSpecStrategyPtrOutput) ToMachinePoolSpecStrategyPtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyPtrOutput {
	return o
}

func (o MachinePoolSpecStrategyPtrOutput) Elem() MachinePoolSpecStrategyOutput {
	return o.ApplyT(func(v *MachinePoolSpecStrategy) MachinePoolSpecStrategy {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecStrategy
		return ret
	}).(MachinePoolSpecStrategyOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
func (o MachinePoolSpecStrategyPtrOutput) RollingUpdate() MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecStrategy) *MachinePoolSpecStrategyRollingUpdate {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(MachinePoolSpecStrategyRollingUpdatePtrOutput)
}

// Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
func (o MachinePoolSpecStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
type MachinePoolSpecStrategyRollingUpdate struct {
	// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
	MaxSurge interface{} `pulumi:"maxSurge"`
	// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
}

// MachinePoolSpecStrategyRollingUpdateInput is an input type that accepts MachinePoolSpecStrategyRollingUpdateArgs and MachinePoolSpecStrategyRollingUpdateOutput values.
// You can construct a concrete instance of `MachinePoolSpecStrategyRollingUpdateInput` via:
//
//	MachinePoolSpecStrategyRollingUpdateArgs{...}
type MachinePoolSpecStrategyRollingUpdateInput interface {
	pulumi.Input

	ToMachinePoolSpecStrategyRollingUpdateOutput() MachinePoolSpecStrategyRollingUpdateOutput
	ToMachinePoolSpecStrategyRollingUpdateOutputWithContext(context.Context) MachinePoolSpecStrategyRollingUpdateOutput
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
type MachinePoolSpecStrategyRollingUpdateArgs struct {
	// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
	MaxSurge pulumi.Input `pulumi:"maxSurge"`
	// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
}

func (MachinePoolSpecStrategyRollingUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecStrategyRollingUpdate)(nil)).Elem()
}

func (i MachinePoolSpecStrategyRollingUpdateArgs) ToMachinePoolSpecStrategyRollingUpdateOutput() MachinePoolSpecStrategyRollingUpdateOutput {
	return i.ToMachinePoolSpecStrategyRollingUpdateOutputWithContext(context.Background())
}

func (i MachinePoolSpecStrategyRollingUpdateArgs) ToMachinePoolSpecStrategyRollingUpdateOutputWithContext(ctx context.Context) MachinePoolSpecStrategyRollingUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecStrategyRollingUpdateOutput)
}

func (i MachinePoolSpecStrategyRollingUpdateArgs) ToMachinePoolSpecStrategyRollingUpdatePtrOutput() MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return i.ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecStrategyRollingUpdateArgs) ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecStrategyRollingUpdateOutput).ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(ctx)
}

// MachinePoolSpecStrategyRollingUpdatePtrInput is an input type that accepts MachinePoolSpecStrategyRollingUpdateArgs, MachinePoolSpecStrategyRollingUpdatePtr and MachinePoolSpecStrategyRollingUpdatePtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecStrategyRollingUpdatePtrInput` via:
//
//	        MachinePoolSpecStrategyRollingUpdateArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecStrategyRollingUpdatePtrInput interface {
	pulumi.Input

	ToMachinePoolSpecStrategyRollingUpdatePtrOutput() MachinePoolSpecStrategyRollingUpdatePtrOutput
	ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(context.Context) MachinePoolSpecStrategyRollingUpdatePtrOutput
}

type machinePoolSpecStrategyRollingUpdatePtrType MachinePoolSpecStrategyRollingUpdateArgs

func MachinePoolSpecStrategyRollingUpdatePtr(v *MachinePoolSpecStrategyRollingUpdateArgs) MachinePoolSpecStrategyRollingUpdatePtrInput {
	return (*machinePoolSpecStrategyRollingUpdatePtrType)(v)
}

func (*machinePoolSpecStrategyRollingUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecStrategyRollingUpdate)(nil)).Elem()
}

func (i *machinePoolSpecStrategyRollingUpdatePtrType) ToMachinePoolSpecStrategyRollingUpdatePtrOutput() MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return i.ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecStrategyRollingUpdatePtrType) ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecStrategyRollingUpdatePtrOutput)
}

// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
type MachinePoolSpecStrategyRollingUpdateOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecStrategyRollingUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecStrategyRollingUpdate)(nil)).Elem()
}

func (o MachinePoolSpecStrategyRollingUpdateOutput) ToMachinePoolSpecStrategyRollingUpdateOutput() MachinePoolSpecStrategyRollingUpdateOutput {
	return o
}

func (o MachinePoolSpecStrategyRollingUpdateOutput) ToMachinePoolSpecStrategyRollingUpdateOutputWithContext(ctx context.Context) MachinePoolSpecStrategyRollingUpdateOutput {
	return o
}

func (o MachinePoolSpecStrategyRollingUpdateOutput) ToMachinePoolSpecStrategyRollingUpdatePtrOutput() MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return o.ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecStrategyRollingUpdateOutput) ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecStrategyRollingUpdate) *MachinePoolSpecStrategyRollingUpdate {
		return &v
	}).(MachinePoolSpecStrategyRollingUpdatePtrOutput)
}

// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
func (o MachinePoolSpecStrategyRollingUpdateOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v MachinePoolSpecStrategyRollingUpdate) interface{} { return v.MaxSurge }).(pulumi.AnyOutput)
}

// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
func (o MachinePoolSpecStrategyRollingUpdateOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v MachinePoolSpecStrategyRollingUpdate) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

type MachinePoolSpecStrategyRollingUpdatePtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecStrategyRollingUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecStrategyRollingUpdate)(nil)).Elem()
}

func (o MachinePoolSpecStrategyRollingUpdatePtrOutput) ToMachinePoolSpecStrategyRollingUpdatePtrOutput() MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return o
}

func (o MachinePoolSpecStrategyRollingUpdatePtrOutput) ToMachinePoolSpecStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) MachinePoolSpecStrategyRollingUpdatePtrOutput {
	return o
}

func (o MachinePoolSpecStrategyRollingUpdatePtrOutput) Elem() MachinePoolSpecStrategyRollingUpdateOutput {
	return o.ApplyT(func(v *MachinePoolSpecStrategyRollingUpdate) MachinePoolSpecStrategyRollingUpdate {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecStrategyRollingUpdate
		return ret
	}).(MachinePoolSpecStrategyRollingUpdateOutput)
}

// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
func (o MachinePoolSpecStrategyRollingUpdatePtrOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v *MachinePoolSpecStrategyRollingUpdate) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.AnyOutput)
}

// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
func (o MachinePoolSpecStrategyRollingUpdatePtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *MachinePoolSpecStrategyRollingUpdate) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// Template describes the machines that will be created.
type MachinePoolSpecTemplate struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *MachinePoolSpecTemplateMetadata `pulumi:"metadata"`
	// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *MachinePoolSpecTemplateSpec `pulumi:"spec"`
}

// MachinePoolSpecTemplateInput is an input type that accepts MachinePoolSpecTemplateArgs and MachinePoolSpecTemplateOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateInput` via:
//
//	MachinePoolSpecTemplateArgs{...}
type MachinePoolSpecTemplateInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateOutput() MachinePoolSpecTemplateOutput
	ToMachinePoolSpecTemplateOutputWithContext(context.Context) MachinePoolSpecTemplateOutput
}

// Template describes the machines that will be created.
type MachinePoolSpecTemplateArgs struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata MachinePoolSpecTemplateMetadataPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec MachinePoolSpecTemplateSpecPtrInput `pulumi:"spec"`
}

func (MachinePoolSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplate)(nil)).Elem()
}

func (i MachinePoolSpecTemplateArgs) ToMachinePoolSpecTemplateOutput() MachinePoolSpecTemplateOutput {
	return i.ToMachinePoolSpecTemplateOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateArgs) ToMachinePoolSpecTemplateOutputWithContext(ctx context.Context) MachinePoolSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateOutput)
}

func (i MachinePoolSpecTemplateArgs) ToMachinePoolSpecTemplatePtrOutput() MachinePoolSpecTemplatePtrOutput {
	return i.ToMachinePoolSpecTemplatePtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateArgs) ToMachinePoolSpecTemplatePtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateOutput).ToMachinePoolSpecTemplatePtrOutputWithContext(ctx)
}

// MachinePoolSpecTemplatePtrInput is an input type that accepts MachinePoolSpecTemplateArgs, MachinePoolSpecTemplatePtr and MachinePoolSpecTemplatePtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplatePtrInput` via:
//
//	        MachinePoolSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecTemplatePtrInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplatePtrOutput() MachinePoolSpecTemplatePtrOutput
	ToMachinePoolSpecTemplatePtrOutputWithContext(context.Context) MachinePoolSpecTemplatePtrOutput
}

type machinePoolSpecTemplatePtrType MachinePoolSpecTemplateArgs

func MachinePoolSpecTemplatePtr(v *MachinePoolSpecTemplateArgs) MachinePoolSpecTemplatePtrInput {
	return (*machinePoolSpecTemplatePtrType)(v)
}

func (*machinePoolSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplate)(nil)).Elem()
}

func (i *machinePoolSpecTemplatePtrType) ToMachinePoolSpecTemplatePtrOutput() MachinePoolSpecTemplatePtrOutput {
	return i.ToMachinePoolSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecTemplatePtrType) ToMachinePoolSpecTemplatePtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplatePtrOutput)
}

// Template describes the machines that will be created.
type MachinePoolSpecTemplateOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplate)(nil)).Elem()
}

func (o MachinePoolSpecTemplateOutput) ToMachinePoolSpecTemplateOutput() MachinePoolSpecTemplateOutput {
	return o
}

func (o MachinePoolSpecTemplateOutput) ToMachinePoolSpecTemplateOutputWithContext(ctx context.Context) MachinePoolSpecTemplateOutput {
	return o
}

func (o MachinePoolSpecTemplateOutput) ToMachinePoolSpecTemplatePtrOutput() MachinePoolSpecTemplatePtrOutput {
	return o.ToMachinePoolSpecTemplatePtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecTemplateOutput) ToMachinePoolSpecTemplatePtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecTemplate) *MachinePoolSpecTemplate {
		return &v
	}).(MachinePoolSpecTemplatePtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MachinePoolSpecTemplateOutput) Metadata() MachinePoolSpecTemplateMetadataPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplate) *MachinePoolSpecTemplateMetadata { return v.Metadata }).(MachinePoolSpecTemplateMetadataPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o MachinePoolSpecTemplateOutput) Spec() MachinePoolSpecTemplateSpecPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplate) *MachinePoolSpecTemplateSpec { return v.Spec }).(MachinePoolSpecTemplateSpecPtrOutput)
}

type MachinePoolSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplate)(nil)).Elem()
}

func (o MachinePoolSpecTemplatePtrOutput) ToMachinePoolSpecTemplatePtrOutput() MachinePoolSpecTemplatePtrOutput {
	return o
}

func (o MachinePoolSpecTemplatePtrOutput) ToMachinePoolSpecTemplatePtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplatePtrOutput {
	return o
}

func (o MachinePoolSpecTemplatePtrOutput) Elem() MachinePoolSpecTemplateOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplate) MachinePoolSpecTemplate {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecTemplate
		return ret
	}).(MachinePoolSpecTemplateOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MachinePoolSpecTemplatePtrOutput) Metadata() MachinePoolSpecTemplateMetadataPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplate) *MachinePoolSpecTemplateMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MachinePoolSpecTemplateMetadataPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o MachinePoolSpecTemplatePtrOutput) Spec() MachinePoolSpecTemplateSpecPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplate) *MachinePoolSpecTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(MachinePoolSpecTemplateSpecPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachinePoolSpecTemplateMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
	//  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	//  Deprecated: This field has no function and is going to be removed in a next release.
	GenerateName *string `pulumi:"generateName"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Name *string `pulumi:"name"`
	// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Namespace *string `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	//  Deprecated: This field has no function and is going to be removed in a next release.
	OwnerReferences []MachinePoolSpecTemplateMetadataOwnerReferences `pulumi:"ownerReferences"`
}

// MachinePoolSpecTemplateMetadataInput is an input type that accepts MachinePoolSpecTemplateMetadataArgs and MachinePoolSpecTemplateMetadataOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateMetadataInput` via:
//
//	MachinePoolSpecTemplateMetadataArgs{...}
type MachinePoolSpecTemplateMetadataInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateMetadataOutput() MachinePoolSpecTemplateMetadataOutput
	ToMachinePoolSpecTemplateMetadataOutputWithContext(context.Context) MachinePoolSpecTemplateMetadataOutput
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachinePoolSpecTemplateMetadataArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
	//  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	//  Deprecated: This field has no function and is going to be removed in a next release.
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	//  Deprecated: This field has no function and is going to be removed in a next release.
	OwnerReferences MachinePoolSpecTemplateMetadataOwnerReferencesArrayInput `pulumi:"ownerReferences"`
}

func (MachinePoolSpecTemplateMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateMetadata)(nil)).Elem()
}

func (i MachinePoolSpecTemplateMetadataArgs) ToMachinePoolSpecTemplateMetadataOutput() MachinePoolSpecTemplateMetadataOutput {
	return i.ToMachinePoolSpecTemplateMetadataOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateMetadataArgs) ToMachinePoolSpecTemplateMetadataOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateMetadataOutput)
}

func (i MachinePoolSpecTemplateMetadataArgs) ToMachinePoolSpecTemplateMetadataPtrOutput() MachinePoolSpecTemplateMetadataPtrOutput {
	return i.ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateMetadataArgs) ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateMetadataOutput).ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(ctx)
}

// MachinePoolSpecTemplateMetadataPtrInput is an input type that accepts MachinePoolSpecTemplateMetadataArgs, MachinePoolSpecTemplateMetadataPtr and MachinePoolSpecTemplateMetadataPtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateMetadataPtrInput` via:
//
//	        MachinePoolSpecTemplateMetadataArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecTemplateMetadataPtrInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateMetadataPtrOutput() MachinePoolSpecTemplateMetadataPtrOutput
	ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(context.Context) MachinePoolSpecTemplateMetadataPtrOutput
}

type machinePoolSpecTemplateMetadataPtrType MachinePoolSpecTemplateMetadataArgs

func MachinePoolSpecTemplateMetadataPtr(v *MachinePoolSpecTemplateMetadataArgs) MachinePoolSpecTemplateMetadataPtrInput {
	return (*machinePoolSpecTemplateMetadataPtrType)(v)
}

func (*machinePoolSpecTemplateMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateMetadata)(nil)).Elem()
}

func (i *machinePoolSpecTemplateMetadataPtrType) ToMachinePoolSpecTemplateMetadataPtrOutput() MachinePoolSpecTemplateMetadataPtrOutput {
	return i.ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecTemplateMetadataPtrType) ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateMetadataPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachinePoolSpecTemplateMetadataOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateMetadata)(nil)).Elem()
}

func (o MachinePoolSpecTemplateMetadataOutput) ToMachinePoolSpecTemplateMetadataOutput() MachinePoolSpecTemplateMetadataOutput {
	return o
}

func (o MachinePoolSpecTemplateMetadataOutput) ToMachinePoolSpecTemplateMetadataOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataOutput {
	return o
}

func (o MachinePoolSpecTemplateMetadataOutput) ToMachinePoolSpecTemplateMetadataPtrOutput() MachinePoolSpecTemplateMetadataPtrOutput {
	return o.ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecTemplateMetadataOutput) ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecTemplateMetadata) *MachinePoolSpecTemplateMetadata {
		return &v
	}).(MachinePoolSpecTemplateMetadataPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o MachinePoolSpecTemplateMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
//	If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
//	Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadata) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o MachinePoolSpecTemplateMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
//	Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataOutput) OwnerReferences() MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadata) []MachinePoolSpecTemplateMetadataOwnerReferences {
		return v.OwnerReferences
	}).(MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput)
}

type MachinePoolSpecTemplateMetadataPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateMetadata)(nil)).Elem()
}

func (o MachinePoolSpecTemplateMetadataPtrOutput) ToMachinePoolSpecTemplateMetadataPtrOutput() MachinePoolSpecTemplateMetadataPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateMetadataPtrOutput) ToMachinePoolSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateMetadataPtrOutput) Elem() MachinePoolSpecTemplateMetadataOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateMetadata) MachinePoolSpecTemplateMetadata {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecTemplateMetadata
		return ret
	}).(MachinePoolSpecTemplateMetadataOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o MachinePoolSpecTemplateMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
//	If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
//	Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataPtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o MachinePoolSpecTemplateMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
//	Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachinePoolSpecTemplateMetadataPtrOutput) OwnerReferences() MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateMetadata) []MachinePoolSpecTemplateMetadataOwnerReferences {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
type MachinePoolSpecTemplateMetadataAnnotations struct {
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
type MachinePoolSpecTemplateMetadataLabels struct {
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachinePoolSpecTemplateMetadataOwnerReferences struct {
	// API version of the referent.
	ApiVersion string `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller *bool `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid string `pulumi:"uid"`
}

// MachinePoolSpecTemplateMetadataOwnerReferencesInput is an input type that accepts MachinePoolSpecTemplateMetadataOwnerReferencesArgs and MachinePoolSpecTemplateMetadataOwnerReferencesOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateMetadataOwnerReferencesInput` via:
//
//	MachinePoolSpecTemplateMetadataOwnerReferencesArgs{...}
type MachinePoolSpecTemplateMetadataOwnerReferencesInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateMetadataOwnerReferencesOutput() MachinePoolSpecTemplateMetadataOwnerReferencesOutput
	ToMachinePoolSpecTemplateMetadataOwnerReferencesOutputWithContext(context.Context) MachinePoolSpecTemplateMetadataOwnerReferencesOutput
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachinePoolSpecTemplateMetadataOwnerReferencesArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion pulumi.BoolPtrInput `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name pulumi.StringInput `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (MachinePoolSpecTemplateMetadataOwnerReferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (i MachinePoolSpecTemplateMetadataOwnerReferencesArgs) ToMachinePoolSpecTemplateMetadataOwnerReferencesOutput() MachinePoolSpecTemplateMetadataOwnerReferencesOutput {
	return i.ToMachinePoolSpecTemplateMetadataOwnerReferencesOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateMetadataOwnerReferencesArgs) ToMachinePoolSpecTemplateMetadataOwnerReferencesOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataOwnerReferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateMetadataOwnerReferencesOutput)
}

// MachinePoolSpecTemplateMetadataOwnerReferencesArrayInput is an input type that accepts MachinePoolSpecTemplateMetadataOwnerReferencesArray and MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateMetadataOwnerReferencesArrayInput` via:
//
//	MachinePoolSpecTemplateMetadataOwnerReferencesArray{ MachinePoolSpecTemplateMetadataOwnerReferencesArgs{...} }
type MachinePoolSpecTemplateMetadataOwnerReferencesArrayInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput() MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput
	ToMachinePoolSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(context.Context) MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput
}

type MachinePoolSpecTemplateMetadataOwnerReferencesArray []MachinePoolSpecTemplateMetadataOwnerReferencesInput

func (MachinePoolSpecTemplateMetadataOwnerReferencesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachinePoolSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (i MachinePoolSpecTemplateMetadataOwnerReferencesArray) ToMachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput() MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput {
	return i.ToMachinePoolSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateMetadataOwnerReferencesArray) ToMachinePoolSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachinePoolSpecTemplateMetadataOwnerReferencesOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateMetadataOwnerReferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) ToMachinePoolSpecTemplateMetadataOwnerReferencesOutput() MachinePoolSpecTemplateMetadataOwnerReferencesOutput {
	return o
}

func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) ToMachinePoolSpecTemplateMetadataOwnerReferencesOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataOwnerReferencesOutput {
	return o
}

// API version of the referent.
func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadataOwnerReferences) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) BlockOwnerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadataOwnerReferences) *bool { return v.BlockOwnerDeletion }).(pulumi.BoolPtrOutput)
}

// If true, this reference points to the managing controller.
func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadataOwnerReferences) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadataOwnerReferences) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadataOwnerReferences) string { return v.Name }).(pulumi.StringOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o MachinePoolSpecTemplateMetadataOwnerReferencesOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateMetadataOwnerReferences) string { return v.Uid }).(pulumi.StringOutput)
}

type MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachinePoolSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (o MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput) ToMachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput() MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o
}

func (o MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput) ToMachinePoolSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(ctx context.Context) MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o
}

func (o MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput) Index(i pulumi.IntInput) MachinePoolSpecTemplateMetadataOwnerReferencesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachinePoolSpecTemplateMetadataOwnerReferences {
		return vs[0].([]MachinePoolSpecTemplateMetadataOwnerReferences)[vs[1].(int)]
	}).(MachinePoolSpecTemplateMetadataOwnerReferencesOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachinePoolSpecTemplateSpec struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachinePoolSpecTemplateSpecBootstrap `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain *string `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachinePoolSpecTemplateSpecInfrastructureRef `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout *string `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID *string `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version *string `pulumi:"version"`
}

// MachinePoolSpecTemplateSpecInput is an input type that accepts MachinePoolSpecTemplateSpecArgs and MachinePoolSpecTemplateSpecOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecInput` via:
//
//	MachinePoolSpecTemplateSpecArgs{...}
type MachinePoolSpecTemplateSpecInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecOutput() MachinePoolSpecTemplateSpecOutput
	ToMachinePoolSpecTemplateSpecOutputWithContext(context.Context) MachinePoolSpecTemplateSpecOutput
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachinePoolSpecTemplateSpecArgs struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachinePoolSpecTemplateSpecBootstrapInput `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain pulumi.StringPtrInput `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachinePoolSpecTemplateSpecInfrastructureRefInput `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout pulumi.StringPtrInput `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID pulumi.StringPtrInput `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (MachinePoolSpecTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpec)(nil)).Elem()
}

func (i MachinePoolSpecTemplateSpecArgs) ToMachinePoolSpecTemplateSpecOutput() MachinePoolSpecTemplateSpecOutput {
	return i.ToMachinePoolSpecTemplateSpecOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecArgs) ToMachinePoolSpecTemplateSpecOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecOutput)
}

func (i MachinePoolSpecTemplateSpecArgs) ToMachinePoolSpecTemplateSpecPtrOutput() MachinePoolSpecTemplateSpecPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecArgs) ToMachinePoolSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecOutput).ToMachinePoolSpecTemplateSpecPtrOutputWithContext(ctx)
}

// MachinePoolSpecTemplateSpecPtrInput is an input type that accepts MachinePoolSpecTemplateSpecArgs, MachinePoolSpecTemplateSpecPtr and MachinePoolSpecTemplateSpecPtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecPtrInput` via:
//
//	        MachinePoolSpecTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecTemplateSpecPtrInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecPtrOutput() MachinePoolSpecTemplateSpecPtrOutput
	ToMachinePoolSpecTemplateSpecPtrOutputWithContext(context.Context) MachinePoolSpecTemplateSpecPtrOutput
}

type machinePoolSpecTemplateSpecPtrType MachinePoolSpecTemplateSpecArgs

func MachinePoolSpecTemplateSpecPtr(v *MachinePoolSpecTemplateSpecArgs) MachinePoolSpecTemplateSpecPtrInput {
	return (*machinePoolSpecTemplateSpecPtrType)(v)
}

func (*machinePoolSpecTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpec)(nil)).Elem()
}

func (i *machinePoolSpecTemplateSpecPtrType) ToMachinePoolSpecTemplateSpecPtrOutput() MachinePoolSpecTemplateSpecPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecTemplateSpecPtrType) ToMachinePoolSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachinePoolSpecTemplateSpecOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpec)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecOutput) ToMachinePoolSpecTemplateSpecOutput() MachinePoolSpecTemplateSpecOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecOutput) ToMachinePoolSpecTemplateSpecOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecOutput) ToMachinePoolSpecTemplateSpecPtrOutput() MachinePoolSpecTemplateSpecPtrOutput {
	return o.ToMachinePoolSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecTemplateSpecOutput) ToMachinePoolSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecTemplateSpec) *MachinePoolSpecTemplateSpec {
		return &v
	}).(MachinePoolSpecTemplateSpecPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachinePoolSpecTemplateSpecOutput) Bootstrap() MachinePoolSpecTemplateSpecBootstrapOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpec) MachinePoolSpecTemplateSpecBootstrap { return v.Bootstrap }).(MachinePoolSpecTemplateSpecBootstrapOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachinePoolSpecTemplateSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachinePoolSpecTemplateSpecOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpec) *string { return v.FailureDomain }).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachinePoolSpecTemplateSpecOutput) InfrastructureRef() MachinePoolSpecTemplateSpecInfrastructureRefOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpec) MachinePoolSpecTemplateSpecInfrastructureRef {
		return v.InfrastructureRef
	}).(MachinePoolSpecTemplateSpecInfrastructureRefOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachinePoolSpecTemplateSpecOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpec) *string { return v.NodeDrainTimeout }).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachinePoolSpecTemplateSpecOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpec) *string { return v.ProviderID }).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachinePoolSpecTemplateSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MachinePoolSpecTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpec)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecPtrOutput) ToMachinePoolSpecTemplateSpecPtrOutput() MachinePoolSpecTemplateSpecPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecPtrOutput) ToMachinePoolSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecPtrOutput) Elem() MachinePoolSpecTemplateSpecOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) MachinePoolSpecTemplateSpec {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecTemplateSpec
		return ret
	}).(MachinePoolSpecTemplateSpecOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachinePoolSpecTemplateSpecPtrOutput) Bootstrap() MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) *MachinePoolSpecTemplateSpecBootstrap {
		if v == nil {
			return nil
		}
		return &v.Bootstrap
	}).(MachinePoolSpecTemplateSpecBootstrapPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachinePoolSpecTemplateSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachinePoolSpecTemplateSpecPtrOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.FailureDomain
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachinePoolSpecTemplateSpecPtrOutput) InfrastructureRef() MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) *MachinePoolSpecTemplateSpecInfrastructureRef {
		if v == nil {
			return nil
		}
		return &v.InfrastructureRef
	}).(MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachinePoolSpecTemplateSpecPtrOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeDrainTimeout
	}).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachinePoolSpecTemplateSpecPtrOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.ProviderID
	}).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachinePoolSpecTemplateSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachinePoolSpecTemplateSpecBootstrap struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef *MachinePoolSpecTemplateSpecBootstrapConfigRef `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data *string `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName *string `pulumi:"dataSecretName"`
}

// MachinePoolSpecTemplateSpecBootstrapInput is an input type that accepts MachinePoolSpecTemplateSpecBootstrapArgs and MachinePoolSpecTemplateSpecBootstrapOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecBootstrapInput` via:
//
//	MachinePoolSpecTemplateSpecBootstrapArgs{...}
type MachinePoolSpecTemplateSpecBootstrapInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecBootstrapOutput() MachinePoolSpecTemplateSpecBootstrapOutput
	ToMachinePoolSpecTemplateSpecBootstrapOutputWithContext(context.Context) MachinePoolSpecTemplateSpecBootstrapOutput
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachinePoolSpecTemplateSpecBootstrapArgs struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef MachinePoolSpecTemplateSpecBootstrapConfigRefPtrInput `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName pulumi.StringPtrInput `pulumi:"dataSecretName"`
}

func (MachinePoolSpecTemplateSpecBootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (i MachinePoolSpecTemplateSpecBootstrapArgs) ToMachinePoolSpecTemplateSpecBootstrapOutput() MachinePoolSpecTemplateSpecBootstrapOutput {
	return i.ToMachinePoolSpecTemplateSpecBootstrapOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecBootstrapArgs) ToMachinePoolSpecTemplateSpecBootstrapOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecBootstrapOutput)
}

func (i MachinePoolSpecTemplateSpecBootstrapArgs) ToMachinePoolSpecTemplateSpecBootstrapPtrOutput() MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecBootstrapArgs) ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecBootstrapOutput).ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(ctx)
}

// MachinePoolSpecTemplateSpecBootstrapPtrInput is an input type that accepts MachinePoolSpecTemplateSpecBootstrapArgs, MachinePoolSpecTemplateSpecBootstrapPtr and MachinePoolSpecTemplateSpecBootstrapPtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecBootstrapPtrInput` via:
//
//	        MachinePoolSpecTemplateSpecBootstrapArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecTemplateSpecBootstrapPtrInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecBootstrapPtrOutput() MachinePoolSpecTemplateSpecBootstrapPtrOutput
	ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(context.Context) MachinePoolSpecTemplateSpecBootstrapPtrOutput
}

type machinePoolSpecTemplateSpecBootstrapPtrType MachinePoolSpecTemplateSpecBootstrapArgs

func MachinePoolSpecTemplateSpecBootstrapPtr(v *MachinePoolSpecTemplateSpecBootstrapArgs) MachinePoolSpecTemplateSpecBootstrapPtrInput {
	return (*machinePoolSpecTemplateSpecBootstrapPtrType)(v)
}

func (*machinePoolSpecTemplateSpecBootstrapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (i *machinePoolSpecTemplateSpecBootstrapPtrType) ToMachinePoolSpecTemplateSpecBootstrapPtrOutput() MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecTemplateSpecBootstrapPtrType) ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecBootstrapPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachinePoolSpecTemplateSpecBootstrapOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecBootstrapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecBootstrapOutput) ToMachinePoolSpecTemplateSpecBootstrapOutput() MachinePoolSpecTemplateSpecBootstrapOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapOutput) ToMachinePoolSpecTemplateSpecBootstrapOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapOutput) ToMachinePoolSpecTemplateSpecBootstrapPtrOutput() MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return o.ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecTemplateSpecBootstrapOutput) ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecTemplateSpecBootstrap) *MachinePoolSpecTemplateSpecBootstrap {
		return &v
	}).(MachinePoolSpecTemplateSpecBootstrapPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachinePoolSpecTemplateSpecBootstrapOutput) ConfigRef() MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrap) *MachinePoolSpecTemplateSpecBootstrapConfigRef {
		return v.ConfigRef
	}).(MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachinePoolSpecTemplateSpecBootstrapOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrap) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachinePoolSpecTemplateSpecBootstrapOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrap) *string { return v.DataSecretName }).(pulumi.StringPtrOutput)
}

type MachinePoolSpecTemplateSpecBootstrapPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecBootstrapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecBootstrapPtrOutput) ToMachinePoolSpecTemplateSpecBootstrapPtrOutput() MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapPtrOutput) ToMachinePoolSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapPtrOutput) Elem() MachinePoolSpecTemplateSpecBootstrapOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrap) MachinePoolSpecTemplateSpecBootstrap {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecTemplateSpecBootstrap
		return ret
	}).(MachinePoolSpecTemplateSpecBootstrapOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachinePoolSpecTemplateSpecBootstrapPtrOutput) ConfigRef() MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrap) *MachinePoolSpecTemplateSpecBootstrapConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachinePoolSpecTemplateSpecBootstrapPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachinePoolSpecTemplateSpecBootstrapPtrOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.DataSecretName
	}).(pulumi.StringPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachinePoolSpecTemplateSpecBootstrapConfigRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachinePoolSpecTemplateSpecBootstrapConfigRefInput is an input type that accepts MachinePoolSpecTemplateSpecBootstrapConfigRefArgs and MachinePoolSpecTemplateSpecBootstrapConfigRefOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecBootstrapConfigRefInput` via:
//
//	MachinePoolSpecTemplateSpecBootstrapConfigRefArgs{...}
type MachinePoolSpecTemplateSpecBootstrapConfigRefInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecBootstrapConfigRefOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefOutput
	ToMachinePoolSpecTemplateSpecBootstrapConfigRefOutputWithContext(context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefOutput
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachinePoolSpecTemplateSpecBootstrapConfigRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachinePoolSpecTemplateSpecBootstrapConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (i MachinePoolSpecTemplateSpecBootstrapConfigRefArgs) ToMachinePoolSpecTemplateSpecBootstrapConfigRefOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefOutput {
	return i.ToMachinePoolSpecTemplateSpecBootstrapConfigRefOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecBootstrapConfigRefArgs) ToMachinePoolSpecTemplateSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecBootstrapConfigRefOutput)
}

func (i MachinePoolSpecTemplateSpecBootstrapConfigRefArgs) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecBootstrapConfigRefArgs) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecBootstrapConfigRefOutput).ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx)
}

// MachinePoolSpecTemplateSpecBootstrapConfigRefPtrInput is an input type that accepts MachinePoolSpecTemplateSpecBootstrapConfigRefArgs, MachinePoolSpecTemplateSpecBootstrapConfigRefPtr and MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecBootstrapConfigRefPtrInput` via:
//
//	        MachinePoolSpecTemplateSpecBootstrapConfigRefArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecTemplateSpecBootstrapConfigRefPtrInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput
	ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput
}

type machinePoolSpecTemplateSpecBootstrapConfigRefPtrType MachinePoolSpecTemplateSpecBootstrapConfigRefArgs

func MachinePoolSpecTemplateSpecBootstrapConfigRefPtr(v *MachinePoolSpecTemplateSpecBootstrapConfigRefArgs) MachinePoolSpecTemplateSpecBootstrapConfigRefPtrInput {
	return (*machinePoolSpecTemplateSpecBootstrapConfigRefPtrType)(v)
}

func (*machinePoolSpecTemplateSpecBootstrapConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (i *machinePoolSpecTemplateSpecBootstrapConfigRefPtrType) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecTemplateSpecBootstrapConfigRefPtrType) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachinePoolSpecTemplateSpecBootstrapConfigRefOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) ToMachinePoolSpecTemplateSpecBootstrapConfigRefOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) ToMachinePoolSpecTemplateSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecTemplateSpecBootstrapConfigRef) *MachinePoolSpecTemplateSpecBootstrapConfigRef {
		return &v
	}).(MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// API version of the referent.
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrapConfigRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrapConfigRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrapConfigRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrapConfigRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrapConfigRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrapConfigRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecBootstrapConfigRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput() MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) ToMachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) Elem() MachinePoolSpecTemplateSpecBootstrapConfigRefOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) MachinePoolSpecTemplateSpecBootstrapConfigRef {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecTemplateSpecBootstrapConfigRef
		return ret
	}).(MachinePoolSpecTemplateSpecBootstrapConfigRefOutput)
}

// API version of the referent.
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachinePoolSpecTemplateSpecInfrastructureRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachinePoolSpecTemplateSpecInfrastructureRefInput is an input type that accepts MachinePoolSpecTemplateSpecInfrastructureRefArgs and MachinePoolSpecTemplateSpecInfrastructureRefOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecInfrastructureRefInput` via:
//
//	MachinePoolSpecTemplateSpecInfrastructureRefArgs{...}
type MachinePoolSpecTemplateSpecInfrastructureRefInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecInfrastructureRefOutput() MachinePoolSpecTemplateSpecInfrastructureRefOutput
	ToMachinePoolSpecTemplateSpecInfrastructureRefOutputWithContext(context.Context) MachinePoolSpecTemplateSpecInfrastructureRefOutput
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachinePoolSpecTemplateSpecInfrastructureRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachinePoolSpecTemplateSpecInfrastructureRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (i MachinePoolSpecTemplateSpecInfrastructureRefArgs) ToMachinePoolSpecTemplateSpecInfrastructureRefOutput() MachinePoolSpecTemplateSpecInfrastructureRefOutput {
	return i.ToMachinePoolSpecTemplateSpecInfrastructureRefOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecInfrastructureRefArgs) ToMachinePoolSpecTemplateSpecInfrastructureRefOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecInfrastructureRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecInfrastructureRefOutput)
}

func (i MachinePoolSpecTemplateSpecInfrastructureRefArgs) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutput() MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i MachinePoolSpecTemplateSpecInfrastructureRefArgs) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecInfrastructureRefOutput).ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx)
}

// MachinePoolSpecTemplateSpecInfrastructureRefPtrInput is an input type that accepts MachinePoolSpecTemplateSpecInfrastructureRefArgs, MachinePoolSpecTemplateSpecInfrastructureRefPtr and MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput values.
// You can construct a concrete instance of `MachinePoolSpecTemplateSpecInfrastructureRefPtrInput` via:
//
//	        MachinePoolSpecTemplateSpecInfrastructureRefArgs{...}
//
//	or:
//
//	        nil
type MachinePoolSpecTemplateSpecInfrastructureRefPtrInput interface {
	pulumi.Input

	ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutput() MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput
	ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Context) MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput
}

type machinePoolSpecTemplateSpecInfrastructureRefPtrType MachinePoolSpecTemplateSpecInfrastructureRefArgs

func MachinePoolSpecTemplateSpecInfrastructureRefPtr(v *MachinePoolSpecTemplateSpecInfrastructureRefArgs) MachinePoolSpecTemplateSpecInfrastructureRefPtrInput {
	return (*machinePoolSpecTemplateSpecInfrastructureRefPtrType)(v)
}

func (*machinePoolSpecTemplateSpecInfrastructureRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (i *machinePoolSpecTemplateSpecInfrastructureRefPtrType) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutput() MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return i.ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i *machinePoolSpecTemplateSpecInfrastructureRefPtrType) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachinePoolSpecTemplateSpecInfrastructureRefOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecInfrastructureRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) ToMachinePoolSpecTemplateSpecInfrastructureRefOutput() MachinePoolSpecTemplateSpecInfrastructureRefOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) ToMachinePoolSpecTemplateSpecInfrastructureRefOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecInfrastructureRefOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutput() MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolSpecTemplateSpecInfrastructureRef) *MachinePoolSpecTemplateSpecInfrastructureRef {
		return &v
	}).(MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput)
}

// API version of the referent.
func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecInfrastructureRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecInfrastructureRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecInfrastructureRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecInfrastructureRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecInfrastructureRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecInfrastructureRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachinePoolSpecTemplateSpecInfrastructureRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolSpecTemplateSpecInfrastructureRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutput() MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) ToMachinePoolSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) Elem() MachinePoolSpecTemplateSpecInfrastructureRefOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) MachinePoolSpecTemplateSpecInfrastructureRef {
		if v != nil {
			return *v
		}
		var ret MachinePoolSpecTemplateSpecInfrastructureRef
		return ret
	}).(MachinePoolSpecTemplateSpecInfrastructureRefOutput)
}

// API version of the referent.
func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// MachinePoolStatus defines the observed state of MachinePool.
type MachinePoolStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// BootstrapReady is the state of the bootstrap provider.
	BootstrapReady *bool `pulumi:"bootstrapReady"`
	// Conditions define the current service state of the MachinePool.
	Conditions []MachinePoolStatusConditions `pulumi:"conditions"`
	// FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
	FailureMessage *string `pulumi:"failureMessage"`
	// FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
	FailureReason *string `pulumi:"failureReason"`
	// InfrastructureReady is the state of the infrastructure provider.
	InfrastructureReady *bool `pulumi:"infrastructureReady"`
	// NodeRefs will point to the corresponding Nodes if it they exist.
	NodeRefs []MachinePoolStatusNodeRefs `pulumi:"nodeRefs"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase *string `pulumi:"phase"`
	// The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas.
	Replicas *int `pulumi:"replicas"`
	// Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
}

// MachinePoolStatusInput is an input type that accepts MachinePoolStatusArgs and MachinePoolStatusOutput values.
// You can construct a concrete instance of `MachinePoolStatusInput` via:
//
//	MachinePoolStatusArgs{...}
type MachinePoolStatusInput interface {
	pulumi.Input

	ToMachinePoolStatusOutput() MachinePoolStatusOutput
	ToMachinePoolStatusOutputWithContext(context.Context) MachinePoolStatusOutput
}

// MachinePoolStatus defines the observed state of MachinePool.
type MachinePoolStatusArgs struct {
	// The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// BootstrapReady is the state of the bootstrap provider.
	BootstrapReady pulumi.BoolPtrInput `pulumi:"bootstrapReady"`
	// Conditions define the current service state of the MachinePool.
	Conditions MachinePoolStatusConditionsArrayInput `pulumi:"conditions"`
	// FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
	FailureMessage pulumi.StringPtrInput `pulumi:"failureMessage"`
	// FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// InfrastructureReady is the state of the infrastructure provider.
	InfrastructureReady pulumi.BoolPtrInput `pulumi:"infrastructureReady"`
	// NodeRefs will point to the corresponding Nodes if it they exist.
	NodeRefs MachinePoolStatusNodeRefsArrayInput `pulumi:"nodeRefs"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
}

func (MachinePoolStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolStatus)(nil)).Elem()
}

func (i MachinePoolStatusArgs) ToMachinePoolStatusOutput() MachinePoolStatusOutput {
	return i.ToMachinePoolStatusOutputWithContext(context.Background())
}

func (i MachinePoolStatusArgs) ToMachinePoolStatusOutputWithContext(ctx context.Context) MachinePoolStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolStatusOutput)
}

func (i MachinePoolStatusArgs) ToMachinePoolStatusPtrOutput() MachinePoolStatusPtrOutput {
	return i.ToMachinePoolStatusPtrOutputWithContext(context.Background())
}

func (i MachinePoolStatusArgs) ToMachinePoolStatusPtrOutputWithContext(ctx context.Context) MachinePoolStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolStatusOutput).ToMachinePoolStatusPtrOutputWithContext(ctx)
}

// MachinePoolStatusPtrInput is an input type that accepts MachinePoolStatusArgs, MachinePoolStatusPtr and MachinePoolStatusPtrOutput values.
// You can construct a concrete instance of `MachinePoolStatusPtrInput` via:
//
//	        MachinePoolStatusArgs{...}
//
//	or:
//
//	        nil
type MachinePoolStatusPtrInput interface {
	pulumi.Input

	ToMachinePoolStatusPtrOutput() MachinePoolStatusPtrOutput
	ToMachinePoolStatusPtrOutputWithContext(context.Context) MachinePoolStatusPtrOutput
}

type machinePoolStatusPtrType MachinePoolStatusArgs

func MachinePoolStatusPtr(v *MachinePoolStatusArgs) MachinePoolStatusPtrInput {
	return (*machinePoolStatusPtrType)(v)
}

func (*machinePoolStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolStatus)(nil)).Elem()
}

func (i *machinePoolStatusPtrType) ToMachinePoolStatusPtrOutput() MachinePoolStatusPtrOutput {
	return i.ToMachinePoolStatusPtrOutputWithContext(context.Background())
}

func (i *machinePoolStatusPtrType) ToMachinePoolStatusPtrOutputWithContext(ctx context.Context) MachinePoolStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolStatusPtrOutput)
}

// MachinePoolStatus defines the observed state of MachinePool.
type MachinePoolStatusOutput struct{ *pulumi.OutputState }

func (MachinePoolStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolStatus)(nil)).Elem()
}

func (o MachinePoolStatusOutput) ToMachinePoolStatusOutput() MachinePoolStatusOutput {
	return o
}

func (o MachinePoolStatusOutput) ToMachinePoolStatusOutputWithContext(ctx context.Context) MachinePoolStatusOutput {
	return o
}

func (o MachinePoolStatusOutput) ToMachinePoolStatusPtrOutput() MachinePoolStatusPtrOutput {
	return o.ToMachinePoolStatusPtrOutputWithContext(context.Background())
}

func (o MachinePoolStatusOutput) ToMachinePoolStatusPtrOutputWithContext(ctx context.Context) MachinePoolStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePoolStatus) *MachinePoolStatus {
		return &v
	}).(MachinePoolStatusPtrOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
func (o MachinePoolStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// BootstrapReady is the state of the bootstrap provider.
func (o MachinePoolStatusOutput) BootstrapReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *bool { return v.BootstrapReady }).(pulumi.BoolPtrOutput)
}

// Conditions define the current service state of the MachinePool.
func (o MachinePoolStatusOutput) Conditions() MachinePoolStatusConditionsArrayOutput {
	return o.ApplyT(func(v MachinePoolStatus) []MachinePoolStatusConditions { return v.Conditions }).(MachinePoolStatusConditionsArrayOutput)
}

// FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
func (o MachinePoolStatusOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *string { return v.FailureMessage }).(pulumi.StringPtrOutput)
}

// FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
func (o MachinePoolStatusOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// InfrastructureReady is the state of the infrastructure provider.
func (o MachinePoolStatusOutput) InfrastructureReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *bool { return v.InfrastructureReady }).(pulumi.BoolPtrOutput)
}

// NodeRefs will point to the corresponding Nodes if it they exist.
func (o MachinePoolStatusOutput) NodeRefs() MachinePoolStatusNodeRefsArrayOutput {
	return o.ApplyT(func(v MachinePoolStatus) []MachinePoolStatusNodeRefs { return v.NodeRefs }).(MachinePoolStatusNodeRefsArrayOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o MachinePoolStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o MachinePoolStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
func (o MachinePoolStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas.
func (o MachinePoolStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
func (o MachinePoolStatusOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachinePoolStatus) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

type MachinePoolStatusPtrOutput struct{ *pulumi.OutputState }

func (MachinePoolStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePoolStatus)(nil)).Elem()
}

func (o MachinePoolStatusPtrOutput) ToMachinePoolStatusPtrOutput() MachinePoolStatusPtrOutput {
	return o
}

func (o MachinePoolStatusPtrOutput) ToMachinePoolStatusPtrOutputWithContext(ctx context.Context) MachinePoolStatusPtrOutput {
	return o
}

func (o MachinePoolStatusPtrOutput) Elem() MachinePoolStatusOutput {
	return o.ApplyT(func(v *MachinePoolStatus) MachinePoolStatus {
		if v != nil {
			return *v
		}
		var ret MachinePoolStatus
		return ret
	}).(MachinePoolStatusOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
func (o MachinePoolStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// BootstrapReady is the state of the bootstrap provider.
func (o MachinePoolStatusPtrOutput) BootstrapReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *bool {
		if v == nil {
			return nil
		}
		return v.BootstrapReady
	}).(pulumi.BoolPtrOutput)
}

// Conditions define the current service state of the MachinePool.
func (o MachinePoolStatusPtrOutput) Conditions() MachinePoolStatusConditionsArrayOutput {
	return o.ApplyT(func(v *MachinePoolStatus) []MachinePoolStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(MachinePoolStatusConditionsArrayOutput)
}

// FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
func (o MachinePoolStatusPtrOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureMessage
	}).(pulumi.StringPtrOutput)
}

// FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
func (o MachinePoolStatusPtrOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureReason
	}).(pulumi.StringPtrOutput)
}

// InfrastructureReady is the state of the infrastructure provider.
func (o MachinePoolStatusPtrOutput) InfrastructureReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *bool {
		if v == nil {
			return nil
		}
		return v.InfrastructureReady
	}).(pulumi.BoolPtrOutput)
}

// NodeRefs will point to the corresponding Nodes if it they exist.
func (o MachinePoolStatusPtrOutput) NodeRefs() MachinePoolStatusNodeRefsArrayOutput {
	return o.ApplyT(func(v *MachinePoolStatus) []MachinePoolStatusNodeRefs {
		if v == nil {
			return nil
		}
		return v.NodeRefs
	}).(MachinePoolStatusNodeRefsArrayOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o MachinePoolStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o MachinePoolStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
func (o MachinePoolStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas.
func (o MachinePoolStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
func (o MachinePoolStatusPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachinePoolStatus) *int {
		if v == nil {
			return nil
		}
		return v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type MachinePoolStatusConditions struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type string `pulumi:"type"`
}

// MachinePoolStatusConditionsInput is an input type that accepts MachinePoolStatusConditionsArgs and MachinePoolStatusConditionsOutput values.
// You can construct a concrete instance of `MachinePoolStatusConditionsInput` via:
//
//	MachinePoolStatusConditionsArgs{...}
type MachinePoolStatusConditionsInput interface {
	pulumi.Input

	ToMachinePoolStatusConditionsOutput() MachinePoolStatusConditionsOutput
	ToMachinePoolStatusConditionsOutputWithContext(context.Context) MachinePoolStatusConditionsOutput
}

// Condition defines an observation of a Cluster API resource operational state.
type MachinePoolStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MachinePoolStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolStatusConditions)(nil)).Elem()
}

func (i MachinePoolStatusConditionsArgs) ToMachinePoolStatusConditionsOutput() MachinePoolStatusConditionsOutput {
	return i.ToMachinePoolStatusConditionsOutputWithContext(context.Background())
}

func (i MachinePoolStatusConditionsArgs) ToMachinePoolStatusConditionsOutputWithContext(ctx context.Context) MachinePoolStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolStatusConditionsOutput)
}

// MachinePoolStatusConditionsArrayInput is an input type that accepts MachinePoolStatusConditionsArray and MachinePoolStatusConditionsArrayOutput values.
// You can construct a concrete instance of `MachinePoolStatusConditionsArrayInput` via:
//
//	MachinePoolStatusConditionsArray{ MachinePoolStatusConditionsArgs{...} }
type MachinePoolStatusConditionsArrayInput interface {
	pulumi.Input

	ToMachinePoolStatusConditionsArrayOutput() MachinePoolStatusConditionsArrayOutput
	ToMachinePoolStatusConditionsArrayOutputWithContext(context.Context) MachinePoolStatusConditionsArrayOutput
}

type MachinePoolStatusConditionsArray []MachinePoolStatusConditionsInput

func (MachinePoolStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachinePoolStatusConditions)(nil)).Elem()
}

func (i MachinePoolStatusConditionsArray) ToMachinePoolStatusConditionsArrayOutput() MachinePoolStatusConditionsArrayOutput {
	return i.ToMachinePoolStatusConditionsArrayOutputWithContext(context.Background())
}

func (i MachinePoolStatusConditionsArray) ToMachinePoolStatusConditionsArrayOutputWithContext(ctx context.Context) MachinePoolStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolStatusConditionsArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type MachinePoolStatusConditionsOutput struct{ *pulumi.OutputState }

func (MachinePoolStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolStatusConditions)(nil)).Elem()
}

func (o MachinePoolStatusConditionsOutput) ToMachinePoolStatusConditionsOutput() MachinePoolStatusConditionsOutput {
	return o
}

func (o MachinePoolStatusConditionsOutput) ToMachinePoolStatusConditionsOutputWithContext(ctx context.Context) MachinePoolStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
func (o MachinePoolStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition. This field may be empty.
func (o MachinePoolStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
func (o MachinePoolStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
func (o MachinePoolStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o MachinePoolStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
func (o MachinePoolStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MachinePoolStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type MachinePoolStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (MachinePoolStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachinePoolStatusConditions)(nil)).Elem()
}

func (o MachinePoolStatusConditionsArrayOutput) ToMachinePoolStatusConditionsArrayOutput() MachinePoolStatusConditionsArrayOutput {
	return o
}

func (o MachinePoolStatusConditionsArrayOutput) ToMachinePoolStatusConditionsArrayOutputWithContext(ctx context.Context) MachinePoolStatusConditionsArrayOutput {
	return o
}

func (o MachinePoolStatusConditionsArrayOutput) Index(i pulumi.IntInput) MachinePoolStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachinePoolStatusConditions {
		return vs[0].([]MachinePoolStatusConditions)[vs[1].(int)]
	}).(MachinePoolStatusConditionsOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type MachinePoolStatusNodeRefs struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachinePoolStatusNodeRefsInput is an input type that accepts MachinePoolStatusNodeRefsArgs and MachinePoolStatusNodeRefsOutput values.
// You can construct a concrete instance of `MachinePoolStatusNodeRefsInput` via:
//
//	MachinePoolStatusNodeRefsArgs{...}
type MachinePoolStatusNodeRefsInput interface {
	pulumi.Input

	ToMachinePoolStatusNodeRefsOutput() MachinePoolStatusNodeRefsOutput
	ToMachinePoolStatusNodeRefsOutputWithContext(context.Context) MachinePoolStatusNodeRefsOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type MachinePoolStatusNodeRefsArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachinePoolStatusNodeRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolStatusNodeRefs)(nil)).Elem()
}

func (i MachinePoolStatusNodeRefsArgs) ToMachinePoolStatusNodeRefsOutput() MachinePoolStatusNodeRefsOutput {
	return i.ToMachinePoolStatusNodeRefsOutputWithContext(context.Background())
}

func (i MachinePoolStatusNodeRefsArgs) ToMachinePoolStatusNodeRefsOutputWithContext(ctx context.Context) MachinePoolStatusNodeRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolStatusNodeRefsOutput)
}

// MachinePoolStatusNodeRefsArrayInput is an input type that accepts MachinePoolStatusNodeRefsArray and MachinePoolStatusNodeRefsArrayOutput values.
// You can construct a concrete instance of `MachinePoolStatusNodeRefsArrayInput` via:
//
//	MachinePoolStatusNodeRefsArray{ MachinePoolStatusNodeRefsArgs{...} }
type MachinePoolStatusNodeRefsArrayInput interface {
	pulumi.Input

	ToMachinePoolStatusNodeRefsArrayOutput() MachinePoolStatusNodeRefsArrayOutput
	ToMachinePoolStatusNodeRefsArrayOutputWithContext(context.Context) MachinePoolStatusNodeRefsArrayOutput
}

type MachinePoolStatusNodeRefsArray []MachinePoolStatusNodeRefsInput

func (MachinePoolStatusNodeRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachinePoolStatusNodeRefs)(nil)).Elem()
}

func (i MachinePoolStatusNodeRefsArray) ToMachinePoolStatusNodeRefsArrayOutput() MachinePoolStatusNodeRefsArrayOutput {
	return i.ToMachinePoolStatusNodeRefsArrayOutputWithContext(context.Background())
}

func (i MachinePoolStatusNodeRefsArray) ToMachinePoolStatusNodeRefsArrayOutputWithContext(ctx context.Context) MachinePoolStatusNodeRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePoolStatusNodeRefsArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type MachinePoolStatusNodeRefsOutput struct{ *pulumi.OutputState }

func (MachinePoolStatusNodeRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePoolStatusNodeRefs)(nil)).Elem()
}

func (o MachinePoolStatusNodeRefsOutput) ToMachinePoolStatusNodeRefsOutput() MachinePoolStatusNodeRefsOutput {
	return o
}

func (o MachinePoolStatusNodeRefsOutput) ToMachinePoolStatusNodeRefsOutputWithContext(ctx context.Context) MachinePoolStatusNodeRefsOutput {
	return o
}

// API version of the referent.
func (o MachinePoolStatusNodeRefsOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusNodeRefs) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachinePoolStatusNodeRefsOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusNodeRefs) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachinePoolStatusNodeRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusNodeRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachinePoolStatusNodeRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusNodeRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachinePoolStatusNodeRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusNodeRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachinePoolStatusNodeRefsOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusNodeRefs) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachinePoolStatusNodeRefsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachinePoolStatusNodeRefs) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachinePoolStatusNodeRefsArrayOutput struct{ *pulumi.OutputState }

func (MachinePoolStatusNodeRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachinePoolStatusNodeRefs)(nil)).Elem()
}

func (o MachinePoolStatusNodeRefsArrayOutput) ToMachinePoolStatusNodeRefsArrayOutput() MachinePoolStatusNodeRefsArrayOutput {
	return o
}

func (o MachinePoolStatusNodeRefsArrayOutput) ToMachinePoolStatusNodeRefsArrayOutputWithContext(ctx context.Context) MachinePoolStatusNodeRefsArrayOutput {
	return o
}

func (o MachinePoolStatusNodeRefsArrayOutput) Index(i pulumi.IntInput) MachinePoolStatusNodeRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachinePoolStatusNodeRefs {
		return vs[0].([]MachinePoolStatusNodeRefs)[vs[1].(int)]
	}).(MachinePoolStatusNodeRefsOutput)
}

// MachineSet is the Schema for the machinesets API.
//
//	Deprecated: This type will be removed in one of the next releases.
type MachineSetType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachineSetSpec defines the desired state of MachineSet.
	Spec *MachineSetSpec `pulumi:"spec"`
	// MachineSetStatus defines the observed state of MachineSet.
	Status *MachineSetStatus `pulumi:"status"`
}

type MachineSetMetadata struct {
}

// MachineSetSpec defines the desired state of MachineSet.
type MachineSetSpec struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
	DeletePolicy *string `pulumi:"deletePolicy"`
	// MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
	Replicas *int `pulumi:"replicas"`
	// Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector MachineSetSpecSelector `pulumi:"selector"`
	// Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
	Template *MachineSetSpecTemplate `pulumi:"template"`
}

// MachineSetSpecInput is an input type that accepts MachineSetSpecArgs and MachineSetSpecOutput values.
// You can construct a concrete instance of `MachineSetSpecInput` via:
//
//	MachineSetSpecArgs{...}
type MachineSetSpecInput interface {
	pulumi.Input

	ToMachineSetSpecOutput() MachineSetSpecOutput
	ToMachineSetSpecOutputWithContext(context.Context) MachineSetSpecOutput
}

// MachineSetSpec defines the desired state of MachineSet.
type MachineSetSpecArgs struct {
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
	DeletePolicy pulumi.StringPtrInput `pulumi:"deletePolicy"`
	// MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector MachineSetSpecSelectorInput `pulumi:"selector"`
	// Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
	Template MachineSetSpecTemplatePtrInput `pulumi:"template"`
}

func (MachineSetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpec)(nil)).Elem()
}

func (i MachineSetSpecArgs) ToMachineSetSpecOutput() MachineSetSpecOutput {
	return i.ToMachineSetSpecOutputWithContext(context.Background())
}

func (i MachineSetSpecArgs) ToMachineSetSpecOutputWithContext(ctx context.Context) MachineSetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecOutput)
}

func (i MachineSetSpecArgs) ToMachineSetSpecPtrOutput() MachineSetSpecPtrOutput {
	return i.ToMachineSetSpecPtrOutputWithContext(context.Background())
}

func (i MachineSetSpecArgs) ToMachineSetSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecOutput).ToMachineSetSpecPtrOutputWithContext(ctx)
}

// MachineSetSpecPtrInput is an input type that accepts MachineSetSpecArgs, MachineSetSpecPtr and MachineSetSpecPtrOutput values.
// You can construct a concrete instance of `MachineSetSpecPtrInput` via:
//
//	        MachineSetSpecArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecPtrInput interface {
	pulumi.Input

	ToMachineSetSpecPtrOutput() MachineSetSpecPtrOutput
	ToMachineSetSpecPtrOutputWithContext(context.Context) MachineSetSpecPtrOutput
}

type machineSetSpecPtrType MachineSetSpecArgs

func MachineSetSpecPtr(v *MachineSetSpecArgs) MachineSetSpecPtrInput {
	return (*machineSetSpecPtrType)(v)
}

func (*machineSetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpec)(nil)).Elem()
}

func (i *machineSetSpecPtrType) ToMachineSetSpecPtrOutput() MachineSetSpecPtrOutput {
	return i.ToMachineSetSpecPtrOutputWithContext(context.Background())
}

func (i *machineSetSpecPtrType) ToMachineSetSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecPtrOutput)
}

// MachineSetSpec defines the desired state of MachineSet.
type MachineSetSpecOutput struct{ *pulumi.OutputState }

func (MachineSetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpec)(nil)).Elem()
}

func (o MachineSetSpecOutput) ToMachineSetSpecOutput() MachineSetSpecOutput {
	return o
}

func (o MachineSetSpecOutput) ToMachineSetSpecOutputWithContext(ctx context.Context) MachineSetSpecOutput {
	return o
}

func (o MachineSetSpecOutput) ToMachineSetSpecPtrOutput() MachineSetSpecPtrOutput {
	return o.ToMachineSetSpecPtrOutputWithContext(context.Background())
}

func (o MachineSetSpecOutput) ToMachineSetSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpec) *MachineSetSpec {
		return &v
	}).(MachineSetSpecPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineSetSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
func (o MachineSetSpecOutput) DeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpec) *string { return v.DeletePolicy }).(pulumi.StringPtrOutput)
}

// MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
func (o MachineSetSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineSetSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
func (o MachineSetSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineSetSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o MachineSetSpecOutput) Selector() MachineSetSpecSelectorOutput {
	return o.ApplyT(func(v MachineSetSpec) MachineSetSpecSelector { return v.Selector }).(MachineSetSpecSelectorOutput)
}

// Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
func (o MachineSetSpecOutput) Template() MachineSetSpecTemplatePtrOutput {
	return o.ApplyT(func(v MachineSetSpec) *MachineSetSpecTemplate { return v.Template }).(MachineSetSpecTemplatePtrOutput)
}

type MachineSetSpecPtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpec)(nil)).Elem()
}

func (o MachineSetSpecPtrOutput) ToMachineSetSpecPtrOutput() MachineSetSpecPtrOutput {
	return o
}

func (o MachineSetSpecPtrOutput) ToMachineSetSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecPtrOutput {
	return o
}

func (o MachineSetSpecPtrOutput) Elem() MachineSetSpecOutput {
	return o.ApplyT(func(v *MachineSetSpec) MachineSetSpec {
		if v != nil {
			return *v
		}
		var ret MachineSetSpec
		return ret
	}).(MachineSetSpecOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineSetSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
func (o MachineSetSpecPtrOutput) DeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpec) *string {
		if v == nil {
			return nil
		}
		return v.DeletePolicy
	}).(pulumi.StringPtrOutput)
}

// MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
func (o MachineSetSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineSetSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
func (o MachineSetSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineSetSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o MachineSetSpecPtrOutput) Selector() MachineSetSpecSelectorPtrOutput {
	return o.ApplyT(func(v *MachineSetSpec) *MachineSetSpecSelector {
		if v == nil {
			return nil
		}
		return &v.Selector
	}).(MachineSetSpecSelectorPtrOutput)
}

// Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
func (o MachineSetSpecPtrOutput) Template() MachineSetSpecTemplatePtrOutput {
	return o.ApplyT(func(v *MachineSetSpec) *MachineSetSpecTemplate {
		if v == nil {
			return nil
		}
		return v.Template
	}).(MachineSetSpecTemplatePtrOutput)
}

// Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
type MachineSetSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []MachineSetSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// MachineSetSpecSelectorInput is an input type that accepts MachineSetSpecSelectorArgs and MachineSetSpecSelectorOutput values.
// You can construct a concrete instance of `MachineSetSpecSelectorInput` via:
//
//	MachineSetSpecSelectorArgs{...}
type MachineSetSpecSelectorInput interface {
	pulumi.Input

	ToMachineSetSpecSelectorOutput() MachineSetSpecSelectorOutput
	ToMachineSetSpecSelectorOutputWithContext(context.Context) MachineSetSpecSelectorOutput
}

// Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
type MachineSetSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions MachineSetSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (MachineSetSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecSelector)(nil)).Elem()
}

func (i MachineSetSpecSelectorArgs) ToMachineSetSpecSelectorOutput() MachineSetSpecSelectorOutput {
	return i.ToMachineSetSpecSelectorOutputWithContext(context.Background())
}

func (i MachineSetSpecSelectorArgs) ToMachineSetSpecSelectorOutputWithContext(ctx context.Context) MachineSetSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecSelectorOutput)
}

func (i MachineSetSpecSelectorArgs) ToMachineSetSpecSelectorPtrOutput() MachineSetSpecSelectorPtrOutput {
	return i.ToMachineSetSpecSelectorPtrOutputWithContext(context.Background())
}

func (i MachineSetSpecSelectorArgs) ToMachineSetSpecSelectorPtrOutputWithContext(ctx context.Context) MachineSetSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecSelectorOutput).ToMachineSetSpecSelectorPtrOutputWithContext(ctx)
}

// MachineSetSpecSelectorPtrInput is an input type that accepts MachineSetSpecSelectorArgs, MachineSetSpecSelectorPtr and MachineSetSpecSelectorPtrOutput values.
// You can construct a concrete instance of `MachineSetSpecSelectorPtrInput` via:
//
//	        MachineSetSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecSelectorPtrInput interface {
	pulumi.Input

	ToMachineSetSpecSelectorPtrOutput() MachineSetSpecSelectorPtrOutput
	ToMachineSetSpecSelectorPtrOutputWithContext(context.Context) MachineSetSpecSelectorPtrOutput
}

type machineSetSpecSelectorPtrType MachineSetSpecSelectorArgs

func MachineSetSpecSelectorPtr(v *MachineSetSpecSelectorArgs) MachineSetSpecSelectorPtrInput {
	return (*machineSetSpecSelectorPtrType)(v)
}

func (*machineSetSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecSelector)(nil)).Elem()
}

func (i *machineSetSpecSelectorPtrType) ToMachineSetSpecSelectorPtrOutput() MachineSetSpecSelectorPtrOutput {
	return i.ToMachineSetSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *machineSetSpecSelectorPtrType) ToMachineSetSpecSelectorPtrOutputWithContext(ctx context.Context) MachineSetSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecSelectorPtrOutput)
}

// Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
type MachineSetSpecSelectorOutput struct{ *pulumi.OutputState }

func (MachineSetSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecSelector)(nil)).Elem()
}

func (o MachineSetSpecSelectorOutput) ToMachineSetSpecSelectorOutput() MachineSetSpecSelectorOutput {
	return o
}

func (o MachineSetSpecSelectorOutput) ToMachineSetSpecSelectorOutputWithContext(ctx context.Context) MachineSetSpecSelectorOutput {
	return o
}

func (o MachineSetSpecSelectorOutput) ToMachineSetSpecSelectorPtrOutput() MachineSetSpecSelectorPtrOutput {
	return o.ToMachineSetSpecSelectorPtrOutputWithContext(context.Background())
}

func (o MachineSetSpecSelectorOutput) ToMachineSetSpecSelectorPtrOutputWithContext(ctx context.Context) MachineSetSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpecSelector) *MachineSetSpecSelector {
		return &v
	}).(MachineSetSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineSetSpecSelectorOutput) MatchExpressions() MachineSetSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v MachineSetSpecSelector) []MachineSetSpecSelectorMatchExpressions { return v.MatchExpressions }).(MachineSetSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineSetSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineSetSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type MachineSetSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecSelector)(nil)).Elem()
}

func (o MachineSetSpecSelectorPtrOutput) ToMachineSetSpecSelectorPtrOutput() MachineSetSpecSelectorPtrOutput {
	return o
}

func (o MachineSetSpecSelectorPtrOutput) ToMachineSetSpecSelectorPtrOutputWithContext(ctx context.Context) MachineSetSpecSelectorPtrOutput {
	return o
}

func (o MachineSetSpecSelectorPtrOutput) Elem() MachineSetSpecSelectorOutput {
	return o.ApplyT(func(v *MachineSetSpecSelector) MachineSetSpecSelector {
		if v != nil {
			return *v
		}
		var ret MachineSetSpecSelector
		return ret
	}).(MachineSetSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineSetSpecSelectorPtrOutput) MatchExpressions() MachineSetSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *MachineSetSpecSelector) []MachineSetSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(MachineSetSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineSetSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineSetSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineSetSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// MachineSetSpecSelectorMatchExpressionsInput is an input type that accepts MachineSetSpecSelectorMatchExpressionsArgs and MachineSetSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `MachineSetSpecSelectorMatchExpressionsInput` via:
//
//	MachineSetSpecSelectorMatchExpressionsArgs{...}
type MachineSetSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToMachineSetSpecSelectorMatchExpressionsOutput() MachineSetSpecSelectorMatchExpressionsOutput
	ToMachineSetSpecSelectorMatchExpressionsOutputWithContext(context.Context) MachineSetSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineSetSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MachineSetSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineSetSpecSelectorMatchExpressionsArgs) ToMachineSetSpecSelectorMatchExpressionsOutput() MachineSetSpecSelectorMatchExpressionsOutput {
	return i.ToMachineSetSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i MachineSetSpecSelectorMatchExpressionsArgs) ToMachineSetSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineSetSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecSelectorMatchExpressionsOutput)
}

// MachineSetSpecSelectorMatchExpressionsArrayInput is an input type that accepts MachineSetSpecSelectorMatchExpressionsArray and MachineSetSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `MachineSetSpecSelectorMatchExpressionsArrayInput` via:
//
//	MachineSetSpecSelectorMatchExpressionsArray{ MachineSetSpecSelectorMatchExpressionsArgs{...} }
type MachineSetSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToMachineSetSpecSelectorMatchExpressionsArrayOutput() MachineSetSpecSelectorMatchExpressionsArrayOutput
	ToMachineSetSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) MachineSetSpecSelectorMatchExpressionsArrayOutput
}

type MachineSetSpecSelectorMatchExpressionsArray []MachineSetSpecSelectorMatchExpressionsInput

func (MachineSetSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineSetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineSetSpecSelectorMatchExpressionsArray) ToMachineSetSpecSelectorMatchExpressionsArrayOutput() MachineSetSpecSelectorMatchExpressionsArrayOutput {
	return i.ToMachineSetSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i MachineSetSpecSelectorMatchExpressionsArray) ToMachineSetSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineSetSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineSetSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (MachineSetSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineSetSpecSelectorMatchExpressionsOutput) ToMachineSetSpecSelectorMatchExpressionsOutput() MachineSetSpecSelectorMatchExpressionsOutput {
	return o
}

func (o MachineSetSpecSelectorMatchExpressionsOutput) ToMachineSetSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineSetSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o MachineSetSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o MachineSetSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o MachineSetSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineSetSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MachineSetSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (MachineSetSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineSetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineSetSpecSelectorMatchExpressionsArrayOutput) ToMachineSetSpecSelectorMatchExpressionsArrayOutput() MachineSetSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineSetSpecSelectorMatchExpressionsArrayOutput) ToMachineSetSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineSetSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineSetSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) MachineSetSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineSetSpecSelectorMatchExpressions {
		return vs[0].([]MachineSetSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(MachineSetSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MachineSetSpecSelectorMatchLabels struct {
}

// Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
type MachineSetSpecTemplate struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *MachineSetSpecTemplateMetadata `pulumi:"metadata"`
	// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *MachineSetSpecTemplateSpec `pulumi:"spec"`
}

// MachineSetSpecTemplateInput is an input type that accepts MachineSetSpecTemplateArgs and MachineSetSpecTemplateOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateInput` via:
//
//	MachineSetSpecTemplateArgs{...}
type MachineSetSpecTemplateInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateOutput() MachineSetSpecTemplateOutput
	ToMachineSetSpecTemplateOutputWithContext(context.Context) MachineSetSpecTemplateOutput
}

// Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
type MachineSetSpecTemplateArgs struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata MachineSetSpecTemplateMetadataPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec MachineSetSpecTemplateSpecPtrInput `pulumi:"spec"`
}

func (MachineSetSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplate)(nil)).Elem()
}

func (i MachineSetSpecTemplateArgs) ToMachineSetSpecTemplateOutput() MachineSetSpecTemplateOutput {
	return i.ToMachineSetSpecTemplateOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateArgs) ToMachineSetSpecTemplateOutputWithContext(ctx context.Context) MachineSetSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateOutput)
}

func (i MachineSetSpecTemplateArgs) ToMachineSetSpecTemplatePtrOutput() MachineSetSpecTemplatePtrOutput {
	return i.ToMachineSetSpecTemplatePtrOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateArgs) ToMachineSetSpecTemplatePtrOutputWithContext(ctx context.Context) MachineSetSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateOutput).ToMachineSetSpecTemplatePtrOutputWithContext(ctx)
}

// MachineSetSpecTemplatePtrInput is an input type that accepts MachineSetSpecTemplateArgs, MachineSetSpecTemplatePtr and MachineSetSpecTemplatePtrOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplatePtrInput` via:
//
//	        MachineSetSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecTemplatePtrInput interface {
	pulumi.Input

	ToMachineSetSpecTemplatePtrOutput() MachineSetSpecTemplatePtrOutput
	ToMachineSetSpecTemplatePtrOutputWithContext(context.Context) MachineSetSpecTemplatePtrOutput
}

type machineSetSpecTemplatePtrType MachineSetSpecTemplateArgs

func MachineSetSpecTemplatePtr(v *MachineSetSpecTemplateArgs) MachineSetSpecTemplatePtrInput {
	return (*machineSetSpecTemplatePtrType)(v)
}

func (*machineSetSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplate)(nil)).Elem()
}

func (i *machineSetSpecTemplatePtrType) ToMachineSetSpecTemplatePtrOutput() MachineSetSpecTemplatePtrOutput {
	return i.ToMachineSetSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *machineSetSpecTemplatePtrType) ToMachineSetSpecTemplatePtrOutputWithContext(ctx context.Context) MachineSetSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplatePtrOutput)
}

// Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
type MachineSetSpecTemplateOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplate)(nil)).Elem()
}

func (o MachineSetSpecTemplateOutput) ToMachineSetSpecTemplateOutput() MachineSetSpecTemplateOutput {
	return o
}

func (o MachineSetSpecTemplateOutput) ToMachineSetSpecTemplateOutputWithContext(ctx context.Context) MachineSetSpecTemplateOutput {
	return o
}

func (o MachineSetSpecTemplateOutput) ToMachineSetSpecTemplatePtrOutput() MachineSetSpecTemplatePtrOutput {
	return o.ToMachineSetSpecTemplatePtrOutputWithContext(context.Background())
}

func (o MachineSetSpecTemplateOutput) ToMachineSetSpecTemplatePtrOutputWithContext(ctx context.Context) MachineSetSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpecTemplate) *MachineSetSpecTemplate {
		return &v
	}).(MachineSetSpecTemplatePtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MachineSetSpecTemplateOutput) Metadata() MachineSetSpecTemplateMetadataPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplate) *MachineSetSpecTemplateMetadata { return v.Metadata }).(MachineSetSpecTemplateMetadataPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o MachineSetSpecTemplateOutput) Spec() MachineSetSpecTemplateSpecPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplate) *MachineSetSpecTemplateSpec { return v.Spec }).(MachineSetSpecTemplateSpecPtrOutput)
}

type MachineSetSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplate)(nil)).Elem()
}

func (o MachineSetSpecTemplatePtrOutput) ToMachineSetSpecTemplatePtrOutput() MachineSetSpecTemplatePtrOutput {
	return o
}

func (o MachineSetSpecTemplatePtrOutput) ToMachineSetSpecTemplatePtrOutputWithContext(ctx context.Context) MachineSetSpecTemplatePtrOutput {
	return o
}

func (o MachineSetSpecTemplatePtrOutput) Elem() MachineSetSpecTemplateOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplate) MachineSetSpecTemplate {
		if v != nil {
			return *v
		}
		var ret MachineSetSpecTemplate
		return ret
	}).(MachineSetSpecTemplateOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MachineSetSpecTemplatePtrOutput) Metadata() MachineSetSpecTemplateMetadataPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplate) *MachineSetSpecTemplateMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MachineSetSpecTemplateMetadataPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o MachineSetSpecTemplatePtrOutput) Spec() MachineSetSpecTemplateSpecPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplate) *MachineSetSpecTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(MachineSetSpecTemplateSpecPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachineSetSpecTemplateMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
	//  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	//  Deprecated: This field has no function and is going to be removed in a next release.
	GenerateName *string `pulumi:"generateName"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Name *string `pulumi:"name"`
	// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Namespace *string `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	//  Deprecated: This field has no function and is going to be removed in a next release.
	OwnerReferences []MachineSetSpecTemplateMetadataOwnerReferences `pulumi:"ownerReferences"`
}

// MachineSetSpecTemplateMetadataInput is an input type that accepts MachineSetSpecTemplateMetadataArgs and MachineSetSpecTemplateMetadataOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateMetadataInput` via:
//
//	MachineSetSpecTemplateMetadataArgs{...}
type MachineSetSpecTemplateMetadataInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateMetadataOutput() MachineSetSpecTemplateMetadataOutput
	ToMachineSetSpecTemplateMetadataOutputWithContext(context.Context) MachineSetSpecTemplateMetadataOutput
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachineSetSpecTemplateMetadataArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
	//  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	//  Deprecated: This field has no function and is going to be removed in a next release.
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
	//  Deprecated: This field has no function and is going to be removed in a next release.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	//  Deprecated: This field has no function and is going to be removed in a next release.
	OwnerReferences MachineSetSpecTemplateMetadataOwnerReferencesArrayInput `pulumi:"ownerReferences"`
}

func (MachineSetSpecTemplateMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateMetadata)(nil)).Elem()
}

func (i MachineSetSpecTemplateMetadataArgs) ToMachineSetSpecTemplateMetadataOutput() MachineSetSpecTemplateMetadataOutput {
	return i.ToMachineSetSpecTemplateMetadataOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateMetadataArgs) ToMachineSetSpecTemplateMetadataOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateMetadataOutput)
}

func (i MachineSetSpecTemplateMetadataArgs) ToMachineSetSpecTemplateMetadataPtrOutput() MachineSetSpecTemplateMetadataPtrOutput {
	return i.ToMachineSetSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateMetadataArgs) ToMachineSetSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateMetadataOutput).ToMachineSetSpecTemplateMetadataPtrOutputWithContext(ctx)
}

// MachineSetSpecTemplateMetadataPtrInput is an input type that accepts MachineSetSpecTemplateMetadataArgs, MachineSetSpecTemplateMetadataPtr and MachineSetSpecTemplateMetadataPtrOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateMetadataPtrInput` via:
//
//	        MachineSetSpecTemplateMetadataArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecTemplateMetadataPtrInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateMetadataPtrOutput() MachineSetSpecTemplateMetadataPtrOutput
	ToMachineSetSpecTemplateMetadataPtrOutputWithContext(context.Context) MachineSetSpecTemplateMetadataPtrOutput
}

type machineSetSpecTemplateMetadataPtrType MachineSetSpecTemplateMetadataArgs

func MachineSetSpecTemplateMetadataPtr(v *MachineSetSpecTemplateMetadataArgs) MachineSetSpecTemplateMetadataPtrInput {
	return (*machineSetSpecTemplateMetadataPtrType)(v)
}

func (*machineSetSpecTemplateMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateMetadata)(nil)).Elem()
}

func (i *machineSetSpecTemplateMetadataPtrType) ToMachineSetSpecTemplateMetadataPtrOutput() MachineSetSpecTemplateMetadataPtrOutput {
	return i.ToMachineSetSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i *machineSetSpecTemplateMetadataPtrType) ToMachineSetSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateMetadataPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type MachineSetSpecTemplateMetadataOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateMetadata)(nil)).Elem()
}

func (o MachineSetSpecTemplateMetadataOutput) ToMachineSetSpecTemplateMetadataOutput() MachineSetSpecTemplateMetadataOutput {
	return o
}

func (o MachineSetSpecTemplateMetadataOutput) ToMachineSetSpecTemplateMetadataOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataOutput {
	return o
}

func (o MachineSetSpecTemplateMetadataOutput) ToMachineSetSpecTemplateMetadataPtrOutput() MachineSetSpecTemplateMetadataPtrOutput {
	return o.ToMachineSetSpecTemplateMetadataPtrOutputWithContext(context.Background())
}

func (o MachineSetSpecTemplateMetadataOutput) ToMachineSetSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpecTemplateMetadata) *MachineSetSpecTemplateMetadata {
		return &v
	}).(MachineSetSpecTemplateMetadataPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o MachineSetSpecTemplateMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
//	If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
//	Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadata) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o MachineSetSpecTemplateMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
//	Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataOutput) OwnerReferences() MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadata) []MachineSetSpecTemplateMetadataOwnerReferences {
		return v.OwnerReferences
	}).(MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput)
}

type MachineSetSpecTemplateMetadataPtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateMetadata)(nil)).Elem()
}

func (o MachineSetSpecTemplateMetadataPtrOutput) ToMachineSetSpecTemplateMetadataPtrOutput() MachineSetSpecTemplateMetadataPtrOutput {
	return o
}

func (o MachineSetSpecTemplateMetadataPtrOutput) ToMachineSetSpecTemplateMetadataPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataPtrOutput {
	return o
}

func (o MachineSetSpecTemplateMetadataPtrOutput) Elem() MachineSetSpecTemplateMetadataOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateMetadata) MachineSetSpecTemplateMetadata {
		if v != nil {
			return *v
		}
		var ret MachineSetSpecTemplateMetadata
		return ret
	}).(MachineSetSpecTemplateMetadataOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o MachineSetSpecTemplateMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
//	If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
//	Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataPtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o MachineSetSpecTemplateMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
//	Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
//
//	Deprecated: This field has no function and is going to be removed in a next release.
func (o MachineSetSpecTemplateMetadataPtrOutput) OwnerReferences() MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateMetadata) []MachineSetSpecTemplateMetadataOwnerReferences {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
type MachineSetSpecTemplateMetadataAnnotations struct {
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
type MachineSetSpecTemplateMetadataLabels struct {
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachineSetSpecTemplateMetadataOwnerReferences struct {
	// API version of the referent.
	ApiVersion string `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller *bool `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid string `pulumi:"uid"`
}

// MachineSetSpecTemplateMetadataOwnerReferencesInput is an input type that accepts MachineSetSpecTemplateMetadataOwnerReferencesArgs and MachineSetSpecTemplateMetadataOwnerReferencesOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateMetadataOwnerReferencesInput` via:
//
//	MachineSetSpecTemplateMetadataOwnerReferencesArgs{...}
type MachineSetSpecTemplateMetadataOwnerReferencesInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateMetadataOwnerReferencesOutput() MachineSetSpecTemplateMetadataOwnerReferencesOutput
	ToMachineSetSpecTemplateMetadataOwnerReferencesOutputWithContext(context.Context) MachineSetSpecTemplateMetadataOwnerReferencesOutput
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachineSetSpecTemplateMetadataOwnerReferencesArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion pulumi.BoolPtrInput `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name pulumi.StringInput `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (MachineSetSpecTemplateMetadataOwnerReferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (i MachineSetSpecTemplateMetadataOwnerReferencesArgs) ToMachineSetSpecTemplateMetadataOwnerReferencesOutput() MachineSetSpecTemplateMetadataOwnerReferencesOutput {
	return i.ToMachineSetSpecTemplateMetadataOwnerReferencesOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateMetadataOwnerReferencesArgs) ToMachineSetSpecTemplateMetadataOwnerReferencesOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataOwnerReferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateMetadataOwnerReferencesOutput)
}

// MachineSetSpecTemplateMetadataOwnerReferencesArrayInput is an input type that accepts MachineSetSpecTemplateMetadataOwnerReferencesArray and MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateMetadataOwnerReferencesArrayInput` via:
//
//	MachineSetSpecTemplateMetadataOwnerReferencesArray{ MachineSetSpecTemplateMetadataOwnerReferencesArgs{...} }
type MachineSetSpecTemplateMetadataOwnerReferencesArrayInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateMetadataOwnerReferencesArrayOutput() MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput
	ToMachineSetSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(context.Context) MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput
}

type MachineSetSpecTemplateMetadataOwnerReferencesArray []MachineSetSpecTemplateMetadataOwnerReferencesInput

func (MachineSetSpecTemplateMetadataOwnerReferencesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineSetSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (i MachineSetSpecTemplateMetadataOwnerReferencesArray) ToMachineSetSpecTemplateMetadataOwnerReferencesArrayOutput() MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput {
	return i.ToMachineSetSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateMetadataOwnerReferencesArray) ToMachineSetSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type MachineSetSpecTemplateMetadataOwnerReferencesOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateMetadataOwnerReferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) ToMachineSetSpecTemplateMetadataOwnerReferencesOutput() MachineSetSpecTemplateMetadataOwnerReferencesOutput {
	return o
}

func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) ToMachineSetSpecTemplateMetadataOwnerReferencesOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataOwnerReferencesOutput {
	return o
}

// API version of the referent.
func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadataOwnerReferences) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) BlockOwnerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadataOwnerReferences) *bool { return v.BlockOwnerDeletion }).(pulumi.BoolPtrOutput)
}

// If true, this reference points to the managing controller.
func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadataOwnerReferences) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadataOwnerReferences) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadataOwnerReferences) string { return v.Name }).(pulumi.StringOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o MachineSetSpecTemplateMetadataOwnerReferencesOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateMetadataOwnerReferences) string { return v.Uid }).(pulumi.StringOutput)
}

type MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineSetSpecTemplateMetadataOwnerReferences)(nil)).Elem()
}

func (o MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput) ToMachineSetSpecTemplateMetadataOwnerReferencesArrayOutput() MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o
}

func (o MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput) ToMachineSetSpecTemplateMetadataOwnerReferencesArrayOutputWithContext(ctx context.Context) MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput {
	return o
}

func (o MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput) Index(i pulumi.IntInput) MachineSetSpecTemplateMetadataOwnerReferencesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineSetSpecTemplateMetadataOwnerReferences {
		return vs[0].([]MachineSetSpecTemplateMetadataOwnerReferences)[vs[1].(int)]
	}).(MachineSetSpecTemplateMetadataOwnerReferencesOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachineSetSpecTemplateSpec struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachineSetSpecTemplateSpecBootstrap `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain *string `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachineSetSpecTemplateSpecInfrastructureRef `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout *string `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID *string `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version *string `pulumi:"version"`
}

// MachineSetSpecTemplateSpecInput is an input type that accepts MachineSetSpecTemplateSpecArgs and MachineSetSpecTemplateSpecOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecInput` via:
//
//	MachineSetSpecTemplateSpecArgs{...}
type MachineSetSpecTemplateSpecInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecOutput() MachineSetSpecTemplateSpecOutput
	ToMachineSetSpecTemplateSpecOutputWithContext(context.Context) MachineSetSpecTemplateSpecOutput
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachineSetSpecTemplateSpecArgs struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachineSetSpecTemplateSpecBootstrapInput `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain pulumi.StringPtrInput `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachineSetSpecTemplateSpecInfrastructureRefInput `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout pulumi.StringPtrInput `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID pulumi.StringPtrInput `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (MachineSetSpecTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpec)(nil)).Elem()
}

func (i MachineSetSpecTemplateSpecArgs) ToMachineSetSpecTemplateSpecOutput() MachineSetSpecTemplateSpecOutput {
	return i.ToMachineSetSpecTemplateSpecOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecArgs) ToMachineSetSpecTemplateSpecOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecOutput)
}

func (i MachineSetSpecTemplateSpecArgs) ToMachineSetSpecTemplateSpecPtrOutput() MachineSetSpecTemplateSpecPtrOutput {
	return i.ToMachineSetSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecArgs) ToMachineSetSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecOutput).ToMachineSetSpecTemplateSpecPtrOutputWithContext(ctx)
}

// MachineSetSpecTemplateSpecPtrInput is an input type that accepts MachineSetSpecTemplateSpecArgs, MachineSetSpecTemplateSpecPtr and MachineSetSpecTemplateSpecPtrOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecPtrInput` via:
//
//	        MachineSetSpecTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecTemplateSpecPtrInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecPtrOutput() MachineSetSpecTemplateSpecPtrOutput
	ToMachineSetSpecTemplateSpecPtrOutputWithContext(context.Context) MachineSetSpecTemplateSpecPtrOutput
}

type machineSetSpecTemplateSpecPtrType MachineSetSpecTemplateSpecArgs

func MachineSetSpecTemplateSpecPtr(v *MachineSetSpecTemplateSpecArgs) MachineSetSpecTemplateSpecPtrInput {
	return (*machineSetSpecTemplateSpecPtrType)(v)
}

func (*machineSetSpecTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpec)(nil)).Elem()
}

func (i *machineSetSpecTemplateSpecPtrType) ToMachineSetSpecTemplateSpecPtrOutput() MachineSetSpecTemplateSpecPtrOutput {
	return i.ToMachineSetSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *machineSetSpecTemplateSpecPtrType) ToMachineSetSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecPtrOutput)
}

// Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type MachineSetSpecTemplateSpecOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpec)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecOutput) ToMachineSetSpecTemplateSpecOutput() MachineSetSpecTemplateSpecOutput {
	return o
}

func (o MachineSetSpecTemplateSpecOutput) ToMachineSetSpecTemplateSpecOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecOutput {
	return o
}

func (o MachineSetSpecTemplateSpecOutput) ToMachineSetSpecTemplateSpecPtrOutput() MachineSetSpecTemplateSpecPtrOutput {
	return o.ToMachineSetSpecTemplateSpecPtrOutputWithContext(context.Background())
}

func (o MachineSetSpecTemplateSpecOutput) ToMachineSetSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpecTemplateSpec) *MachineSetSpecTemplateSpec {
		return &v
	}).(MachineSetSpecTemplateSpecPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachineSetSpecTemplateSpecOutput) Bootstrap() MachineSetSpecTemplateSpecBootstrapOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpec) MachineSetSpecTemplateSpecBootstrap { return v.Bootstrap }).(MachineSetSpecTemplateSpecBootstrapOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineSetSpecTemplateSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachineSetSpecTemplateSpecOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpec) *string { return v.FailureDomain }).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachineSetSpecTemplateSpecOutput) InfrastructureRef() MachineSetSpecTemplateSpecInfrastructureRefOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpec) MachineSetSpecTemplateSpecInfrastructureRef {
		return v.InfrastructureRef
	}).(MachineSetSpecTemplateSpecInfrastructureRefOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachineSetSpecTemplateSpecOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpec) *string { return v.NodeDrainTimeout }).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachineSetSpecTemplateSpecOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpec) *string { return v.ProviderID }).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachineSetSpecTemplateSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MachineSetSpecTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpec)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecPtrOutput) ToMachineSetSpecTemplateSpecPtrOutput() MachineSetSpecTemplateSpecPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecPtrOutput) ToMachineSetSpecTemplateSpecPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecPtrOutput) Elem() MachineSetSpecTemplateSpecOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) MachineSetSpecTemplateSpec {
		if v != nil {
			return *v
		}
		var ret MachineSetSpecTemplateSpec
		return ret
	}).(MachineSetSpecTemplateSpecOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachineSetSpecTemplateSpecPtrOutput) Bootstrap() MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) *MachineSetSpecTemplateSpecBootstrap {
		if v == nil {
			return nil
		}
		return &v.Bootstrap
	}).(MachineSetSpecTemplateSpecBootstrapPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineSetSpecTemplateSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachineSetSpecTemplateSpecPtrOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.FailureDomain
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachineSetSpecTemplateSpecPtrOutput) InfrastructureRef() MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) *MachineSetSpecTemplateSpecInfrastructureRef {
		if v == nil {
			return nil
		}
		return &v.InfrastructureRef
	}).(MachineSetSpecTemplateSpecInfrastructureRefPtrOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachineSetSpecTemplateSpecPtrOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeDrainTimeout
	}).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachineSetSpecTemplateSpecPtrOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.ProviderID
	}).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachineSetSpecTemplateSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineSetSpecTemplateSpecBootstrap struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef *MachineSetSpecTemplateSpecBootstrapConfigRef `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data *string `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName *string `pulumi:"dataSecretName"`
}

// MachineSetSpecTemplateSpecBootstrapInput is an input type that accepts MachineSetSpecTemplateSpecBootstrapArgs and MachineSetSpecTemplateSpecBootstrapOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecBootstrapInput` via:
//
//	MachineSetSpecTemplateSpecBootstrapArgs{...}
type MachineSetSpecTemplateSpecBootstrapInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecBootstrapOutput() MachineSetSpecTemplateSpecBootstrapOutput
	ToMachineSetSpecTemplateSpecBootstrapOutputWithContext(context.Context) MachineSetSpecTemplateSpecBootstrapOutput
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineSetSpecTemplateSpecBootstrapArgs struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef MachineSetSpecTemplateSpecBootstrapConfigRefPtrInput `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName pulumi.StringPtrInput `pulumi:"dataSecretName"`
}

func (MachineSetSpecTemplateSpecBootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (i MachineSetSpecTemplateSpecBootstrapArgs) ToMachineSetSpecTemplateSpecBootstrapOutput() MachineSetSpecTemplateSpecBootstrapOutput {
	return i.ToMachineSetSpecTemplateSpecBootstrapOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecBootstrapArgs) ToMachineSetSpecTemplateSpecBootstrapOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecBootstrapOutput)
}

func (i MachineSetSpecTemplateSpecBootstrapArgs) ToMachineSetSpecTemplateSpecBootstrapPtrOutput() MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return i.ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecBootstrapArgs) ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecBootstrapOutput).ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(ctx)
}

// MachineSetSpecTemplateSpecBootstrapPtrInput is an input type that accepts MachineSetSpecTemplateSpecBootstrapArgs, MachineSetSpecTemplateSpecBootstrapPtr and MachineSetSpecTemplateSpecBootstrapPtrOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecBootstrapPtrInput` via:
//
//	        MachineSetSpecTemplateSpecBootstrapArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecTemplateSpecBootstrapPtrInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecBootstrapPtrOutput() MachineSetSpecTemplateSpecBootstrapPtrOutput
	ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(context.Context) MachineSetSpecTemplateSpecBootstrapPtrOutput
}

type machineSetSpecTemplateSpecBootstrapPtrType MachineSetSpecTemplateSpecBootstrapArgs

func MachineSetSpecTemplateSpecBootstrapPtr(v *MachineSetSpecTemplateSpecBootstrapArgs) MachineSetSpecTemplateSpecBootstrapPtrInput {
	return (*machineSetSpecTemplateSpecBootstrapPtrType)(v)
}

func (*machineSetSpecTemplateSpecBootstrapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (i *machineSetSpecTemplateSpecBootstrapPtrType) ToMachineSetSpecTemplateSpecBootstrapPtrOutput() MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return i.ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i *machineSetSpecTemplateSpecBootstrapPtrType) ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecBootstrapPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineSetSpecTemplateSpecBootstrapOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecBootstrapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecBootstrapOutput) ToMachineSetSpecTemplateSpecBootstrapOutput() MachineSetSpecTemplateSpecBootstrapOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapOutput) ToMachineSetSpecTemplateSpecBootstrapOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapOutput) ToMachineSetSpecTemplateSpecBootstrapPtrOutput() MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return o.ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(context.Background())
}

func (o MachineSetSpecTemplateSpecBootstrapOutput) ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpecTemplateSpecBootstrap) *MachineSetSpecTemplateSpecBootstrap {
		return &v
	}).(MachineSetSpecTemplateSpecBootstrapPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachineSetSpecTemplateSpecBootstrapOutput) ConfigRef() MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrap) *MachineSetSpecTemplateSpecBootstrapConfigRef {
		return v.ConfigRef
	}).(MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachineSetSpecTemplateSpecBootstrapOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrap) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachineSetSpecTemplateSpecBootstrapOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrap) *string { return v.DataSecretName }).(pulumi.StringPtrOutput)
}

type MachineSetSpecTemplateSpecBootstrapPtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecBootstrapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpecBootstrap)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecBootstrapPtrOutput) ToMachineSetSpecTemplateSpecBootstrapPtrOutput() MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapPtrOutput) ToMachineSetSpecTemplateSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapPtrOutput) Elem() MachineSetSpecTemplateSpecBootstrapOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrap) MachineSetSpecTemplateSpecBootstrap {
		if v != nil {
			return *v
		}
		var ret MachineSetSpecTemplateSpecBootstrap
		return ret
	}).(MachineSetSpecTemplateSpecBootstrapOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachineSetSpecTemplateSpecBootstrapPtrOutput) ConfigRef() MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrap) *MachineSetSpecTemplateSpecBootstrapConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachineSetSpecTemplateSpecBootstrapPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachineSetSpecTemplateSpecBootstrapPtrOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.DataSecretName
	}).(pulumi.StringPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineSetSpecTemplateSpecBootstrapConfigRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineSetSpecTemplateSpecBootstrapConfigRefInput is an input type that accepts MachineSetSpecTemplateSpecBootstrapConfigRefArgs and MachineSetSpecTemplateSpecBootstrapConfigRefOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecBootstrapConfigRefInput` via:
//
//	MachineSetSpecTemplateSpecBootstrapConfigRefArgs{...}
type MachineSetSpecTemplateSpecBootstrapConfigRefInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecBootstrapConfigRefOutput() MachineSetSpecTemplateSpecBootstrapConfigRefOutput
	ToMachineSetSpecTemplateSpecBootstrapConfigRefOutputWithContext(context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefOutput
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineSetSpecTemplateSpecBootstrapConfigRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineSetSpecTemplateSpecBootstrapConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (i MachineSetSpecTemplateSpecBootstrapConfigRefArgs) ToMachineSetSpecTemplateSpecBootstrapConfigRefOutput() MachineSetSpecTemplateSpecBootstrapConfigRefOutput {
	return i.ToMachineSetSpecTemplateSpecBootstrapConfigRefOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecBootstrapConfigRefArgs) ToMachineSetSpecTemplateSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecBootstrapConfigRefOutput)
}

func (i MachineSetSpecTemplateSpecBootstrapConfigRefArgs) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return i.ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecBootstrapConfigRefArgs) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecBootstrapConfigRefOutput).ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx)
}

// MachineSetSpecTemplateSpecBootstrapConfigRefPtrInput is an input type that accepts MachineSetSpecTemplateSpecBootstrapConfigRefArgs, MachineSetSpecTemplateSpecBootstrapConfigRefPtr and MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecBootstrapConfigRefPtrInput` via:
//
//	        MachineSetSpecTemplateSpecBootstrapConfigRefArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecTemplateSpecBootstrapConfigRefPtrInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput
	ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput
}

type machineSetSpecTemplateSpecBootstrapConfigRefPtrType MachineSetSpecTemplateSpecBootstrapConfigRefArgs

func MachineSetSpecTemplateSpecBootstrapConfigRefPtr(v *MachineSetSpecTemplateSpecBootstrapConfigRefArgs) MachineSetSpecTemplateSpecBootstrapConfigRefPtrInput {
	return (*machineSetSpecTemplateSpecBootstrapConfigRefPtrType)(v)
}

func (*machineSetSpecTemplateSpecBootstrapConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (i *machineSetSpecTemplateSpecBootstrapConfigRefPtrType) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return i.ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i *machineSetSpecTemplateSpecBootstrapConfigRefPtrType) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineSetSpecTemplateSpecBootstrapConfigRefOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecBootstrapConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) ToMachineSetSpecTemplateSpecBootstrapConfigRefOutput() MachineSetSpecTemplateSpecBootstrapConfigRefOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) ToMachineSetSpecTemplateSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpecTemplateSpecBootstrapConfigRef) *MachineSetSpecTemplateSpecBootstrapConfigRef {
		return &v
	}).(MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput)
}

// API version of the referent.
func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrapConfigRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrapConfigRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrapConfigRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrapConfigRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrapConfigRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrapConfigRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSetSpecTemplateSpecBootstrapConfigRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecBootstrapConfigRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput() MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) ToMachineSetSpecTemplateSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) Elem() MachineSetSpecTemplateSpecBootstrapConfigRefOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) MachineSetSpecTemplateSpecBootstrapConfigRef {
		if v != nil {
			return *v
		}
		var ret MachineSetSpecTemplateSpecBootstrapConfigRef
		return ret
	}).(MachineSetSpecTemplateSpecBootstrapConfigRefOutput)
}

// API version of the referent.
func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineSetSpecTemplateSpecInfrastructureRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineSetSpecTemplateSpecInfrastructureRefInput is an input type that accepts MachineSetSpecTemplateSpecInfrastructureRefArgs and MachineSetSpecTemplateSpecInfrastructureRefOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecInfrastructureRefInput` via:
//
//	MachineSetSpecTemplateSpecInfrastructureRefArgs{...}
type MachineSetSpecTemplateSpecInfrastructureRefInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecInfrastructureRefOutput() MachineSetSpecTemplateSpecInfrastructureRefOutput
	ToMachineSetSpecTemplateSpecInfrastructureRefOutputWithContext(context.Context) MachineSetSpecTemplateSpecInfrastructureRefOutput
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineSetSpecTemplateSpecInfrastructureRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineSetSpecTemplateSpecInfrastructureRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (i MachineSetSpecTemplateSpecInfrastructureRefArgs) ToMachineSetSpecTemplateSpecInfrastructureRefOutput() MachineSetSpecTemplateSpecInfrastructureRefOutput {
	return i.ToMachineSetSpecTemplateSpecInfrastructureRefOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecInfrastructureRefArgs) ToMachineSetSpecTemplateSpecInfrastructureRefOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecInfrastructureRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecInfrastructureRefOutput)
}

func (i MachineSetSpecTemplateSpecInfrastructureRefArgs) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutput() MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return i.ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i MachineSetSpecTemplateSpecInfrastructureRefArgs) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecInfrastructureRefOutput).ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx)
}

// MachineSetSpecTemplateSpecInfrastructureRefPtrInput is an input type that accepts MachineSetSpecTemplateSpecInfrastructureRefArgs, MachineSetSpecTemplateSpecInfrastructureRefPtr and MachineSetSpecTemplateSpecInfrastructureRefPtrOutput values.
// You can construct a concrete instance of `MachineSetSpecTemplateSpecInfrastructureRefPtrInput` via:
//
//	        MachineSetSpecTemplateSpecInfrastructureRefArgs{...}
//
//	or:
//
//	        nil
type MachineSetSpecTemplateSpecInfrastructureRefPtrInput interface {
	pulumi.Input

	ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutput() MachineSetSpecTemplateSpecInfrastructureRefPtrOutput
	ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Context) MachineSetSpecTemplateSpecInfrastructureRefPtrOutput
}

type machineSetSpecTemplateSpecInfrastructureRefPtrType MachineSetSpecTemplateSpecInfrastructureRefArgs

func MachineSetSpecTemplateSpecInfrastructureRefPtr(v *MachineSetSpecTemplateSpecInfrastructureRefArgs) MachineSetSpecTemplateSpecInfrastructureRefPtrInput {
	return (*machineSetSpecTemplateSpecInfrastructureRefPtrType)(v)
}

func (*machineSetSpecTemplateSpecInfrastructureRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (i *machineSetSpecTemplateSpecInfrastructureRefPtrType) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutput() MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return i.ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i *machineSetSpecTemplateSpecInfrastructureRefPtrType) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetSpecTemplateSpecInfrastructureRefPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineSetSpecTemplateSpecInfrastructureRefOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecInfrastructureRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) ToMachineSetSpecTemplateSpecInfrastructureRefOutput() MachineSetSpecTemplateSpecInfrastructureRefOutput {
	return o
}

func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) ToMachineSetSpecTemplateSpecInfrastructureRefOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecInfrastructureRefOutput {
	return o
}

func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutput() MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetSpecTemplateSpecInfrastructureRef) *MachineSetSpecTemplateSpecInfrastructureRef {
		return &v
	}).(MachineSetSpecTemplateSpecInfrastructureRefPtrOutput)
}

// API version of the referent.
func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecInfrastructureRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecInfrastructureRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecInfrastructureRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecInfrastructureRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecInfrastructureRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecInfrastructureRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSetSpecTemplateSpecInfrastructureRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetSpecTemplateSpecInfrastructureRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineSetSpecTemplateSpecInfrastructureRefPtrOutput struct{ *pulumi.OutputState }

func (MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetSpecTemplateSpecInfrastructureRef)(nil)).Elem()
}

func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutput() MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) ToMachineSetSpecTemplateSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSetSpecTemplateSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) Elem() MachineSetSpecTemplateSpecInfrastructureRefOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) MachineSetSpecTemplateSpecInfrastructureRef {
		if v != nil {
			return *v
		}
		var ret MachineSetSpecTemplateSpecInfrastructureRef
		return ret
	}).(MachineSetSpecTemplateSpecInfrastructureRefOutput)
}

// API version of the referent.
func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSetSpecTemplateSpecInfrastructureRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetSpecTemplateSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// MachineSetStatus defines the observed state of MachineSet.
type MachineSetStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
	AvailableReplicas *int    `pulumi:"availableReplicas"`
	FailureMessage    *string `pulumi:"failureMessage"`
	// In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption.
	//  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured.
	//  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
	FailureReason *string `pulumi:"failureReason"`
	// The number of replicas that have labels matching the labels of the machine template of the MachineSet.
	FullyLabeledReplicas *int `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed MachineSet.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas.
	Replicas *int `pulumi:"replicas"`
	// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector *string `pulumi:"selector"`
}

// MachineSetStatusInput is an input type that accepts MachineSetStatusArgs and MachineSetStatusOutput values.
// You can construct a concrete instance of `MachineSetStatusInput` via:
//
//	MachineSetStatusArgs{...}
type MachineSetStatusInput interface {
	pulumi.Input

	ToMachineSetStatusOutput() MachineSetStatusOutput
	ToMachineSetStatusOutputWithContext(context.Context) MachineSetStatusOutput
}

// MachineSetStatus defines the observed state of MachineSet.
type MachineSetStatusArgs struct {
	// The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
	AvailableReplicas pulumi.IntPtrInput    `pulumi:"availableReplicas"`
	FailureMessage    pulumi.StringPtrInput `pulumi:"failureMessage"`
	// In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption.
	//  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured.
	//  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// The number of replicas that have labels matching the labels of the machine template of the MachineSet.
	FullyLabeledReplicas pulumi.IntPtrInput `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed MachineSet.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (MachineSetStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetStatus)(nil)).Elem()
}

func (i MachineSetStatusArgs) ToMachineSetStatusOutput() MachineSetStatusOutput {
	return i.ToMachineSetStatusOutputWithContext(context.Background())
}

func (i MachineSetStatusArgs) ToMachineSetStatusOutputWithContext(ctx context.Context) MachineSetStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetStatusOutput)
}

func (i MachineSetStatusArgs) ToMachineSetStatusPtrOutput() MachineSetStatusPtrOutput {
	return i.ToMachineSetStatusPtrOutputWithContext(context.Background())
}

func (i MachineSetStatusArgs) ToMachineSetStatusPtrOutputWithContext(ctx context.Context) MachineSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetStatusOutput).ToMachineSetStatusPtrOutputWithContext(ctx)
}

// MachineSetStatusPtrInput is an input type that accepts MachineSetStatusArgs, MachineSetStatusPtr and MachineSetStatusPtrOutput values.
// You can construct a concrete instance of `MachineSetStatusPtrInput` via:
//
//	        MachineSetStatusArgs{...}
//
//	or:
//
//	        nil
type MachineSetStatusPtrInput interface {
	pulumi.Input

	ToMachineSetStatusPtrOutput() MachineSetStatusPtrOutput
	ToMachineSetStatusPtrOutputWithContext(context.Context) MachineSetStatusPtrOutput
}

type machineSetStatusPtrType MachineSetStatusArgs

func MachineSetStatusPtr(v *MachineSetStatusArgs) MachineSetStatusPtrInput {
	return (*machineSetStatusPtrType)(v)
}

func (*machineSetStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetStatus)(nil)).Elem()
}

func (i *machineSetStatusPtrType) ToMachineSetStatusPtrOutput() MachineSetStatusPtrOutput {
	return i.ToMachineSetStatusPtrOutputWithContext(context.Background())
}

func (i *machineSetStatusPtrType) ToMachineSetStatusPtrOutputWithContext(ctx context.Context) MachineSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSetStatusPtrOutput)
}

// MachineSetStatus defines the observed state of MachineSet.
type MachineSetStatusOutput struct{ *pulumi.OutputState }

func (MachineSetStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSetStatus)(nil)).Elem()
}

func (o MachineSetStatusOutput) ToMachineSetStatusOutput() MachineSetStatusOutput {
	return o
}

func (o MachineSetStatusOutput) ToMachineSetStatusOutputWithContext(ctx context.Context) MachineSetStatusOutput {
	return o
}

func (o MachineSetStatusOutput) ToMachineSetStatusPtrOutput() MachineSetStatusPtrOutput {
	return o.ToMachineSetStatusPtrOutputWithContext(context.Background())
}

func (o MachineSetStatusOutput) ToMachineSetStatusPtrOutputWithContext(ctx context.Context) MachineSetStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSetStatus) *MachineSetStatus {
		return &v
	}).(MachineSetStatusPtrOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
func (o MachineSetStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

func (o MachineSetStatusOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *string { return v.FailureMessage }).(pulumi.StringPtrOutput)
}

// In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption.
//
//	These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured.
//	Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
func (o MachineSetStatusOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// The number of replicas that have labels matching the labels of the machine template of the MachineSet.
func (o MachineSetStatusOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *int { return v.FullyLabeledReplicas }).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed MachineSet.
func (o MachineSetStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
func (o MachineSetStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas.
func (o MachineSetStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o MachineSetStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSetStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type MachineSetStatusPtrOutput struct{ *pulumi.OutputState }

func (MachineSetStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSetStatus)(nil)).Elem()
}

func (o MachineSetStatusPtrOutput) ToMachineSetStatusPtrOutput() MachineSetStatusPtrOutput {
	return o
}

func (o MachineSetStatusPtrOutput) ToMachineSetStatusPtrOutputWithContext(ctx context.Context) MachineSetStatusPtrOutput {
	return o
}

func (o MachineSetStatusPtrOutput) Elem() MachineSetStatusOutput {
	return o.ApplyT(func(v *MachineSetStatus) MachineSetStatus {
		if v != nil {
			return *v
		}
		var ret MachineSetStatus
		return ret
	}).(MachineSetStatusOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
func (o MachineSetStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

func (o MachineSetStatusPtrOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureMessage
	}).(pulumi.StringPtrOutput)
}

// In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption.
//
//	These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured.
//	Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
func (o MachineSetStatusPtrOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureReason
	}).(pulumi.StringPtrOutput)
}

// The number of replicas that have labels matching the labels of the machine template of the MachineSet.
func (o MachineSetStatusPtrOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.FullyLabeledReplicas
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed MachineSet.
func (o MachineSetStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
func (o MachineSetStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas.
func (o MachineSetStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o MachineSetStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSetStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// MachineSpec defines the desired state of Machine.
type MachineSpec struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachineSpecBootstrap `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName string `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain *string `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachineSpecInfrastructureRef `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout *string `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID *string `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version *string `pulumi:"version"`
}

// MachineSpecInput is an input type that accepts MachineSpecArgs and MachineSpecOutput values.
// You can construct a concrete instance of `MachineSpecInput` via:
//
//	MachineSpecArgs{...}
type MachineSpecInput interface {
	pulumi.Input

	ToMachineSpecOutput() MachineSpecOutput
	ToMachineSpecOutputWithContext(context.Context) MachineSpecOutput
}

// MachineSpec defines the desired state of Machine.
type MachineSpecArgs struct {
	// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
	Bootstrap MachineSpecBootstrapInput `pulumi:"bootstrap"`
	// ClusterName is the name of the Cluster this object belongs to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
	FailureDomain pulumi.StringPtrInput `pulumi:"failureDomain"`
	// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
	InfrastructureRef MachineSpecInfrastructureRefInput `pulumi:"infrastructureRef"`
	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	NodeDrainTimeout pulumi.StringPtrInput `pulumi:"nodeDrainTimeout"`
	// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
	ProviderID pulumi.StringPtrInput `pulumi:"providerID"`
	// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (MachineSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpec)(nil)).Elem()
}

func (i MachineSpecArgs) ToMachineSpecOutput() MachineSpecOutput {
	return i.ToMachineSpecOutputWithContext(context.Background())
}

func (i MachineSpecArgs) ToMachineSpecOutputWithContext(ctx context.Context) MachineSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecOutput)
}

func (i MachineSpecArgs) ToMachineSpecPtrOutput() MachineSpecPtrOutput {
	return i.ToMachineSpecPtrOutputWithContext(context.Background())
}

func (i MachineSpecArgs) ToMachineSpecPtrOutputWithContext(ctx context.Context) MachineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecOutput).ToMachineSpecPtrOutputWithContext(ctx)
}

// MachineSpecPtrInput is an input type that accepts MachineSpecArgs, MachineSpecPtr and MachineSpecPtrOutput values.
// You can construct a concrete instance of `MachineSpecPtrInput` via:
//
//	        MachineSpecArgs{...}
//
//	or:
//
//	        nil
type MachineSpecPtrInput interface {
	pulumi.Input

	ToMachineSpecPtrOutput() MachineSpecPtrOutput
	ToMachineSpecPtrOutputWithContext(context.Context) MachineSpecPtrOutput
}

type machineSpecPtrType MachineSpecArgs

func MachineSpecPtr(v *MachineSpecArgs) MachineSpecPtrInput {
	return (*machineSpecPtrType)(v)
}

func (*machineSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpec)(nil)).Elem()
}

func (i *machineSpecPtrType) ToMachineSpecPtrOutput() MachineSpecPtrOutput {
	return i.ToMachineSpecPtrOutputWithContext(context.Background())
}

func (i *machineSpecPtrType) ToMachineSpecPtrOutputWithContext(ctx context.Context) MachineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecPtrOutput)
}

// MachineSpec defines the desired state of Machine.
type MachineSpecOutput struct{ *pulumi.OutputState }

func (MachineSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpec)(nil)).Elem()
}

func (o MachineSpecOutput) ToMachineSpecOutput() MachineSpecOutput {
	return o
}

func (o MachineSpecOutput) ToMachineSpecOutputWithContext(ctx context.Context) MachineSpecOutput {
	return o
}

func (o MachineSpecOutput) ToMachineSpecPtrOutput() MachineSpecPtrOutput {
	return o.ToMachineSpecPtrOutputWithContext(context.Background())
}

func (o MachineSpecOutput) ToMachineSpecPtrOutputWithContext(ctx context.Context) MachineSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSpec) *MachineSpec {
		return &v
	}).(MachineSpecPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachineSpecOutput) Bootstrap() MachineSpecBootstrapOutput {
	return o.ApplyT(func(v MachineSpec) MachineSpecBootstrap { return v.Bootstrap }).(MachineSpecBootstrapOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineSpecOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSpec) string { return v.ClusterName }).(pulumi.StringOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachineSpecOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpec) *string { return v.FailureDomain }).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachineSpecOutput) InfrastructureRef() MachineSpecInfrastructureRefOutput {
	return o.ApplyT(func(v MachineSpec) MachineSpecInfrastructureRef { return v.InfrastructureRef }).(MachineSpecInfrastructureRefOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachineSpecOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpec) *string { return v.NodeDrainTimeout }).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachineSpecOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpec) *string { return v.ProviderID }).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachineSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MachineSpecPtrOutput struct{ *pulumi.OutputState }

func (MachineSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpec)(nil)).Elem()
}

func (o MachineSpecPtrOutput) ToMachineSpecPtrOutput() MachineSpecPtrOutput {
	return o
}

func (o MachineSpecPtrOutput) ToMachineSpecPtrOutputWithContext(ctx context.Context) MachineSpecPtrOutput {
	return o
}

func (o MachineSpecPtrOutput) Elem() MachineSpecOutput {
	return o.ApplyT(func(v *MachineSpec) MachineSpec {
		if v != nil {
			return *v
		}
		var ret MachineSpec
		return ret
	}).(MachineSpecOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
func (o MachineSpecPtrOutput) Bootstrap() MachineSpecBootstrapPtrOutput {
	return o.ApplyT(func(v *MachineSpec) *MachineSpecBootstrap {
		if v == nil {
			return nil
		}
		return &v.Bootstrap
	}).(MachineSpecBootstrapPtrOutput)
}

// ClusterName is the name of the Cluster this object belongs to.
func (o MachineSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
func (o MachineSpecPtrOutput) FailureDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpec) *string {
		if v == nil {
			return nil
		}
		return v.FailureDomain
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
func (o MachineSpecPtrOutput) InfrastructureRef() MachineSpecInfrastructureRefPtrOutput {
	return o.ApplyT(func(v *MachineSpec) *MachineSpecInfrastructureRef {
		if v == nil {
			return nil
		}
		return &v.InfrastructureRef
	}).(MachineSpecInfrastructureRefPtrOutput)
}

// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
func (o MachineSpecPtrOutput) NodeDrainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeDrainTimeout
	}).(pulumi.StringPtrOutput)
}

// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
func (o MachineSpecPtrOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpec) *string {
		if v == nil {
			return nil
		}
		return v.ProviderID
	}).(pulumi.StringPtrOutput)
}

// Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
func (o MachineSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineSpecBootstrap struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef *MachineSpecBootstrapConfigRef `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data *string `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName *string `pulumi:"dataSecretName"`
}

// MachineSpecBootstrapInput is an input type that accepts MachineSpecBootstrapArgs and MachineSpecBootstrapOutput values.
// You can construct a concrete instance of `MachineSpecBootstrapInput` via:
//
//	MachineSpecBootstrapArgs{...}
type MachineSpecBootstrapInput interface {
	pulumi.Input

	ToMachineSpecBootstrapOutput() MachineSpecBootstrapOutput
	ToMachineSpecBootstrapOutputWithContext(context.Context) MachineSpecBootstrapOutput
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineSpecBootstrapArgs struct {
	// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
	ConfigRef MachineSpecBootstrapConfigRefPtrInput `pulumi:"configRef"`
	// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
	//  Deprecated: Switch to DataSecretName.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
	DataSecretName pulumi.StringPtrInput `pulumi:"dataSecretName"`
}

func (MachineSpecBootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpecBootstrap)(nil)).Elem()
}

func (i MachineSpecBootstrapArgs) ToMachineSpecBootstrapOutput() MachineSpecBootstrapOutput {
	return i.ToMachineSpecBootstrapOutputWithContext(context.Background())
}

func (i MachineSpecBootstrapArgs) ToMachineSpecBootstrapOutputWithContext(ctx context.Context) MachineSpecBootstrapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecBootstrapOutput)
}

func (i MachineSpecBootstrapArgs) ToMachineSpecBootstrapPtrOutput() MachineSpecBootstrapPtrOutput {
	return i.ToMachineSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i MachineSpecBootstrapArgs) ToMachineSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecBootstrapOutput).ToMachineSpecBootstrapPtrOutputWithContext(ctx)
}

// MachineSpecBootstrapPtrInput is an input type that accepts MachineSpecBootstrapArgs, MachineSpecBootstrapPtr and MachineSpecBootstrapPtrOutput values.
// You can construct a concrete instance of `MachineSpecBootstrapPtrInput` via:
//
//	        MachineSpecBootstrapArgs{...}
//
//	or:
//
//	        nil
type MachineSpecBootstrapPtrInput interface {
	pulumi.Input

	ToMachineSpecBootstrapPtrOutput() MachineSpecBootstrapPtrOutput
	ToMachineSpecBootstrapPtrOutputWithContext(context.Context) MachineSpecBootstrapPtrOutput
}

type machineSpecBootstrapPtrType MachineSpecBootstrapArgs

func MachineSpecBootstrapPtr(v *MachineSpecBootstrapArgs) MachineSpecBootstrapPtrInput {
	return (*machineSpecBootstrapPtrType)(v)
}

func (*machineSpecBootstrapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpecBootstrap)(nil)).Elem()
}

func (i *machineSpecBootstrapPtrType) ToMachineSpecBootstrapPtrOutput() MachineSpecBootstrapPtrOutput {
	return i.ToMachineSpecBootstrapPtrOutputWithContext(context.Background())
}

func (i *machineSpecBootstrapPtrType) ToMachineSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecBootstrapPtrOutput)
}

// Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
type MachineSpecBootstrapOutput struct{ *pulumi.OutputState }

func (MachineSpecBootstrapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpecBootstrap)(nil)).Elem()
}

func (o MachineSpecBootstrapOutput) ToMachineSpecBootstrapOutput() MachineSpecBootstrapOutput {
	return o
}

func (o MachineSpecBootstrapOutput) ToMachineSpecBootstrapOutputWithContext(ctx context.Context) MachineSpecBootstrapOutput {
	return o
}

func (o MachineSpecBootstrapOutput) ToMachineSpecBootstrapPtrOutput() MachineSpecBootstrapPtrOutput {
	return o.ToMachineSpecBootstrapPtrOutputWithContext(context.Background())
}

func (o MachineSpecBootstrapOutput) ToMachineSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSpecBootstrap) *MachineSpecBootstrap {
		return &v
	}).(MachineSpecBootstrapPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachineSpecBootstrapOutput) ConfigRef() MachineSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrap) *MachineSpecBootstrapConfigRef { return v.ConfigRef }).(MachineSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachineSpecBootstrapOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrap) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachineSpecBootstrapOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrap) *string { return v.DataSecretName }).(pulumi.StringPtrOutput)
}

type MachineSpecBootstrapPtrOutput struct{ *pulumi.OutputState }

func (MachineSpecBootstrapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpecBootstrap)(nil)).Elem()
}

func (o MachineSpecBootstrapPtrOutput) ToMachineSpecBootstrapPtrOutput() MachineSpecBootstrapPtrOutput {
	return o
}

func (o MachineSpecBootstrapPtrOutput) ToMachineSpecBootstrapPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapPtrOutput {
	return o
}

func (o MachineSpecBootstrapPtrOutput) Elem() MachineSpecBootstrapOutput {
	return o.ApplyT(func(v *MachineSpecBootstrap) MachineSpecBootstrap {
		if v != nil {
			return *v
		}
		var ret MachineSpecBootstrap
		return ret
	}).(MachineSpecBootstrapOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
func (o MachineSpecBootstrapPtrOutput) ConfigRef() MachineSpecBootstrapConfigRefPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrap) *MachineSpecBootstrapConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(MachineSpecBootstrapConfigRefPtrOutput)
}

// Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state.
//
//	Deprecated: Switch to DataSecretName.
func (o MachineSpecBootstrapPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
func (o MachineSpecBootstrapPtrOutput) DataSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrap) *string {
		if v == nil {
			return nil
		}
		return v.DataSecretName
	}).(pulumi.StringPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineSpecBootstrapConfigRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineSpecBootstrapConfigRefInput is an input type that accepts MachineSpecBootstrapConfigRefArgs and MachineSpecBootstrapConfigRefOutput values.
// You can construct a concrete instance of `MachineSpecBootstrapConfigRefInput` via:
//
//	MachineSpecBootstrapConfigRefArgs{...}
type MachineSpecBootstrapConfigRefInput interface {
	pulumi.Input

	ToMachineSpecBootstrapConfigRefOutput() MachineSpecBootstrapConfigRefOutput
	ToMachineSpecBootstrapConfigRefOutputWithContext(context.Context) MachineSpecBootstrapConfigRefOutput
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineSpecBootstrapConfigRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineSpecBootstrapConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpecBootstrapConfigRef)(nil)).Elem()
}

func (i MachineSpecBootstrapConfigRefArgs) ToMachineSpecBootstrapConfigRefOutput() MachineSpecBootstrapConfigRefOutput {
	return i.ToMachineSpecBootstrapConfigRefOutputWithContext(context.Background())
}

func (i MachineSpecBootstrapConfigRefArgs) ToMachineSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachineSpecBootstrapConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecBootstrapConfigRefOutput)
}

func (i MachineSpecBootstrapConfigRefArgs) ToMachineSpecBootstrapConfigRefPtrOutput() MachineSpecBootstrapConfigRefPtrOutput {
	return i.ToMachineSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i MachineSpecBootstrapConfigRefArgs) ToMachineSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecBootstrapConfigRefOutput).ToMachineSpecBootstrapConfigRefPtrOutputWithContext(ctx)
}

// MachineSpecBootstrapConfigRefPtrInput is an input type that accepts MachineSpecBootstrapConfigRefArgs, MachineSpecBootstrapConfigRefPtr and MachineSpecBootstrapConfigRefPtrOutput values.
// You can construct a concrete instance of `MachineSpecBootstrapConfigRefPtrInput` via:
//
//	        MachineSpecBootstrapConfigRefArgs{...}
//
//	or:
//
//	        nil
type MachineSpecBootstrapConfigRefPtrInput interface {
	pulumi.Input

	ToMachineSpecBootstrapConfigRefPtrOutput() MachineSpecBootstrapConfigRefPtrOutput
	ToMachineSpecBootstrapConfigRefPtrOutputWithContext(context.Context) MachineSpecBootstrapConfigRefPtrOutput
}

type machineSpecBootstrapConfigRefPtrType MachineSpecBootstrapConfigRefArgs

func MachineSpecBootstrapConfigRefPtr(v *MachineSpecBootstrapConfigRefArgs) MachineSpecBootstrapConfigRefPtrInput {
	return (*machineSpecBootstrapConfigRefPtrType)(v)
}

func (*machineSpecBootstrapConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpecBootstrapConfigRef)(nil)).Elem()
}

func (i *machineSpecBootstrapConfigRefPtrType) ToMachineSpecBootstrapConfigRefPtrOutput() MachineSpecBootstrapConfigRefPtrOutput {
	return i.ToMachineSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (i *machineSpecBootstrapConfigRefPtrType) ToMachineSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecBootstrapConfigRefPtrOutput)
}

// ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
type MachineSpecBootstrapConfigRefOutput struct{ *pulumi.OutputState }

func (MachineSpecBootstrapConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachineSpecBootstrapConfigRefOutput) ToMachineSpecBootstrapConfigRefOutput() MachineSpecBootstrapConfigRefOutput {
	return o
}

func (o MachineSpecBootstrapConfigRefOutput) ToMachineSpecBootstrapConfigRefOutputWithContext(ctx context.Context) MachineSpecBootstrapConfigRefOutput {
	return o
}

func (o MachineSpecBootstrapConfigRefOutput) ToMachineSpecBootstrapConfigRefPtrOutput() MachineSpecBootstrapConfigRefPtrOutput {
	return o.ToMachineSpecBootstrapConfigRefPtrOutputWithContext(context.Background())
}

func (o MachineSpecBootstrapConfigRefOutput) ToMachineSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSpecBootstrapConfigRef) *MachineSpecBootstrapConfigRef {
		return &v
	}).(MachineSpecBootstrapConfigRefPtrOutput)
}

// API version of the referent.
func (o MachineSpecBootstrapConfigRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrapConfigRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSpecBootstrapConfigRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrapConfigRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSpecBootstrapConfigRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrapConfigRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSpecBootstrapConfigRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrapConfigRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSpecBootstrapConfigRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrapConfigRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSpecBootstrapConfigRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrapConfigRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSpecBootstrapConfigRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecBootstrapConfigRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineSpecBootstrapConfigRefPtrOutput struct{ *pulumi.OutputState }

func (MachineSpecBootstrapConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpecBootstrapConfigRef)(nil)).Elem()
}

func (o MachineSpecBootstrapConfigRefPtrOutput) ToMachineSpecBootstrapConfigRefPtrOutput() MachineSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachineSpecBootstrapConfigRefPtrOutput) ToMachineSpecBootstrapConfigRefPtrOutputWithContext(ctx context.Context) MachineSpecBootstrapConfigRefPtrOutput {
	return o
}

func (o MachineSpecBootstrapConfigRefPtrOutput) Elem() MachineSpecBootstrapConfigRefOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) MachineSpecBootstrapConfigRef {
		if v != nil {
			return *v
		}
		var ret MachineSpecBootstrapConfigRef
		return ret
	}).(MachineSpecBootstrapConfigRefOutput)
}

// API version of the referent.
func (o MachineSpecBootstrapConfigRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSpecBootstrapConfigRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSpecBootstrapConfigRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSpecBootstrapConfigRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSpecBootstrapConfigRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSpecBootstrapConfigRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSpecBootstrapConfigRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecBootstrapConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineSpecInfrastructureRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineSpecInfrastructureRefInput is an input type that accepts MachineSpecInfrastructureRefArgs and MachineSpecInfrastructureRefOutput values.
// You can construct a concrete instance of `MachineSpecInfrastructureRefInput` via:
//
//	MachineSpecInfrastructureRefArgs{...}
type MachineSpecInfrastructureRefInput interface {
	pulumi.Input

	ToMachineSpecInfrastructureRefOutput() MachineSpecInfrastructureRefOutput
	ToMachineSpecInfrastructureRefOutputWithContext(context.Context) MachineSpecInfrastructureRefOutput
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineSpecInfrastructureRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineSpecInfrastructureRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpecInfrastructureRef)(nil)).Elem()
}

func (i MachineSpecInfrastructureRefArgs) ToMachineSpecInfrastructureRefOutput() MachineSpecInfrastructureRefOutput {
	return i.ToMachineSpecInfrastructureRefOutputWithContext(context.Background())
}

func (i MachineSpecInfrastructureRefArgs) ToMachineSpecInfrastructureRefOutputWithContext(ctx context.Context) MachineSpecInfrastructureRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecInfrastructureRefOutput)
}

func (i MachineSpecInfrastructureRefArgs) ToMachineSpecInfrastructureRefPtrOutput() MachineSpecInfrastructureRefPtrOutput {
	return i.ToMachineSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i MachineSpecInfrastructureRefArgs) ToMachineSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecInfrastructureRefOutput).ToMachineSpecInfrastructureRefPtrOutputWithContext(ctx)
}

// MachineSpecInfrastructureRefPtrInput is an input type that accepts MachineSpecInfrastructureRefArgs, MachineSpecInfrastructureRefPtr and MachineSpecInfrastructureRefPtrOutput values.
// You can construct a concrete instance of `MachineSpecInfrastructureRefPtrInput` via:
//
//	        MachineSpecInfrastructureRefArgs{...}
//
//	or:
//
//	        nil
type MachineSpecInfrastructureRefPtrInput interface {
	pulumi.Input

	ToMachineSpecInfrastructureRefPtrOutput() MachineSpecInfrastructureRefPtrOutput
	ToMachineSpecInfrastructureRefPtrOutputWithContext(context.Context) MachineSpecInfrastructureRefPtrOutput
}

type machineSpecInfrastructureRefPtrType MachineSpecInfrastructureRefArgs

func MachineSpecInfrastructureRefPtr(v *MachineSpecInfrastructureRefArgs) MachineSpecInfrastructureRefPtrInput {
	return (*machineSpecInfrastructureRefPtrType)(v)
}

func (*machineSpecInfrastructureRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpecInfrastructureRef)(nil)).Elem()
}

func (i *machineSpecInfrastructureRefPtrType) ToMachineSpecInfrastructureRefPtrOutput() MachineSpecInfrastructureRefPtrOutput {
	return i.ToMachineSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (i *machineSpecInfrastructureRefPtrType) ToMachineSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSpecInfrastructureRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSpecInfrastructureRefPtrOutput)
}

// InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
type MachineSpecInfrastructureRefOutput struct{ *pulumi.OutputState }

func (MachineSpecInfrastructureRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSpecInfrastructureRef)(nil)).Elem()
}

func (o MachineSpecInfrastructureRefOutput) ToMachineSpecInfrastructureRefOutput() MachineSpecInfrastructureRefOutput {
	return o
}

func (o MachineSpecInfrastructureRefOutput) ToMachineSpecInfrastructureRefOutputWithContext(ctx context.Context) MachineSpecInfrastructureRefOutput {
	return o
}

func (o MachineSpecInfrastructureRefOutput) ToMachineSpecInfrastructureRefPtrOutput() MachineSpecInfrastructureRefPtrOutput {
	return o.ToMachineSpecInfrastructureRefPtrOutputWithContext(context.Background())
}

func (o MachineSpecInfrastructureRefOutput) ToMachineSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSpecInfrastructureRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineSpecInfrastructureRef) *MachineSpecInfrastructureRef {
		return &v
	}).(MachineSpecInfrastructureRefPtrOutput)
}

// API version of the referent.
func (o MachineSpecInfrastructureRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecInfrastructureRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSpecInfrastructureRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecInfrastructureRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSpecInfrastructureRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecInfrastructureRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSpecInfrastructureRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecInfrastructureRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSpecInfrastructureRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecInfrastructureRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSpecInfrastructureRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecInfrastructureRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSpecInfrastructureRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSpecInfrastructureRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineSpecInfrastructureRefPtrOutput struct{ *pulumi.OutputState }

func (MachineSpecInfrastructureRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineSpecInfrastructureRef)(nil)).Elem()
}

func (o MachineSpecInfrastructureRefPtrOutput) ToMachineSpecInfrastructureRefPtrOutput() MachineSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachineSpecInfrastructureRefPtrOutput) ToMachineSpecInfrastructureRefPtrOutputWithContext(ctx context.Context) MachineSpecInfrastructureRefPtrOutput {
	return o
}

func (o MachineSpecInfrastructureRefPtrOutput) Elem() MachineSpecInfrastructureRefOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) MachineSpecInfrastructureRef {
		if v != nil {
			return *v
		}
		var ret MachineSpecInfrastructureRef
		return ret
	}).(MachineSpecInfrastructureRefOutput)
}

// API version of the referent.
func (o MachineSpecInfrastructureRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineSpecInfrastructureRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineSpecInfrastructureRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineSpecInfrastructureRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineSpecInfrastructureRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineSpecInfrastructureRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineSpecInfrastructureRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineSpecInfrastructureRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// MachineStatus defines the observed state of Machine.
type MachineStatus struct {
	// Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
	Addresses []MachineStatusAddresses `pulumi:"addresses"`
	// BootstrapReady is the state of the bootstrap provider.
	BootstrapReady *bool `pulumi:"bootstrapReady"`
	// Conditions defines current service state of the Machine.
	Conditions []MachineStatusConditions `pulumi:"conditions"`
	// FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.
	//  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
	//  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
	FailureMessage *string `pulumi:"failureMessage"`
	// FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.
	//  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
	//  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
	FailureReason *string `pulumi:"failureReason"`
	// InfrastructureReady is the state of the infrastructure provider.
	InfrastructureReady *bool `pulumi:"infrastructureReady"`
	// LastUpdated identifies when the phase of the Machine last transitioned.
	LastUpdated *string `pulumi:"lastUpdated"`
	// NodeRef will point to the corresponding Node if it exists.
	NodeRef *MachineStatusNodeRef `pulumi:"nodeRef"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase *string `pulumi:"phase"`
	// Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
	Version *string `pulumi:"version"`
}

// MachineStatusInput is an input type that accepts MachineStatusArgs and MachineStatusOutput values.
// You can construct a concrete instance of `MachineStatusInput` via:
//
//	MachineStatusArgs{...}
type MachineStatusInput interface {
	pulumi.Input

	ToMachineStatusOutput() MachineStatusOutput
	ToMachineStatusOutputWithContext(context.Context) MachineStatusOutput
}

// MachineStatus defines the observed state of Machine.
type MachineStatusArgs struct {
	// Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
	Addresses MachineStatusAddressesArrayInput `pulumi:"addresses"`
	// BootstrapReady is the state of the bootstrap provider.
	BootstrapReady pulumi.BoolPtrInput `pulumi:"bootstrapReady"`
	// Conditions defines current service state of the Machine.
	Conditions MachineStatusConditionsArrayInput `pulumi:"conditions"`
	// FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.
	//  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
	//  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
	FailureMessage pulumi.StringPtrInput `pulumi:"failureMessage"`
	// FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.
	//  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
	//  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// InfrastructureReady is the state of the infrastructure provider.
	InfrastructureReady pulumi.BoolPtrInput `pulumi:"infrastructureReady"`
	// LastUpdated identifies when the phase of the Machine last transitioned.
	LastUpdated pulumi.StringPtrInput `pulumi:"lastUpdated"`
	// NodeRef will point to the corresponding Node if it exists.
	NodeRef MachineStatusNodeRefPtrInput `pulumi:"nodeRef"`
	// ObservedGeneration is the latest generation observed by the controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (MachineStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatus)(nil)).Elem()
}

func (i MachineStatusArgs) ToMachineStatusOutput() MachineStatusOutput {
	return i.ToMachineStatusOutputWithContext(context.Background())
}

func (i MachineStatusArgs) ToMachineStatusOutputWithContext(ctx context.Context) MachineStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusOutput)
}

func (i MachineStatusArgs) ToMachineStatusPtrOutput() MachineStatusPtrOutput {
	return i.ToMachineStatusPtrOutputWithContext(context.Background())
}

func (i MachineStatusArgs) ToMachineStatusPtrOutputWithContext(ctx context.Context) MachineStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusOutput).ToMachineStatusPtrOutputWithContext(ctx)
}

// MachineStatusPtrInput is an input type that accepts MachineStatusArgs, MachineStatusPtr and MachineStatusPtrOutput values.
// You can construct a concrete instance of `MachineStatusPtrInput` via:
//
//	        MachineStatusArgs{...}
//
//	or:
//
//	        nil
type MachineStatusPtrInput interface {
	pulumi.Input

	ToMachineStatusPtrOutput() MachineStatusPtrOutput
	ToMachineStatusPtrOutputWithContext(context.Context) MachineStatusPtrOutput
}

type machineStatusPtrType MachineStatusArgs

func MachineStatusPtr(v *MachineStatusArgs) MachineStatusPtrInput {
	return (*machineStatusPtrType)(v)
}

func (*machineStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineStatus)(nil)).Elem()
}

func (i *machineStatusPtrType) ToMachineStatusPtrOutput() MachineStatusPtrOutput {
	return i.ToMachineStatusPtrOutputWithContext(context.Background())
}

func (i *machineStatusPtrType) ToMachineStatusPtrOutputWithContext(ctx context.Context) MachineStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusPtrOutput)
}

// MachineStatus defines the observed state of Machine.
type MachineStatusOutput struct{ *pulumi.OutputState }

func (MachineStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatus)(nil)).Elem()
}

func (o MachineStatusOutput) ToMachineStatusOutput() MachineStatusOutput {
	return o
}

func (o MachineStatusOutput) ToMachineStatusOutputWithContext(ctx context.Context) MachineStatusOutput {
	return o
}

func (o MachineStatusOutput) ToMachineStatusPtrOutput() MachineStatusPtrOutput {
	return o.ToMachineStatusPtrOutputWithContext(context.Background())
}

func (o MachineStatusOutput) ToMachineStatusPtrOutputWithContext(ctx context.Context) MachineStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineStatus) *MachineStatus {
		return &v
	}).(MachineStatusPtrOutput)
}

// Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
func (o MachineStatusOutput) Addresses() MachineStatusAddressesArrayOutput {
	return o.ApplyT(func(v MachineStatus) []MachineStatusAddresses { return v.Addresses }).(MachineStatusAddressesArrayOutput)
}

// BootstrapReady is the state of the bootstrap provider.
func (o MachineStatusOutput) BootstrapReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineStatus) *bool { return v.BootstrapReady }).(pulumi.BoolPtrOutput)
}

// Conditions defines current service state of the Machine.
func (o MachineStatusOutput) Conditions() MachineStatusConditionsArrayOutput {
	return o.ApplyT(func(v MachineStatus) []MachineStatusConditions { return v.Conditions }).(MachineStatusConditionsArrayOutput)
}

// FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.
//
//	This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
//	Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
func (o MachineStatusOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatus) *string { return v.FailureMessage }).(pulumi.StringPtrOutput)
}

// FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.
//
//	This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
//	Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
func (o MachineStatusOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatus) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// InfrastructureReady is the state of the infrastructure provider.
func (o MachineStatusOutput) InfrastructureReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineStatus) *bool { return v.InfrastructureReady }).(pulumi.BoolPtrOutput)
}

// LastUpdated identifies when the phase of the Machine last transitioned.
func (o MachineStatusOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatus) *string { return v.LastUpdated }).(pulumi.StringPtrOutput)
}

// NodeRef will point to the corresponding Node if it exists.
func (o MachineStatusOutput) NodeRef() MachineStatusNodeRefPtrOutput {
	return o.ApplyT(func(v MachineStatus) *MachineStatusNodeRef { return v.NodeRef }).(MachineStatusNodeRefPtrOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o MachineStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o MachineStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
func (o MachineStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MachineStatusPtrOutput struct{ *pulumi.OutputState }

func (MachineStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineStatus)(nil)).Elem()
}

func (o MachineStatusPtrOutput) ToMachineStatusPtrOutput() MachineStatusPtrOutput {
	return o
}

func (o MachineStatusPtrOutput) ToMachineStatusPtrOutputWithContext(ctx context.Context) MachineStatusPtrOutput {
	return o
}

func (o MachineStatusPtrOutput) Elem() MachineStatusOutput {
	return o.ApplyT(func(v *MachineStatus) MachineStatus {
		if v != nil {
			return *v
		}
		var ret MachineStatus
		return ret
	}).(MachineStatusOutput)
}

// Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
func (o MachineStatusPtrOutput) Addresses() MachineStatusAddressesArrayOutput {
	return o.ApplyT(func(v *MachineStatus) []MachineStatusAddresses {
		if v == nil {
			return nil
		}
		return v.Addresses
	}).(MachineStatusAddressesArrayOutput)
}

// BootstrapReady is the state of the bootstrap provider.
func (o MachineStatusPtrOutput) BootstrapReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *bool {
		if v == nil {
			return nil
		}
		return v.BootstrapReady
	}).(pulumi.BoolPtrOutput)
}

// Conditions defines current service state of the Machine.
func (o MachineStatusPtrOutput) Conditions() MachineStatusConditionsArrayOutput {
	return o.ApplyT(func(v *MachineStatus) []MachineStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(MachineStatusConditionsArrayOutput)
}

// FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.
//
//	This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
//	Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
func (o MachineStatusPtrOutput) FailureMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureMessage
	}).(pulumi.StringPtrOutput)
}

// FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.
//
//	This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.
//	Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
func (o MachineStatusPtrOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureReason
	}).(pulumi.StringPtrOutput)
}

// InfrastructureReady is the state of the infrastructure provider.
func (o MachineStatusPtrOutput) InfrastructureReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *bool {
		if v == nil {
			return nil
		}
		return v.InfrastructureReady
	}).(pulumi.BoolPtrOutput)
}

// LastUpdated identifies when the phase of the Machine last transitioned.
func (o MachineStatusPtrOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdated
	}).(pulumi.StringPtrOutput)
}

// NodeRef will point to the corresponding Node if it exists.
func (o MachineStatusPtrOutput) NodeRef() MachineStatusNodeRefPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *MachineStatusNodeRef {
		if v == nil {
			return nil
		}
		return v.NodeRef
	}).(MachineStatusNodeRefPtrOutput)
}

// ObservedGeneration is the latest generation observed by the controller.
func (o MachineStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o MachineStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
func (o MachineStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// MachineAddress contains information for the node's address.
type MachineStatusAddresses struct {
	// The machine address.
	Address string `pulumi:"address"`
	// Machine address type, one of Hostname, ExternalIP or InternalIP.
	Type string `pulumi:"type"`
}

// MachineStatusAddressesInput is an input type that accepts MachineStatusAddressesArgs and MachineStatusAddressesOutput values.
// You can construct a concrete instance of `MachineStatusAddressesInput` via:
//
//	MachineStatusAddressesArgs{...}
type MachineStatusAddressesInput interface {
	pulumi.Input

	ToMachineStatusAddressesOutput() MachineStatusAddressesOutput
	ToMachineStatusAddressesOutputWithContext(context.Context) MachineStatusAddressesOutput
}

// MachineAddress contains information for the node's address.
type MachineStatusAddressesArgs struct {
	// The machine address.
	Address pulumi.StringInput `pulumi:"address"`
	// Machine address type, one of Hostname, ExternalIP or InternalIP.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MachineStatusAddressesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatusAddresses)(nil)).Elem()
}

func (i MachineStatusAddressesArgs) ToMachineStatusAddressesOutput() MachineStatusAddressesOutput {
	return i.ToMachineStatusAddressesOutputWithContext(context.Background())
}

func (i MachineStatusAddressesArgs) ToMachineStatusAddressesOutputWithContext(ctx context.Context) MachineStatusAddressesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusAddressesOutput)
}

// MachineStatusAddressesArrayInput is an input type that accepts MachineStatusAddressesArray and MachineStatusAddressesArrayOutput values.
// You can construct a concrete instance of `MachineStatusAddressesArrayInput` via:
//
//	MachineStatusAddressesArray{ MachineStatusAddressesArgs{...} }
type MachineStatusAddressesArrayInput interface {
	pulumi.Input

	ToMachineStatusAddressesArrayOutput() MachineStatusAddressesArrayOutput
	ToMachineStatusAddressesArrayOutputWithContext(context.Context) MachineStatusAddressesArrayOutput
}

type MachineStatusAddressesArray []MachineStatusAddressesInput

func (MachineStatusAddressesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineStatusAddresses)(nil)).Elem()
}

func (i MachineStatusAddressesArray) ToMachineStatusAddressesArrayOutput() MachineStatusAddressesArrayOutput {
	return i.ToMachineStatusAddressesArrayOutputWithContext(context.Background())
}

func (i MachineStatusAddressesArray) ToMachineStatusAddressesArrayOutputWithContext(ctx context.Context) MachineStatusAddressesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusAddressesArrayOutput)
}

// MachineAddress contains information for the node's address.
type MachineStatusAddressesOutput struct{ *pulumi.OutputState }

func (MachineStatusAddressesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatusAddresses)(nil)).Elem()
}

func (o MachineStatusAddressesOutput) ToMachineStatusAddressesOutput() MachineStatusAddressesOutput {
	return o
}

func (o MachineStatusAddressesOutput) ToMachineStatusAddressesOutputWithContext(ctx context.Context) MachineStatusAddressesOutput {
	return o
}

// The machine address.
func (o MachineStatusAddressesOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v MachineStatusAddresses) string { return v.Address }).(pulumi.StringOutput)
}

// Machine address type, one of Hostname, ExternalIP or InternalIP.
func (o MachineStatusAddressesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MachineStatusAddresses) string { return v.Type }).(pulumi.StringOutput)
}

type MachineStatusAddressesArrayOutput struct{ *pulumi.OutputState }

func (MachineStatusAddressesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineStatusAddresses)(nil)).Elem()
}

func (o MachineStatusAddressesArrayOutput) ToMachineStatusAddressesArrayOutput() MachineStatusAddressesArrayOutput {
	return o
}

func (o MachineStatusAddressesArrayOutput) ToMachineStatusAddressesArrayOutputWithContext(ctx context.Context) MachineStatusAddressesArrayOutput {
	return o
}

func (o MachineStatusAddressesArrayOutput) Index(i pulumi.IntInput) MachineStatusAddressesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineStatusAddresses {
		return vs[0].([]MachineStatusAddresses)[vs[1].(int)]
	}).(MachineStatusAddressesOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type MachineStatusConditions struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type string `pulumi:"type"`
}

// MachineStatusConditionsInput is an input type that accepts MachineStatusConditionsArgs and MachineStatusConditionsOutput values.
// You can construct a concrete instance of `MachineStatusConditionsInput` via:
//
//	MachineStatusConditionsArgs{...}
type MachineStatusConditionsInput interface {
	pulumi.Input

	ToMachineStatusConditionsOutput() MachineStatusConditionsOutput
	ToMachineStatusConditionsOutputWithContext(context.Context) MachineStatusConditionsOutput
}

// Condition defines an observation of a Cluster API resource operational state.
type MachineStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition. This field may be empty.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MachineStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatusConditions)(nil)).Elem()
}

func (i MachineStatusConditionsArgs) ToMachineStatusConditionsOutput() MachineStatusConditionsOutput {
	return i.ToMachineStatusConditionsOutputWithContext(context.Background())
}

func (i MachineStatusConditionsArgs) ToMachineStatusConditionsOutputWithContext(ctx context.Context) MachineStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusConditionsOutput)
}

// MachineStatusConditionsArrayInput is an input type that accepts MachineStatusConditionsArray and MachineStatusConditionsArrayOutput values.
// You can construct a concrete instance of `MachineStatusConditionsArrayInput` via:
//
//	MachineStatusConditionsArray{ MachineStatusConditionsArgs{...} }
type MachineStatusConditionsArrayInput interface {
	pulumi.Input

	ToMachineStatusConditionsArrayOutput() MachineStatusConditionsArrayOutput
	ToMachineStatusConditionsArrayOutputWithContext(context.Context) MachineStatusConditionsArrayOutput
}

type MachineStatusConditionsArray []MachineStatusConditionsInput

func (MachineStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineStatusConditions)(nil)).Elem()
}

func (i MachineStatusConditionsArray) ToMachineStatusConditionsArrayOutput() MachineStatusConditionsArrayOutput {
	return i.ToMachineStatusConditionsArrayOutputWithContext(context.Background())
}

func (i MachineStatusConditionsArray) ToMachineStatusConditionsArrayOutputWithContext(ctx context.Context) MachineStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusConditionsArrayOutput)
}

// Condition defines an observation of a Cluster API resource operational state.
type MachineStatusConditionsOutput struct{ *pulumi.OutputState }

func (MachineStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatusConditions)(nil)).Elem()
}

func (o MachineStatusConditionsOutput) ToMachineStatusConditionsOutput() MachineStatusConditionsOutput {
	return o
}

func (o MachineStatusConditionsOutput) ToMachineStatusConditionsOutputWithContext(ctx context.Context) MachineStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
func (o MachineStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition. This field may be empty.
func (o MachineStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
func (o MachineStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
func (o MachineStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o MachineStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MachineStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
func (o MachineStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MachineStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type MachineStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (MachineStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineStatusConditions)(nil)).Elem()
}

func (o MachineStatusConditionsArrayOutput) ToMachineStatusConditionsArrayOutput() MachineStatusConditionsArrayOutput {
	return o
}

func (o MachineStatusConditionsArrayOutput) ToMachineStatusConditionsArrayOutputWithContext(ctx context.Context) MachineStatusConditionsArrayOutput {
	return o
}

func (o MachineStatusConditionsArrayOutput) Index(i pulumi.IntInput) MachineStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineStatusConditions {
		return vs[0].([]MachineStatusConditions)[vs[1].(int)]
	}).(MachineStatusConditionsOutput)
}

// NodeRef will point to the corresponding Node if it exists.
type MachineStatusNodeRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineStatusNodeRefInput is an input type that accepts MachineStatusNodeRefArgs and MachineStatusNodeRefOutput values.
// You can construct a concrete instance of `MachineStatusNodeRefInput` via:
//
//	MachineStatusNodeRefArgs{...}
type MachineStatusNodeRefInput interface {
	pulumi.Input

	ToMachineStatusNodeRefOutput() MachineStatusNodeRefOutput
	ToMachineStatusNodeRefOutputWithContext(context.Context) MachineStatusNodeRefOutput
}

// NodeRef will point to the corresponding Node if it exists.
type MachineStatusNodeRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineStatusNodeRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatusNodeRef)(nil)).Elem()
}

func (i MachineStatusNodeRefArgs) ToMachineStatusNodeRefOutput() MachineStatusNodeRefOutput {
	return i.ToMachineStatusNodeRefOutputWithContext(context.Background())
}

func (i MachineStatusNodeRefArgs) ToMachineStatusNodeRefOutputWithContext(ctx context.Context) MachineStatusNodeRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusNodeRefOutput)
}

func (i MachineStatusNodeRefArgs) ToMachineStatusNodeRefPtrOutput() MachineStatusNodeRefPtrOutput {
	return i.ToMachineStatusNodeRefPtrOutputWithContext(context.Background())
}

func (i MachineStatusNodeRefArgs) ToMachineStatusNodeRefPtrOutputWithContext(ctx context.Context) MachineStatusNodeRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusNodeRefOutput).ToMachineStatusNodeRefPtrOutputWithContext(ctx)
}

// MachineStatusNodeRefPtrInput is an input type that accepts MachineStatusNodeRefArgs, MachineStatusNodeRefPtr and MachineStatusNodeRefPtrOutput values.
// You can construct a concrete instance of `MachineStatusNodeRefPtrInput` via:
//
//	        MachineStatusNodeRefArgs{...}
//
//	or:
//
//	        nil
type MachineStatusNodeRefPtrInput interface {
	pulumi.Input

	ToMachineStatusNodeRefPtrOutput() MachineStatusNodeRefPtrOutput
	ToMachineStatusNodeRefPtrOutputWithContext(context.Context) MachineStatusNodeRefPtrOutput
}

type machineStatusNodeRefPtrType MachineStatusNodeRefArgs

func MachineStatusNodeRefPtr(v *MachineStatusNodeRefArgs) MachineStatusNodeRefPtrInput {
	return (*machineStatusNodeRefPtrType)(v)
}

func (*machineStatusNodeRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineStatusNodeRef)(nil)).Elem()
}

func (i *machineStatusNodeRefPtrType) ToMachineStatusNodeRefPtrOutput() MachineStatusNodeRefPtrOutput {
	return i.ToMachineStatusNodeRefPtrOutputWithContext(context.Background())
}

func (i *machineStatusNodeRefPtrType) ToMachineStatusNodeRefPtrOutputWithContext(ctx context.Context) MachineStatusNodeRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineStatusNodeRefPtrOutput)
}

// NodeRef will point to the corresponding Node if it exists.
type MachineStatusNodeRefOutput struct{ *pulumi.OutputState }

func (MachineStatusNodeRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineStatusNodeRef)(nil)).Elem()
}

func (o MachineStatusNodeRefOutput) ToMachineStatusNodeRefOutput() MachineStatusNodeRefOutput {
	return o
}

func (o MachineStatusNodeRefOutput) ToMachineStatusNodeRefOutputWithContext(ctx context.Context) MachineStatusNodeRefOutput {
	return o
}

func (o MachineStatusNodeRefOutput) ToMachineStatusNodeRefPtrOutput() MachineStatusNodeRefPtrOutput {
	return o.ToMachineStatusNodeRefPtrOutputWithContext(context.Background())
}

func (o MachineStatusNodeRefOutput) ToMachineStatusNodeRefPtrOutputWithContext(ctx context.Context) MachineStatusNodeRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineStatusNodeRef) *MachineStatusNodeRef {
		return &v
	}).(MachineStatusNodeRefPtrOutput)
}

// API version of the referent.
func (o MachineStatusNodeRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusNodeRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineStatusNodeRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusNodeRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineStatusNodeRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusNodeRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineStatusNodeRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusNodeRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineStatusNodeRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusNodeRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineStatusNodeRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusNodeRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineStatusNodeRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineStatusNodeRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineStatusNodeRefPtrOutput struct{ *pulumi.OutputState }

func (MachineStatusNodeRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineStatusNodeRef)(nil)).Elem()
}

func (o MachineStatusNodeRefPtrOutput) ToMachineStatusNodeRefPtrOutput() MachineStatusNodeRefPtrOutput {
	return o
}

func (o MachineStatusNodeRefPtrOutput) ToMachineStatusNodeRefPtrOutputWithContext(ctx context.Context) MachineStatusNodeRefPtrOutput {
	return o
}

func (o MachineStatusNodeRefPtrOutput) Elem() MachineStatusNodeRefOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) MachineStatusNodeRef {
		if v != nil {
			return *v
		}
		var ret MachineStatusNodeRef
		return ret
	}).(MachineStatusNodeRefOutput)
}

// API version of the referent.
func (o MachineStatusNodeRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineStatusNodeRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineStatusNodeRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineStatusNodeRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineStatusNodeRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineStatusNodeRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineStatusNodeRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineStatusNodeRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecInput)(nil)).Elem(), ClusterSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecPtrInput)(nil)).Elem(), ClusterSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecClusterNetworkInput)(nil)).Elem(), ClusterSpecClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecClusterNetworkPtrInput)(nil)).Elem(), ClusterSpecClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecClusterNetworkPodsInput)(nil)).Elem(), ClusterSpecClusterNetworkPodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecClusterNetworkPodsPtrInput)(nil)).Elem(), ClusterSpecClusterNetworkPodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecClusterNetworkServicesInput)(nil)).Elem(), ClusterSpecClusterNetworkServicesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecClusterNetworkServicesPtrInput)(nil)).Elem(), ClusterSpecClusterNetworkServicesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecControlPlaneEndpointInput)(nil)).Elem(), ClusterSpecControlPlaneEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecControlPlaneEndpointPtrInput)(nil)).Elem(), ClusterSpecControlPlaneEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecControlPlaneRefInput)(nil)).Elem(), ClusterSpecControlPlaneRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecControlPlaneRefPtrInput)(nil)).Elem(), ClusterSpecControlPlaneRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecInfrastructureRefInput)(nil)).Elem(), ClusterSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecInfrastructureRefPtrInput)(nil)).Elem(), ClusterSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStatusInput)(nil)).Elem(), ClusterStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStatusPtrInput)(nil)).Elem(), ClusterStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStatusConditionsInput)(nil)).Elem(), ClusterStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStatusConditionsArrayInput)(nil)).Elem(), ClusterStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStatusFailureDomainsInput)(nil)).Elem(), ClusterStatusFailureDomainsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStatusFailureDomainsMapInput)(nil)).Elem(), ClusterStatusFailureDomainsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecInput)(nil)).Elem(), MachineDeploymentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecPtrInput)(nil)).Elem(), MachineDeploymentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecSelectorInput)(nil)).Elem(), MachineDeploymentSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecSelectorPtrInput)(nil)).Elem(), MachineDeploymentSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecSelectorMatchExpressionsInput)(nil)).Elem(), MachineDeploymentSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), MachineDeploymentSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecStrategyInput)(nil)).Elem(), MachineDeploymentSpecStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecStrategyPtrInput)(nil)).Elem(), MachineDeploymentSpecStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecStrategyRollingUpdateInput)(nil)).Elem(), MachineDeploymentSpecStrategyRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecStrategyRollingUpdatePtrInput)(nil)).Elem(), MachineDeploymentSpecStrategyRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateInput)(nil)).Elem(), MachineDeploymentSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplatePtrInput)(nil)).Elem(), MachineDeploymentSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateMetadataInput)(nil)).Elem(), MachineDeploymentSpecTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateMetadataPtrInput)(nil)).Elem(), MachineDeploymentSpecTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateMetadataOwnerReferencesInput)(nil)).Elem(), MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayInput)(nil)).Elem(), MachineDeploymentSpecTemplateMetadataOwnerReferencesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecPtrInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrapInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrapPtrInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrapConfigRefInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecInfrastructureRefInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentSpecTemplateSpecInfrastructureRefPtrInput)(nil)).Elem(), MachineDeploymentSpecTemplateSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentStatusInput)(nil)).Elem(), MachineDeploymentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDeploymentStatusPtrInput)(nil)).Elem(), MachineDeploymentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecInput)(nil)).Elem(), MachineHealthCheckSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecPtrInput)(nil)).Elem(), MachineHealthCheckSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecRemediationTemplateInput)(nil)).Elem(), MachineHealthCheckSpecRemediationTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecRemediationTemplatePtrInput)(nil)).Elem(), MachineHealthCheckSpecRemediationTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecSelectorInput)(nil)).Elem(), MachineHealthCheckSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecSelectorPtrInput)(nil)).Elem(), MachineHealthCheckSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecSelectorMatchExpressionsInput)(nil)).Elem(), MachineHealthCheckSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), MachineHealthCheckSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecUnhealthyConditionsInput)(nil)).Elem(), MachineHealthCheckSpecUnhealthyConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckSpecUnhealthyConditionsArrayInput)(nil)).Elem(), MachineHealthCheckSpecUnhealthyConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckStatusInput)(nil)).Elem(), MachineHealthCheckStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckStatusPtrInput)(nil)).Elem(), MachineHealthCheckStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckStatusConditionsInput)(nil)).Elem(), MachineHealthCheckStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineHealthCheckStatusConditionsArrayInput)(nil)).Elem(), MachineHealthCheckStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecInput)(nil)).Elem(), MachinePoolSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecPtrInput)(nil)).Elem(), MachinePoolSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecStrategyInput)(nil)).Elem(), MachinePoolSpecStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecStrategyPtrInput)(nil)).Elem(), MachinePoolSpecStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecStrategyRollingUpdateInput)(nil)).Elem(), MachinePoolSpecStrategyRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecStrategyRollingUpdatePtrInput)(nil)).Elem(), MachinePoolSpecStrategyRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateInput)(nil)).Elem(), MachinePoolSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplatePtrInput)(nil)).Elem(), MachinePoolSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateMetadataInput)(nil)).Elem(), MachinePoolSpecTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateMetadataPtrInput)(nil)).Elem(), MachinePoolSpecTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateMetadataOwnerReferencesInput)(nil)).Elem(), MachinePoolSpecTemplateMetadataOwnerReferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateMetadataOwnerReferencesArrayInput)(nil)).Elem(), MachinePoolSpecTemplateMetadataOwnerReferencesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecInput)(nil)).Elem(), MachinePoolSpecTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecPtrInput)(nil)).Elem(), MachinePoolSpecTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrapInput)(nil)).Elem(), MachinePoolSpecTemplateSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrapPtrInput)(nil)).Elem(), MachinePoolSpecTemplateSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrapConfigRefInput)(nil)).Elem(), MachinePoolSpecTemplateSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecBootstrapConfigRefPtrInput)(nil)).Elem(), MachinePoolSpecTemplateSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecInfrastructureRefInput)(nil)).Elem(), MachinePoolSpecTemplateSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolSpecTemplateSpecInfrastructureRefPtrInput)(nil)).Elem(), MachinePoolSpecTemplateSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolStatusInput)(nil)).Elem(), MachinePoolStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolStatusPtrInput)(nil)).Elem(), MachinePoolStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolStatusConditionsInput)(nil)).Elem(), MachinePoolStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolStatusConditionsArrayInput)(nil)).Elem(), MachinePoolStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolStatusNodeRefsInput)(nil)).Elem(), MachinePoolStatusNodeRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePoolStatusNodeRefsArrayInput)(nil)).Elem(), MachinePoolStatusNodeRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecInput)(nil)).Elem(), MachineSetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecPtrInput)(nil)).Elem(), MachineSetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecSelectorInput)(nil)).Elem(), MachineSetSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecSelectorPtrInput)(nil)).Elem(), MachineSetSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecSelectorMatchExpressionsInput)(nil)).Elem(), MachineSetSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), MachineSetSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateInput)(nil)).Elem(), MachineSetSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplatePtrInput)(nil)).Elem(), MachineSetSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateMetadataInput)(nil)).Elem(), MachineSetSpecTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateMetadataPtrInput)(nil)).Elem(), MachineSetSpecTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateMetadataOwnerReferencesInput)(nil)).Elem(), MachineSetSpecTemplateMetadataOwnerReferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateMetadataOwnerReferencesArrayInput)(nil)).Elem(), MachineSetSpecTemplateMetadataOwnerReferencesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecInput)(nil)).Elem(), MachineSetSpecTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecPtrInput)(nil)).Elem(), MachineSetSpecTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrapInput)(nil)).Elem(), MachineSetSpecTemplateSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrapPtrInput)(nil)).Elem(), MachineSetSpecTemplateSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrapConfigRefInput)(nil)).Elem(), MachineSetSpecTemplateSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecBootstrapConfigRefPtrInput)(nil)).Elem(), MachineSetSpecTemplateSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecInfrastructureRefInput)(nil)).Elem(), MachineSetSpecTemplateSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetSpecTemplateSpecInfrastructureRefPtrInput)(nil)).Elem(), MachineSetSpecTemplateSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetStatusInput)(nil)).Elem(), MachineSetStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSetStatusPtrInput)(nil)).Elem(), MachineSetStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecInput)(nil)).Elem(), MachineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecPtrInput)(nil)).Elem(), MachineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecBootstrapInput)(nil)).Elem(), MachineSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecBootstrapPtrInput)(nil)).Elem(), MachineSpecBootstrapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecBootstrapConfigRefInput)(nil)).Elem(), MachineSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecBootstrapConfigRefPtrInput)(nil)).Elem(), MachineSpecBootstrapConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecInfrastructureRefInput)(nil)).Elem(), MachineSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSpecInfrastructureRefPtrInput)(nil)).Elem(), MachineSpecInfrastructureRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusInput)(nil)).Elem(), MachineStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusPtrInput)(nil)).Elem(), MachineStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusAddressesInput)(nil)).Elem(), MachineStatusAddressesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusAddressesArrayInput)(nil)).Elem(), MachineStatusAddressesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusConditionsInput)(nil)).Elem(), MachineStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusConditionsArrayInput)(nil)).Elem(), MachineStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusNodeRefInput)(nil)).Elem(), MachineStatusNodeRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineStatusNodeRefPtrInput)(nil)).Elem(), MachineStatusNodeRefArgs{})
	pulumi.RegisterOutputType(ClusterSpecOutput{})
	pulumi.RegisterOutputType(ClusterSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecClusterNetworkOutput{})
	pulumi.RegisterOutputType(ClusterSpecClusterNetworkPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecClusterNetworkPodsOutput{})
	pulumi.RegisterOutputType(ClusterSpecClusterNetworkPodsPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecClusterNetworkServicesOutput{})
	pulumi.RegisterOutputType(ClusterSpecClusterNetworkServicesPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecControlPlaneEndpointOutput{})
	pulumi.RegisterOutputType(ClusterSpecControlPlaneEndpointPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecControlPlaneRefOutput{})
	pulumi.RegisterOutputType(ClusterSpecControlPlaneRefPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecInfrastructureRefOutput{})
	pulumi.RegisterOutputType(ClusterSpecInfrastructureRefPtrOutput{})
	pulumi.RegisterOutputType(ClusterStatusOutput{})
	pulumi.RegisterOutputType(ClusterStatusPtrOutput{})
	pulumi.RegisterOutputType(ClusterStatusConditionsOutput{})
	pulumi.RegisterOutputType(ClusterStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ClusterStatusFailureDomainsOutput{})
	pulumi.RegisterOutputType(ClusterStatusFailureDomainsMapOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecSelectorOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecStrategyOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecStrategyPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecStrategyRollingUpdateOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecStrategyRollingUpdatePtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateMetadataOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateMetadataPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateMetadataOwnerReferencesOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateMetadataOwnerReferencesArrayOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecBootstrapOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecBootstrapPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecBootstrapConfigRefOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecBootstrapConfigRefPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecInfrastructureRefOutput{})
	pulumi.RegisterOutputType(MachineDeploymentSpecTemplateSpecInfrastructureRefPtrOutput{})
	pulumi.RegisterOutputType(MachineDeploymentStatusOutput{})
	pulumi.RegisterOutputType(MachineDeploymentStatusPtrOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecPtrOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecRemediationTemplateOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecRemediationTemplatePtrOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecSelectorOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecUnhealthyConditionsOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckSpecUnhealthyConditionsArrayOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckStatusOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckStatusPtrOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckStatusConditionsOutput{})
	pulumi.RegisterOutputType(MachineHealthCheckStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecStrategyOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecStrategyPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecStrategyRollingUpdateOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecStrategyRollingUpdatePtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateMetadataOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateMetadataPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateMetadataOwnerReferencesOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateMetadataOwnerReferencesArrayOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecBootstrapOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecBootstrapPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecBootstrapConfigRefOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecBootstrapConfigRefPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecInfrastructureRefOutput{})
	pulumi.RegisterOutputType(MachinePoolSpecTemplateSpecInfrastructureRefPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolStatusOutput{})
	pulumi.RegisterOutputType(MachinePoolStatusPtrOutput{})
	pulumi.RegisterOutputType(MachinePoolStatusConditionsOutput{})
	pulumi.RegisterOutputType(MachinePoolStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(MachinePoolStatusNodeRefsOutput{})
	pulumi.RegisterOutputType(MachinePoolStatusNodeRefsArrayOutput{})
	pulumi.RegisterOutputType(MachineSetSpecOutput{})
	pulumi.RegisterOutputType(MachineSetSpecPtrOutput{})
	pulumi.RegisterOutputType(MachineSetSpecSelectorOutput{})
	pulumi.RegisterOutputType(MachineSetSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(MachineSetSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(MachineSetSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateMetadataOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateMetadataPtrOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateMetadataOwnerReferencesOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateMetadataOwnerReferencesArrayOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecBootstrapOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecBootstrapPtrOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecBootstrapConfigRefOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecBootstrapConfigRefPtrOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecInfrastructureRefOutput{})
	pulumi.RegisterOutputType(MachineSetSpecTemplateSpecInfrastructureRefPtrOutput{})
	pulumi.RegisterOutputType(MachineSetStatusOutput{})
	pulumi.RegisterOutputType(MachineSetStatusPtrOutput{})
	pulumi.RegisterOutputType(MachineSpecOutput{})
	pulumi.RegisterOutputType(MachineSpecPtrOutput{})
	pulumi.RegisterOutputType(MachineSpecBootstrapOutput{})
	pulumi.RegisterOutputType(MachineSpecBootstrapPtrOutput{})
	pulumi.RegisterOutputType(MachineSpecBootstrapConfigRefOutput{})
	pulumi.RegisterOutputType(MachineSpecBootstrapConfigRefPtrOutput{})
	pulumi.RegisterOutputType(MachineSpecInfrastructureRefOutput{})
	pulumi.RegisterOutputType(MachineSpecInfrastructureRefPtrOutput{})
	pulumi.RegisterOutputType(MachineStatusOutput{})
	pulumi.RegisterOutputType(MachineStatusPtrOutput{})
	pulumi.RegisterOutputType(MachineStatusAddressesOutput{})
	pulumi.RegisterOutputType(MachineStatusAddressesArrayOutput{})
	pulumi.RegisterOutputType(MachineStatusConditionsOutput{})
	pulumi.RegisterOutputType(MachineStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(MachineStatusNodeRefOutput{})
	pulumi.RegisterOutputType(MachineStatusNodeRefPtrOutput{})
}
