// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IPAddress is the Schema for the ipaddress API.
type IPAddress struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// IPAddressSpec is the desired state of an IPAddress.
	Spec IPAddressSpecPtrOutput `pulumi:"spec"`
}

// NewIPAddress registers a new resource with the given unique name, arguments, and options.
func NewIPAddress(ctx *pulumi.Context,
	name string, args *IPAddressArgs, opts ...pulumi.ResourceOption) (*IPAddress, error) {
	if args == nil {
		args = &IPAddressArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("ipam.cluster.x-k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("IPAddress")
	var resource IPAddress
	err := ctx.RegisterResource("kubernetes:ipam.cluster.x-k8s.io/v1alpha1:IPAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPAddress gets an existing IPAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPAddressState, opts ...pulumi.ResourceOption) (*IPAddress, error) {
	var resource IPAddress
	err := ctx.ReadResource("kubernetes:ipam.cluster.x-k8s.io/v1alpha1:IPAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPAddress resources.
type ipaddressState struct {
}

type IPAddressState struct {
}

func (IPAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipaddressState)(nil)).Elem()
}

type ipaddressArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IPAddressSpec is the desired state of an IPAddress.
	Spec *IPAddressSpec `pulumi:"spec"`
}

// The set of arguments for constructing a IPAddress resource.
type IPAddressArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IPAddressSpec is the desired state of an IPAddress.
	Spec IPAddressSpecPtrInput
}

func (IPAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipaddressArgs)(nil)).Elem()
}

type IPAddressInput interface {
	pulumi.Input

	ToIPAddressOutput() IPAddressOutput
	ToIPAddressOutputWithContext(ctx context.Context) IPAddressOutput
}

func (*IPAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddress)(nil)).Elem()
}

func (i *IPAddress) ToIPAddressOutput() IPAddressOutput {
	return i.ToIPAddressOutputWithContext(context.Background())
}

func (i *IPAddress) ToIPAddressOutputWithContext(ctx context.Context) IPAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressOutput)
}

type IPAddressOutput struct{ *pulumi.OutputState }

func (IPAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddress)(nil)).Elem()
}

func (o IPAddressOutput) ToIPAddressOutput() IPAddressOutput {
	return o
}

func (o IPAddressOutput) ToIPAddressOutputWithContext(ctx context.Context) IPAddressOutput {
	return o
}

func (o IPAddressOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAddress) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o IPAddressOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAddress) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o IPAddressOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *IPAddress) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// IPAddressSpec is the desired state of an IPAddress.
func (o IPAddressOutput) Spec() IPAddressSpecPtrOutput {
	return o.ApplyT(func(v *IPAddress) IPAddressSpecPtrOutput { return v.Spec }).(IPAddressSpecPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressInput)(nil)).Elem(), &IPAddress{})
	pulumi.RegisterOutputType(IPAddressOutput{})
}
