name: Integration Test

on:
  pull_request:
    branches: [v2]
  workflow_dispatch:
  push:
    branches: [v2-integration-test]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    # if: github.actor == 'renovate[bot]'
    env:
      RQ_STACK: ci
      RQ_TALOSCONFIG: ${{ github.workspace }}/talosconfig
      RQ_KUBECONFIG: ${{ github.workspace }}/kubeconfig
      TALOSCONFIG: ${{ github.workspace }}/talosconfig
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      CLOUDFLARE_API_TOKEN: bogus
      STACK_ID: ${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - uses: pulumi/actions@v4

      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      # TODO: Get a specfic version
      - name: Install talosctl
        run: curl -sL https://talos.dev/install | sh

      - name: Terraform Init
        working-directory: clusters/rosequartz
        run: terraform init -lockfile=readonly
        env:
          TF_WORKSPACE: rosequartz-ci

      - name: Setup workspace
        id: setup-workspace
        working-directory: clusters/rosequartz
        run: |
          workspace="rosequartz-$STACK_ID"
          terraform workspace new "$workspace"
          terraform workspace select "$workspace"
          echo "workspace=$workspace" >> "$GITHUB_OUTPUT"

      - name: Create test node
        working-directory: clusters/rosequartz
        run: docker compose -f ci/docker-compose.yaml up -d
        timeout-minutes: 1

      - name: Terraform Apply
        working-directory: clusters/rosequartz
        run: terraform apply -var-file=vars/ci.tfvars -auto-approve
        timeout-minutes: 5

      - name: Write configuration files
        working-directory: clusters/rosequartz
        run: |
          terraform output -raw talosconfig > "$RQ_TALOSCONFIG"
          terraform output -raw kubeconfig > "$RQ_KUBECONFIG"

      - name: Rosequartz validation
        working-directory: clusters/rosequartz
        run: ./spec/validation.sh

      - run: npm ci
        working-directory: apps/cert-manager

      - run: helm dependency update # Ugh https://github.com/helm/helm/issues/9903
        working-directory: apps/cert-manager

      - run: pulumi stack init "rq-$STACK_ID" --copy-config-from rosequartz
        working-directory: apps/cert-manager

      - uses: pulumi/actions@v4
        with:
          stack-name: UnstoppableMango/thecluster-cert-manager/rq-${{ env.STACK_ID }}
          command: up
          work-dir: apps/cert-manager

      # - run: ./spec/validation.sh
      #   working-directory: apps/cert-manager

      - run: npm ci
        working-directory: apps/cloudflare-ingress

      - run: helm dependency update # Ugh https://github.com/helm/helm/issues/9903
        working-directory: apps/cloudflare-ingress

      - run: pulumi stack init "rq-$STACK_ID" --copy-config-from rosequartz
        working-directory: apps/cloudflare-ingress

      - uses: pulumi/actions@v4
        with:
          stack-name: UnstoppableMango/thecluster-cloudflare-ingress/rq-${{ env.STACK_ID }}
          command: up
          work-dir: apps/cloudflare-ingress
          config-map: |
            suffix: ${{ env.STACK_ID }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - run: |
          name="$(kubectl get pods -n cloudflare-ingress -o json | jq -r '.items[].metadata.name' | grep ingress)"
          kubectl describe pod -n cloudflare-ingress "$name"
        if: failure()

      - run: ./spec/validation.sh
        working-directory: apps/cloudflare-ingress

      - name: Tear down cloudflare-ingress
        if: always()
        working-directory: apps/cloudflare-ingress
        run: |
          pulumi down -yf
          pulumi stack rm -yf "rq-$STACK_ID"

      - name: Tear down cert-manager
        if: always()
        working-directory: apps/cert-manager
        run: |
          pulumi down -yf
          pulumi stack rm -yf "rq-$STACK_ID"

      - name: Tear down rosequartz
        if: always()
        working-directory: clusters/rosequartz
        run: |
          terraform destroy -auto-approve
          terraform workspace select rosequartz-ci
          terraform workspace delete "${{ steps.setup-workspace.outputs.workspace }}"
        timeout-minutes: 5
