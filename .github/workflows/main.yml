name: Main

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_CLI_ARGS: '-no-color'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set modified stacks
        id: stacks
        uses: ./.github/actions/modified-stacks
    outputs:
      rosequartz: ${{ steps.stacks.outputs.rosequartz }}
      cert-manager: ${{ steps.stacks.outputs.cert-manager }}
      cloudflare-ingress: ${{ steps.stacks.outputs.cloudflare-ingress }}
      dashboard: ${{ steps.stacks.outputs.dashboard }}
      metrics-server: ${{ steps.stacks.outputs.metrics-server }}
      clusterapi: ${{ steps.stacks.outputs.clusterapi }}

  rosequartz:
    name: Rosequartz
    runs-on: ubuntu-latest
    needs: [setup]
    if: fromJson(needs.setup.outputs.rosequartz) && !failure() && !cancelled()
    concurrency: setup-${{ github.event_name }}
    defaults:
      run:
        working-directory: clusters/rosequartz
    env:
      RQ_STACK: ${{ github.event_name == 'pull_request' && 'ci' || 'prod' }}
      RQ_TALOSCONFIG: talosconfig
      RQ_KUBECONFIG: kubeconfig
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # TODO: Get a specfic version
      - name: Install talosctl
        run: curl -sL https://talos.dev/install | sh

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -lockfile=readonly
        env:
          TF_WORKSPACE: ${{ github.event_name == 'push' && 'rosequartz-prod' || 'rosequartz-ci' }}

      - name: Setup workspace
        id: setup-workspace
        run: |
          workspace="rosequartz"
          if [ "$GITHUB_EVENT_NAME" == "push" ]; then
              workspace="$workspace-prod"
          else
              workspace="$workspace-${GITHUB_HEAD_REF//[\/.]/-}"
              terraform workspace new "$workspace"
          fi
          terraform workspace select "$workspace"
          echo "workspace=$workspace" >> "$GITHUB_OUTPUT"

      - name: Terraform Validate
        run: terraform validate

      - name: Create test node
        if: github.event_name == 'pull_request'
        run: docker compose -f ci/docker-compose.yaml up -d
        timeout-minutes: 1

      - name: Setup secrets
        if: github.event_name == 'push'
        run: |
          echo "TF_VAR_public_ip=${{ secrets.RQ_PUBLIC_IP }}" >> "$GITHUB_ENV"
          echo "TF_VAR_primary_dns_name=${{ secrets.RQ_PRIMARY_DNS_NAME }}" >> "$GITHUB_ENV"

      - name: Terraform Plan
        run: terraform plan -var-file=vars/$RQ_STACK.tfvars -out=tfplan
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        timeout-minutes: 5
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Write configuration files
        run: |
          terraform output -raw talosconfig > "$RQ_TALOSCONFIG"
          terraform output -raw kubeconfig > "$RQ_KUBECONFIG"

      - name: Cluster validation
        run: ./spec/validation.sh

      - name: Tear down
        if: github.event_name == 'pull_request' && !cancelled()
        run: |
          terraform destroy -auto-approve
          terraform workspace select rosequartz-ci
          terraform workspace delete "${{ steps.setup-workspace.outputs.workspace }}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        timeout-minutes: 5

  cert-manager:
    name: Cert Manager
    runs-on: ubuntu-latest
    needs: [setup, rosequartz]
    if: fromJson(needs.setup.outputs.cert-manager) && !failure() && !cancelled()
    concurrency: cert-manager-${{ github.event_name }}
    defaults:
      run:
        working-directory: apps/cert-manager
    env:
      TF_WORKSPACE: rosequartz-prod
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: apps/cert-manager/package-lock.json

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Setup kubeconfig
        run: |
          terraform init -lockfile=readonly
          terraform output -raw kubeconfig > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> "$GITHUB_ENV"
        working-directory: clusters/rosequartz

      - run: npm ci
      - run: helm dependency update # Ugh https://github.com/helm/helm/issues/9903

      - name: Pulumi Action
        uses: pulumi/actions@v4
        with:
          stack-name: UnstoppableMango/thecluster-cert-manager/rosequartz
          command: ${{ github.event_name == 'push' && 'up' || 'preview' }}
          work-dir: apps/cert-manager
          pulumi-version: 3.89.0 # renovate depName=pulumi/pulumi

  cloudflare-ingress:
    name: Cloudflare Ingress
    runs-on: ubuntu-latest
    needs: [setup, rosequartz]
    if: fromJson(needs.setup.outputs.cloudflare-ingress) && !failure() && !cancelled()
    concurrency: cloudflare-ingress-${{ github.event_name }}
    defaults:
      run:
        working-directory: apps/cloudflare-ingress
    env:
      TF_WORKSPACE: rosequartz-prod
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: apps/cloudflare-ingress/package-lock.json

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Setup kubeconfig
        run: |
          terraform init -lockfile=readonly
          terraform output -raw kubeconfig > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> "$GITHUB_ENV"
        working-directory: clusters/rosequartz

      - run: npm ci
      - run: helm dependency update # Ugh https://github.com/helm/helm/issues/9903

      - name: Pulumi Action
        uses: pulumi/actions@v4
        with:
          stack-name: UnstoppableMango/thecluster-cloudflare-ingress/rosequartz
          command: ${{ github.event_name == 'push' && 'up' || 'preview' }}
          work-dir: apps/cloudflare-ingress
          pulumi-version: 3.89.0 # renovate depName=pulumi/pulumi

      - name: Validate
        if: ${{ github.event_name == 'push' }}
        run: ./spec/validation.sh

  dashboard:
    name: Kubernetes Dashboard
    runs-on: ubuntu-latest
    needs: [setup, rosequartz, cloudflare-ingress]
    if: fromJson(needs.setup.outputs.dashboard) && !failure() && !cancelled()
    concurrency: dashboard-${{ github.event_name }}
    defaults:
      run:
        working-directory: apps/dashboard
    env:
      TF_WORKSPACE: rosequartz-prod
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: apps/dashboard/package-lock.json

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Setup kubeconfig
        run: |
          terraform init -lockfile=readonly
          terraform output -raw kubeconfig > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> "$GITHUB_ENV"
        working-directory: clusters/rosequartz

      - run: npm ci
      - run: helm dependency update # Ugh https://github.com/helm/helm/issues/9903

      - name: Pulumi Action
        uses: pulumi/actions@v4
        with:
          stack-name: UnstoppableMango/thecluster-dashboard/rosequartz
          command: ${{ github.event_name == 'push' && 'up' || 'preview' }}
          work-dir: apps/dashboard
          pulumi-version: 3.89.0 # renovate depName=pulumi/pulumi

      - name: Validate
        if: ${{ github.event_name == 'push' }}
        run: ./spec/validation.sh

  metrics-server:
    name: Metrics Server
    runs-on: ubuntu-latest
    needs: [setup, rosequartz]
    if: fromJson(needs.setup.outputs.metrics-server) && !failure() && !cancelled()
    concurrency: metrics-server-${{ github.event_name }}
    defaults:
      run:
        working-directory: apps/metrics-server
    env:
      TF_WORKSPACE: rosequartz-prod
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: apps/metrics-server/package-lock.json

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Setup kubeconfig
        run: |
          terraform init -lockfile=readonly
          terraform output -raw kubeconfig > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> "$GITHUB_ENV"
        working-directory: clusters/rosequartz

      - run: npm ci
      - run: helm dependency update # Ugh https://github.com/helm/helm/issues/9903

      - name: Pulumi Action
        uses: pulumi/actions@v4
        with:
          stack-name: UnstoppableMango/thecluster-metrics-server/rosequartz
          command: ${{ github.event_name == 'push' && 'up' || 'preview' }}
          work-dir: apps/metrics-server
          pulumi-version: 3.89.0 # renovate depName=pulumi/pulumi

      - name: Validate
        if: ${{ github.event_name == 'push' }}
        run: ./spec/validation.sh

  clusterapi:
    name: Cluster API
    runs-on: ubuntu-latest
    needs: [setup, rosequartz, cert-manager]
    if: fromJson(needs.setup.outputs.clusterapi) && !failure() && !cancelled()
    concurrency: clusterapi-${{ github.event_name }}
    defaults:
      run:
        working-directory: apps/clusterapi
    env:
      TF_WORKSPACE: rosequartz-prod
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: apps/clusterapi/package-lock.json

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Setup kubeconfig
        run: |
          terraform init -lockfile=readonly
          terraform output -raw kubeconfig > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> "$GITHUB_ENV"
        working-directory: clusters/rosequartz

      - run: npm ci

      - name: Pulumi Action
        uses: pulumi/actions@v4
        with:
          stack-name: UnstoppableMango/thecluster-clusterapi/rosequartz
          command: ${{ github.event_name == 'push' && 'up' || 'preview' }}
          work-dir: apps/clusterapi
          pulumi-version: 3.89.0 # renovate depName=pulumi/pulumi

      - name: Validate
        if: ${{ github.event_name == 'push' }}
        run: ./spec/validation.sh
