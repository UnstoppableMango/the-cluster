name: Main

on:
  pull_request:
    branches: [v2]
  push:
    branches: [v2]

jobs:
  rosequartz:
    name: Rosequartz Stack
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    defaults:
      run:
        working-directory: stacks/rosequartz
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      TF_CLI_ARGS: '-no-color'
      TF_WORKSPACE: ${{ github.event_name == 'pull_request' && 'rosequartz-ci' || 'rosequartz-prod' }}
      ROSEQUARTZ_STACK: ${{ github.event_name == 'pull_request' && 'ci' || 'prod' }}
      ROSEQUARTZ_TALOSCONFIG: talosconfig
      ROSEQUARTZ_KUBECONFIG: kubeconfig
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # TODO: Get a specfic version
      - name: Install talosctl
        run: curl -sL https://talos.dev/install | sh

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -lockfile=readonly

      - name: Terraform Validate
        run: terraform validate

      - name: Create test node
        if: github.event_name == 'pull_request'
        run: docker compose -f ci/docker-compose.yaml up -d
        timeout-minutes: 1

      - name: Setup secrets
        if: github.event_name == 'push'
        run: |
          echo "TF_VAR_public_ip=${{ secrets.ROSEQUARTZ_PUBLIC_IP }}" >> $GITHUB_ENV
          echo "TF_VAR_primary_dns_name=${{ secrets.ROSEQUARTZ_PRIMARY_DNS_NAME }}" >> $GITHUB_ENV

      - name: Terraform Plan
        run: terraform plan -var-file=vars/$ROSEQUARTZ_STACK.tfvars -out=tfplan
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        timeout-minutes: 5
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Write configuration files
        run: |
          terraform output -raw talosconfig > "$ROSEQUARTZ_TALOSCONFIG"
          terraform output -raw kubeconfig > "$ROSEQUARTZ_KUBECONFIG"

      - name: Cluster validation
        run: ./spec/validation.sh

      - name: Tear down
        if: github.event_name == 'pull_request' && !cancelled()
        run: terraform destroy -auto-approve
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        timeout-minutes: 5
